import CourierAggregator from "./Models/CourierAggregator.js"
import Order from "./Models/Order.js"
import Client from "./Models/Client.js"
import { spawn } from "child_process";
import path from "path";
import { fileURLToPath } from "url";
import CourierRestrictions from "./Models/CourierRestrictions.js";
import AquaMarket from "./Models/AquaMarket.js";
import { pushNotification } from "./pushNotification.js";
import { getDateAlmaty } from "./utils/dateUtils.js";
import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();

// –í—ã—á–∏—Å–ª—è–µ–º __dirname –≤ ES –º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –≤–Ω—É—Ç—Ä–∏ venv
const pythonPath = process.platform === "win32"
  ? path.join(__dirname, "venv", "Scripts", "python.exe")
  : path.join(__dirname, "venv", "bin", "python");

export function runPythonVRP(couriers, orders, courier_restrictions) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const python = spawn(pythonPath, ["./orTools/vrp_solver_with_time_windows.py"]);

        const input = {
            common_depot: {
                id: "depot",
                lat: 43.16857,
                lon: 76.89642,
            },
            couriers,
            orders,
            courier_restrictions,
        };

        let output = "";
        let error = "";

        python.stdout.on("data", (data) => {
            output += data.toString();
        });

        python.stderr.on("data", (data) => {
            error += data.toString();
        });

        python.on("close", (code) => {
            // –í—ã–≤–æ–¥–∏–º stderr –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (error.trim()) {
                console.log("Python stderr:", error);
            }
            
            if (code === 0) {
                try {
                    const parsed = JSON.parse(output);
                    resolve(parsed);
                } catch (e) {
                    reject("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞ Python: " + e.message + "\n–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + output);
                }
                // resolve(output);
            } else {
                reject(`Python script exited with code ${code}\nSTDERR:\n${error}\nSTDOUT:\n${output}`);
            }
        });

        python.stdin.write(JSON.stringify(input));
        python.stdin.end();
    });
}

export function runPythonVisualize(couriers, orders, routes) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const python = spawn(pythonPath, ["./orTools/testViz.py"]);

        const input = {
            common_depot: {
                id: "depot",
                lat: 43.16857,
                lon: 76.89642,
            },
            couriers,
            orders,
            routes,
        };

        let output = "";
        let error = "";

        python.stdout.on("data", (data) => {
            output += data.toString();
        });

        python.stderr.on("data", (data) => {
            error += data.toString();
        });

        python.on("close", (code) => {
            if (code === 0) {
                let result;
                try {
                    result = JSON.parse(output);
                } catch (e) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON
                    result = {
                        success: true,
                        message: output.trim()
                    };
                }
                resolve(result);
            } else {
                reject(`Python script exited with code ${code}\n${error}`);
            }
        });

        python.stdin.write(JSON.stringify(input));
        python.stdin.end();
    });
}

const zeroing = async () => {
    const todayString = getDateAlmaty();

    const resetResult = await Order.updateMany(
        { 
            "date.d": todayString,
            forAggregator: true,
            status: "awaitingOrder"
        },
        { 
            $set: { courierAggregator: null }
        }
    );
    
    console.log(`üìä –°–±—Ä–æ—à–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${resetResult.modifiedCount} –∑–∞–∫–∞–∑–æ–≤`);

    const couriersToUpdate = await CourierAggregator.find({ 
        onTheLine: true, 
        status: "active" 
    });
    
    for (const courier of couriersToUpdate) {

        const activeOrder = courier.order && courier.order.orderId ? courier.order : null

        const completeFirstOrder = courier.capacity12 > 0 || courier.capacity19 > 0 ? true : false
        
        // –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
        let ordersToSet = [];
        if (activeOrder) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –º–∞—Å—Å–∏–≤–µ orders
            const existingOrder = courier.orders.find(order => 
                order.orderId.toString() === activeOrder.orderId.toString()
            );
            
            if (!existingOrder) {
                ordersToSet = [activeOrder];
                console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ ${activeOrder.orderId} –¥–æ–±–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä—É ${courier.fullName}`);
            } else {
                ordersToSet = [existingOrder];
                console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ ${activeOrder.orderId} —É–∂–µ –µ—Å—Ç—å —É –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName}`);
            }
        }
        
        await CourierAggregator.updateOne(
            { _id: courier._id },
            { $set: { orders: ordersToSet, completeFirstOrder} }
        );
    }
    
    console.log("‚úÖ –°—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã (–Ω–∞—á–∞—Ç—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)\n");
}


const sendOrderPushNotification = async () => {
    const couriers = await CourierAggregator.find({status: "active", onTheLine: true})
    let needOrTools = false
    for (const courier of couriers) {

        if (courier.order && courier.order.orderId) {
            continue;
        }

        const orders = courier.orders
        const order = orders[0]
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!order || !order.products) {
            console.log(`‚ö†Ô∏è  –ö—É—Ä—å–µ—Ä ${courier.fullName} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
            continue;
        }
        
        let messageBody = "–ó–∞–∫–∞–∑ –Ω–∞ ";
        if (order.products.b12 > 0) {
            messageBody += `${order.products.b12} –±—É—Ç—ã–ª–æ–∫ 12.5–ª `
        }
        if (order.products.b19 > 0) {
            messageBody += `${order.products.b19} –±—É—Ç—ã–ª–æ–∫ 19.8–ª`
        }
        
        await pushNotification(
            "newOrder",
            messageBody,
            [courier.notificationPushToken],
            "newOrder",
            order
        );

        // –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
        await new Promise(resolve => setTimeout(resolve, 40000));
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∑–∞–∫–∞–∑—É ${order.orderId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);

        const checkOrder = await Order.findById(order.orderId)
        if (checkOrder.status !== "onTheWay") {
            needOrTools = true
            await CourierRestrictions.create({
                orderId: order.orderId,
                courierId: courier._id
            })
            await Order.findByIdAndUpdate(order.orderId, { $set: { courierAggregator: null } })
            await CourierAggregator.updateOne(
                { _id: courier._id },
                { $set: { order: null, orders: [] } },
            );
        }

    }

    if (needOrTools) {
        // –í—ã–∑—ã–≤–∞–µ–º orTools –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        // –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤—ã–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Å—Ä–∞–∑—É
        console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ orTools –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞–º–∏");
        await orTools();
        console.log("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ orTools –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞–º–∏");
        return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ orTools()
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤
const cleanupDuplicateOrders = async () => {
    console.log("üßπ –û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ó–ê–ö–ê–ó–û–í");
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏
        const couriers = await CourierAggregator.find({
            onTheLine: true,
            status: "active",
            orders: { $exists: true, $not: { $size: 0 } }
        });
        
        let totalDuplicatesRemoved = 0;
        
        for (const courier of couriers) {
            const orderIds = courier.orders.map(order => order.orderId.toString());
            const uniqueOrderIds = [...new Set(orderIds)];
            
            if (orderIds.length !== uniqueOrderIds.length) {
                console.log(`‚ö†Ô∏è  –ö—É—Ä—å–µ—Ä ${courier.fullName} –∏–º–µ–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤:`);
                console.log(`   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orderIds.length}`);
                console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueOrderIds.length}`);
                console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${orderIds.length - uniqueOrderIds.length}`);
                
                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
                const uniqueOrders = [];
                const seenOrderIds = new Set();
                
                for (const order of courier.orders) {
                    const orderIdStr = order.orderId.toString();
                    if (!seenOrderIds.has(orderIdStr)) {
                        uniqueOrders.push(order);
                        seenOrderIds.add(orderIdStr);
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                await CourierAggregator.updateOne(
                    { _id: courier._id },
                    { $set: { orders: uniqueOrders } }
                );
                
                const duplicatesRemoved = orderIds.length - uniqueOrderIds.length;
                totalDuplicatesRemoved += duplicatesRemoved;
                
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${duplicatesRemoved} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —É –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—É—Ä—å–µ—Ä–∞–º
        const allOrderIds = await CourierAggregator.distinct("orders.orderId");
        
        for (const orderId of allOrderIds) {
            const couriersWithOrder = await CourierAggregator.find({
                "orders.orderId": orderId
            });
            
            if (couriersWithOrder.length > 1) {
                console.log(`‚ö†Ô∏è  –ö–û–ù–§–õ–ò–ö–¢: –ó–∞–∫–∞–∑ ${orderId} –Ω–∞–π–¥–µ–Ω —É ${couriersWithOrder.length} –∫—É—Ä—å–µ—Ä–æ–≤:`);
                couriersWithOrder.forEach(courier => {
                    console.log(`   - ${courier.fullName}`);
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–º—É –∫—É—Ä—å–µ—Ä—É –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
                const order = await Order.findById(orderId);
                if (order && order.courierAggregator) {
                    const correctCourier = couriersWithOrder.find(c => 
                        c._id.toString() === order.courierAggregator.toString()
                    );
                    
                    if (correctCourier) {
                        console.log(`‚úÖ –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –∫—É—Ä—å–µ—Ä–∞ ${correctCourier.fullName}`);
                        
                        // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ —É –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
                        await CourierAggregator.updateMany(
                            { 
                                _id: { $ne: correctCourier._id },
                                "orders.orderId": orderId 
                            },
                            { 
                                $pull: { 
                                    orders: { orderId: orderId } 
                                } 
                            }
                        );
                        
                        totalDuplicatesRemoved += couriersWithOrder.length - 1;
                        console.log(`üîÑ –ó–∞–∫–∞–∑ ${orderId} —É–¥–∞–ª–µ–Ω —É ${couriersWithOrder.length - 1} –∫—É—Ä—å–µ—Ä–æ–≤`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è  –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –≤ –±–∞–∑–µ, —É–¥–∞–ª—è–µ–º —É –≤—Å–µ—Ö`);
                    
                    await CourierAggregator.updateMany(
                        { "orders.orderId": orderId },
                        { $pull: { orders: { orderId: orderId } } }
                    );
                    
                    totalDuplicatesRemoved += couriersWithOrder.length;
                }
            }
        }
        
        console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicatesRemoved}`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:", error);
    }
};

export default async function orTools() {

    return

    await ensureMongoConnection();

    // –û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ü–ï–†–ï–î –ù–ê–ß–ê–õ–û–ú –†–ê–ë–û–¢–´
    await cleanupDuplicateOrders();

    await zeroing();

    const activeCouriers = await CourierAggregator.find({status: "active", onTheLine: true})
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: ${activeCouriers.length}`);

    const couriers = activeCouriers
        .filter(courier => {
            const hasValidCoords = courier.point && courier.point.lat && courier.point.lon;
            if (!hasValidCoords) {
                console.log(`‚ùå –ö—É—Ä—å–µ—Ä ${courier.fullName} –∏—Å–∫–ª—é—á–µ–Ω - –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`);
            }
            return hasValidCoords;
        })
        .map(courier => {
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ clientPoints
            let courierOrder = null;
            if (courier.order && courier.order.orderId && courier.order.clientPoints) {
                courierOrder = {
                    orderId: courier.order.orderId,
                    status: courier.order.status,
                    lat: courier.order.clientPoints.lat,
                    lon: courier.order.clientPoints.lon,
                    bottles_12: courier.order.products ? courier.order.products.b12 : 0,
                    bottles_19: courier.order.products ? courier.order.products.b19 : 0,
                    orderName: courier.order.clientTitle || courier.order.orderId // –ò—Å–ø–æ–ª—å–∑—É–µ–º clientTitle –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ orderId
                };
            }
            
            if (courier.order && courier.order.orderId && !courier.order.clientPoints) {
                console.log(`‚ö†Ô∏è  –ö—É—Ä—å–µ—Ä ${courier.fullName} –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ ${courier.order.orderId} –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç clientPoints`);
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∫—É—Ä—å–µ—Ä–∞
            // –ö—É—Ä—å–µ—Ä –ø—É—Å—Ç–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ 0 –∏ 12–ª, –∏ 19–ª –±—É—Ç—ã–ª–æ–∫
            // –ö—É—Ä—å–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –±—É—Ç—ã–ª–∫–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
            const hasActiveOrder = courierOrder !== null;
            const capacity12 = courier.capacity12 || 0;
            const capacity19 = courier.capacity19 || 0;
            const isEmpty = capacity12 === 0 && capacity19 === 0;
            
            console.log(`üìã –ö—É—Ä—å–µ—Ä ${courier.fullName}:`);
            console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: ${hasActiveOrder ? courierOrder.orderId : '–Ω–µ—Ç'}`);
            console.log(`   - –ò—Å—Ö–æ–¥–Ω—ã–µ capacity: 12–ª=${capacity12}, 19–ª=${capacity19}, –æ–±—â–∞—è=${courier.capacity}`);
            console.log(`   - –ë—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫: ${isEmpty ? '–ü–£–°–¢–û–ô' : '–ó–ê–ì–†–£–ñ–ï–ù–ù–´–ô'}`);
            console.log(`   - Capacity –¥–ª—è Python: 12–ª=${capacity12}, 19–ª=${capacity19}`);
            
            return {
                id: courier.fullName,
                lat: courier.point.lat,
                lon: courier.point.lon,
                capacity_12: capacity12,  // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫
                capacity_19: capacity19,  // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫
                capacity: courier.capacity,
                order: courierOrder,
                completeFirstOrder: courier.completeFirstOrder
            }
        })

    const today = new Date();
    const todayString = getDateAlmaty(today);

    const activeOrders = await Order.find({"date.d": todayString, forAggregator: true, status: "awaitingOrder"}).populate("client")
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${activeOrders.length}`);
    
    const orders = activeOrders
        .filter(order => {
            const hasValidCoords = order.address && order.address.point && order.address.point.lat && order.address.point.lon;
            if (!hasValidCoords) {
                console.log(`‚ùå –ó–∞–∫–∞–∑ ${order._id} –∏—Å–∫–ª—é—á–µ–Ω - –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`);
            }
            return hasValidCoords;
        })
        .map(order => ({
            orderId: order._id,
            lat: order.address.point.lat,
            lon: order.address.point.lon,
            bottles_12: order.products.b12,
            bottles_19: order.products.b19,
            status: order.status,
            orderName: order.client.fullName,
            isUrgent: order.isUrgent,
            "date.time": order.date.time
        }));

    const courier_restrictions = {}

    console.log("–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ orTools.js");
    
    console.log("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—å–µ—Ä–æ–≤ = ", couriers.length)
    console.log("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ = ", orders.length)
    console.log("–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–∫–∞–∑—ã = ", courier_restrictions)

    console.log("couriers = ", couriers)
    console.log("orders = ", orders)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (couriers.length === 0) {
        console.log("‚ùå –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏");
        return;
    }
    
    if (orders.length === 0) {
        console.log("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
        return;
    }
    
    const result = await runPythonVRP(couriers, orders, courier_restrictions);
    console.log("–ì–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:", result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ —Ä–µ—à–µ–Ω–∏–µ
    if (!result || result.length === 0) {
        console.log("‚ùå Python —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π");
        console.log("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã:");
        console.log(`   - –ö—É—Ä—å–µ—Ä–æ–≤: ${couriers.length}`);
        console.log(`   - –ó–∞–∫–∞–∑–æ–≤: ${orders.length}`);
        console.log(`   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: ${Object.keys(courier_restrictions).length}`);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤
        const totalCapacity = couriers.reduce((sum, courier) => sum + courier.capacity, 0);
        const totalOrders = orders.reduce((sum, order) => sum + order.bottles_12 + order.bottles_19, 0);
        
        console.log(`   - –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤: ${totalCapacity} –±—É—Ç—ã–ª–æ–∫`);
        console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤ –∑–∞–∫–∞–∑–∞—Ö: ${totalOrders} –±—É—Ç—ã–ª–æ–∫`);
        
        if (totalCapacity < totalOrders) {
            console.log("   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤!");
        }
        
        console.log("   üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫—É—Ä—å–µ—Ä–∞–º:");
        couriers.forEach(courier => {
            console.log(`     - ${courier.id}: –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å=${courier.capacity}, 12–ª=${courier.capacity_12}, 19–ª=${courier.capacity_19}, –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑=${courier.order ? courier.order.orderId : '–Ω–µ—Ç'}`);
        });
        
        console.log("   üìã –î–µ—Ç–∞–ª–∏ –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º:");
        Object.entries(courier_restrictions).forEach(([orderId, restrictions]) => {
            console.log(`     - –ó–∞–∫–∞–∑ ${orderId}: –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ ${restrictions.join(', ')}`);
        });
        
        console.log("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤");
        return;
    }

    try {
        const visualizeResult = await runPythonVisualize(couriers, orders, result);
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", visualizeResult);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        console.log("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏");
        return;
    }


    for (const route of result) {
        const courier = couriers.find(c => c.id === route.courier_id)
        const hasActiveOrder = courier.order && courier.order.status === "onTheWay"
        const isEmptyCourier = courier.capacity_12 === 0 && courier.capacity_19 === 0
        
        console.log(`‚úÖ –ö—É—Ä—å–µ—Ä ${route.courier_id} –ø–æ–ª—É—á–∏–ª ${route.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
        console.log(`   –¢–∏–ø –∫—É—Ä—å–µ—Ä–∞: ${route.courier_type || (isEmptyCourier ? '–ü–£–°–¢–û–ô' : '–ó–ê–ì–†–£–ñ–ï–ù–ù–´–ô')}`);
        console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è –±—É—Ç—ã–ª–æ–∫: 12–ª=${route.required_bottles.bottles_12}, 19–ª=${route.required_bottles.bottles_19}, –≤—Å–µ–≥–æ=${route.required_bottles.total}`);
        console.log(`   –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å: 12–ª=${route.courier_should_take.bottles_12}, 19–ª=${route.courier_should_take.bottles_19}, –≤—Å–µ–≥–æ=${route.courier_should_take.total}`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${route.capacity_utilization.percent}%`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: ${hasActiveOrder ? courier.order.orderId : '–Ω–µ—Ç'}`);
        console.log(`   –ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: ${courier.completeFirstOrder ? '–¥–∞' : '–Ω–µ—Ç'}`);
        
        if (hasActiveOrder) {
            const activeOrderIndex = route.orders.indexOf(courier.order.orderId)
            if (activeOrderIndex === 0) {
                console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º –≤ –º–∞—Ä—à—Ä—É—Ç–µ`);
            } else if (activeOrderIndex > 0) {
                console.log(`   ‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∏–¥–µ—Ç ${activeOrderIndex + 1}-–º –≤ –º–∞—Ä—à—Ä—É—Ç–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º)`);
            } else {
                console.log(`   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ`);
            }
        }
    }


    const aquaMarket = await AquaMarket.findOne({
        "point.lat": { $exists: true, $ne: null },
        "point.lon": { $exists: true, $ne: null }
    });

    for (const route of result) {
        const courier = await CourierAggregator.findOne({fullName: route.courier_id});
        
        // –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞
        const existingOrderIds = courier.orders.map(order => order.orderId.toString());
        console.log(`üìã –ö—É—Ä—å–µ—Ä ${courier.fullName} —É–∂–µ –∏–º–µ–µ—Ç –∑–∞–∫–∞–∑—ã: ${existingOrderIds.join(', ')}`);
        
        for (const orderId of route.orders) {
            // –ü–†–û–í–ï–†–ö–ê 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É –∫—É—Ä—å–µ—Ä–∞
            if (existingOrderIds.includes(orderId.toString())) {
                console.log(`‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢ –ù–ê–ô–î–ï–ù: –ó–∞–∫–∞–∑ ${orderId} —É–∂–µ –µ—Å—Ç—å —É –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue;
            }
            
            // –ü–†–û–í–ï–†–ö–ê 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ –¥—Ä—É–≥–æ–º—É –∫—É—Ä—å–µ—Ä—É
            const existingAssignment = await Order.findById(orderId);
            if (existingAssignment && existingAssignment.courierAggregator && 
                existingAssignment.courierAggregator.toString() !== courier._id.toString()) {
                console.log(`‚ö†Ô∏è  –ö–û–ù–§–õ–ò–ö–¢: –ó–∞–∫–∞–∑ ${orderId} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥—Ä—É–≥–æ–º—É –∫—É—Ä—å–µ—Ä—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue;
            }
            
            // –ü–†–û–í–ï–†–ö–ê 3: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –¥—Ä—É–≥–∏—Ö –∫—É—Ä—å–µ—Ä–æ–≤
            const otherCouriersWithOrder = await CourierAggregator.find({
                _id: { $ne: courier._id },
                "orders.orderId": orderId
            });
            
            if (otherCouriersWithOrder.length > 0) {
                console.log(`‚ö†Ô∏è  –ù–ê–ô–î–ï–ù –£ –î–†–£–ì–ò–•: –ó–∞–∫–∞–∑ ${orderId} –Ω–∞–π–¥–µ–Ω —É –∫—É—Ä—å–µ—Ä–æ–≤: ${otherCouriersWithOrder.map(c => c.fullName).join(', ')}`);
                // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ —É –¥—Ä—É–≥–∏—Ö –∫—É—Ä—å–µ—Ä–æ–≤
                await CourierAggregator.updateMany(
                    { 
                        _id: { $ne: courier._id },
                        "orders.orderId": orderId 
                    },
                    { 
                        $pull: { 
                            orders: { orderId: orderId } 
                        } 
                    }
                );
                console.log(`üîÑ –ó–∞–∫–∞–∑ ${orderId} —É–¥–∞–ª–µ–Ω —É –¥—Ä—É–≥–∏—Ö –∫—É—Ä—å–µ—Ä–æ–≤`);
            }
            
            await Order.findByIdAndUpdate(orderId, { $set: { courierAggregator: courier._id } });
            const order = await Order.findById(orderId).populate("client");
        
            const orderData = {
                orderId: order._id,
                status: order.status,
                products: order.products,
                sum: order.sum,
                opForm: order.opForm,
                comment: order.comment || "",
                clientReview: order.clientReview || "",
                clientTitle: order.client?.fullName || "",
                clientPhone: order.client?.phone || "",
                date: order.date,
                clientPoints: {
                    lat: order.address.point.lat,
                    lon: order.address.point.lon
                },
                clientAddress: order.address.actual,
                clientAddressLink: order.address.link || "",
                aquaMarketPoints: { lat: aquaMarket.point.lat, lon: aquaMarket.point.lon },
                aquaMarketAddress: aquaMarket.address,
                aquaMarketAddressLink: aquaMarket.link,
                step: "toAquaMarket",
                income: order.sum,
            };
        
            // –ë–ï–ó–û–ü–ê–°–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º $addToSet –≤–º–µ—Å—Ç–æ $push –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            await CourierAggregator.updateOne(
                { _id: courier._id },
                { $addToSet: { orders: orderData } }
            );
            
            console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä—É ${courier.fullName}`);
        }
        
        console.log(`‚úÖ –ö—É—Ä—å–µ—Ä ${courier.fullName} –ø–æ–ª—É—á–∏–ª ${route.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
        console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è –±—É—Ç—ã–ª–æ–∫: 12–ª=${route.required_bottles.bottles_12}, 19–ª=${route.required_bottles.bottles_19}, –≤—Å–µ–≥–æ=${route.required_bottles.total}`);
        console.log(`   –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å: 12–ª=${route.courier_should_take.bottles_12}, 19–ª=${route.courier_should_take.bottles_19}, –≤—Å–µ–≥–æ=${route.courier_should_take.total}`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${route.capacity_utilization.percent}%`);
    }

    console.log("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã");

    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    
    const needOrTools = await sendOrderPushNotification();

    if (needOrTools) {
        console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ orTools –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞–º–∏");
        await orTools();
    }

    console.log("‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
}

// orTools();

async function ensureMongoConnection() {
    if (mongoose.connection.readyState === 0) {
        const uri = "mongodb://localhost:27017/crm";
        await mongoose.connect(uri, {
            dbName: "crm",
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log("‚úÖ MongoDB connected (orTools.js)");
    }
}