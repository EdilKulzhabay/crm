import CourierAggregator from "./Models/CourierAggregator.js"
import Order from "./Models/Order.js"
import Client from "./Models/Client.js"
import { spawn } from "child_process";
import path from "path";
import { fileURLToPath } from "url";
import CourierRestrictions from "./Models/CourierRestrictions.js";
import AquaMarket from "./Models/AquaMarket.js";
import { pushNotification } from "./pushNotification.js";
import { getDateAlmaty } from "./utils/dateUtils.js";
import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();

// –í—ã—á–∏—Å–ª—è–µ–º __dirname –≤ ES –º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –≤–Ω—É—Ç—Ä–∏ venv
const pythonPath = process.platform === "win32"
  ? path.join(__dirname, "venv", "Scripts", "python.exe")
  : path.join(__dirname, "venv", "bin", "python");

export function runPythonVRP(couriers, orders, courier_restrictions) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const python = spawn(pythonPath, ["./orTools/vrp_solver_optimized.py"]);
        // const python = spawn(pythonPath, ["./orTools/vrp_solver2.py"]);

        const input = {
            common_depot: {
                id: "depot",
                lat: 43.16857,
                lon: 76.89642,
            },
            couriers,
            orders,
            courier_restrictions,
        };

        let output = "";
        let error = "";

        python.stdout.on("data", (data) => {
            output += data.toString();
        });

        python.stderr.on("data", (data) => {
            error += data.toString();
        });

        python.on("close", (code) => {
            if (code === 0) {
                try {
                    const parsed = JSON.parse(output);
                    resolve(parsed);
                } catch (e) {
                    reject("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞ Python: " + e.message + "\n–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + output);
                }
                // resolve(output);
            } else {
                reject(`Python script exited with code ${code}\n${error}`);
            }
        });

        python.stdin.write(JSON.stringify(input));
        python.stdin.end();
    });
}

export function runPythonVisualize(couriers, orders, routes) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        // const python = spawn(pythonPath, ["./orTools/visualize_routes2.py"]);
        const python = spawn(pythonPath, ["./orTools/visualize_routes_optimized.py"]);

        const input = {
            common_depot: {
                id: "depot",
                lat: 43.16857,
                lon: 76.89642,
            },
            couriers,
            orders,
            routes,
        };

        let output = "";
        let error = "";

        python.stdout.on("data", (data) => {
            output += data.toString();
        });

        python.stderr.on("data", (data) => {
            error += data.toString();
        });

        python.on("close", (code) => {
            if (code === 0) {
                let result;
                try {
                    result = JSON.parse(output);
                } catch (e) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON
                    result = {
                        success: true,
                        message: output.trim()
                    };
                }
                resolve(result);
            } else {
                reject(`Python script exited with code ${code}\n${error}`);
            }
        });

        python.stdin.write(JSON.stringify(input));
        python.stdin.end();
    });
}

const zeroing = async () => {
    const todayString = getDateAlmaty();

    const orders = await Order.find({
        "date.d": todayString,
        $or: [
            { "address.point": { $exists: false } },
            { "address.point.lat": { $eq: null } },
            { "address.point.lon": { $eq: null } }
        ]
    })

    for (const order of orders) {
        const client = await Client.findById(order.client)
        const clientAddresses = client.addresses;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID 2GIS –ø–æ –∞–¥—Ä–µ—Å—É
        const fetchAddressId = async (item) => {
            try {
                const response = await axios.get('https://catalog.api.2gis.com/3.0/items/geocode', {
                    params: {
                        fields: "items.point",
                        key: "f5af220d-c60a-4cf6-a350-4a953c324a3d",
                        q: `–ê–ª–º–∞—Ç—ã, ${item.street}`,
                    },
                });
                console.log("response.data.result", response.data.result);
                
                return response.data.result.items[0] || null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∏–ª–∏ null
            } catch (error) {
                console.log(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å: ${item.street}`);
                return null;
            }
        };

        // –ü–æ–ª—É—á–∞–µ–º IDs –¥–ª—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
        const res2Gis = await Promise.allSettled(clientAddresses.map(fetchAddressId));
        res2Gis.forEach((result, index) => {
            console.log("result: ", result);
            
            if (result.status === "fulfilled") {
                clientAddresses[index].id2Gis = result?.value?.id
                clientAddresses[index].point = result?.value?.point
            } else {
                clientAddresses[index].id2Gis = null
                clientAddresses[index].point = {lat: null, lon: null}
            }
        });

        await Client.findByIdAndUpdate(client._id, { $set: { addresses: clientAddresses } })

        const orderAddress = clientAddresses.find(address => order.address.actual.includes(address.street))
        if (orderAddress) {
            await Order.findByIdAndUpdate(order._id, { $set: { address: orderAddress } })
        }
    }

    await Order.updateMany(
        { 
            "date.d": todayString,
            franchisee: { 
                $in: [
                    new mongoose.Types.ObjectId('66f15c557a27c92d447a16a0'), 
                    new mongoose.Types.ObjectId('66fc0cc6953c2dbbc86c2132'), 
                    new mongoose.Types.ObjectId('66fc0d01953c2dbbc86c2135'), 
                    new mongoose.Types.ObjectId('66fc0d3e953c2dbbc86c2138'),
                    new mongoose.Types.ObjectId('67010493e6648af4cb0213b7')
                ]
            },
            status: { $nin: ["onTheWay", "delivered", "cancelled"] }
        },
        { $set: { forAggregator: true } }
    )

    const resetResult = await Order.updateMany(
        { 
            "date.d": todayString,
            forAggregator: true,
            status: { $nin: ["onTheWay", "delivered", "cancelled"] } // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—á–∞—Ç—ã–µ, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
        },
        { 
            $unset: { courierAggregator: "" }
        }
    );
    
    console.log(`üìä –°–±—Ä–æ—à–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${resetResult.modifiedCount} –∑–∞–∫–∞–∑–æ–≤`);

    const couriersToUpdate = await CourierAggregator.find({ 
        onTheLine: true, 
        status: "active" 
    });
    
    for (const courier of couriersToUpdate) {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞—Ç—ã (–≤ —Å—Ç–∞—Ç—É—Å–µ "onTheWay")
        const activeOrders = courier.orders.filter(order => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "onTheWay" (—É–∂–µ –Ω–∞—á–∞—Ç –∫—É—Ä—å–µ—Ä–æ–º)
            return order.status && order.status === "onTheWay";
        });
        
        await CourierAggregator.updateOne(
            { _id: courier._id },
            { $set: { orders: activeOrders } }
        );
    }
    
    console.log("‚úÖ –°—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã (–Ω–∞—á–∞—Ç—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)\n");
}


const sendOrderPushNotification = async () => {
    const couriers = await CourierAggregator.find({status: "active", onTheLine: true})
    let needOrTools = false
    for (const courier of couriers) {

        if (courier.orders.length === 0 || courier.orders.length === undefined || courier.orders.length === null) {
            continue;
        }

        if (courier.order) {
            continue;
        }

        const orders = courier.orders
        for (const order of orders) {
            let messageBody = "–ó–∞–∫–∞–∑ –Ω–∞ ";
            if (order.products.b12 > 0) {
                messageBody += `${order.products.b12} –±—É—Ç—ã–ª–æ–∫ 12.5–ª `
            }
            if (order.products.b19 > 0) {
                messageBody += `${order.products.b19} –±—É—Ç—ã–ª–æ–∫ 19.8–ª`
            }
            
            await pushNotification(
                "newOrder",
                messageBody,
                [courier.notificationPushToken],
                "newOrder",
                order
            );

            // –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
            await new Promise(resolve => setTimeout(resolve, 20000));
            console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∑–∞–∫–∞–∑—É ${order.orderId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);

            const checkOrder = await Order.findById(order.orderId)
            if (checkOrder.status !== "onTheWay") {
                needOrTools = true
                await CourierRestrictions.create({
                    orderId: order.orderId,
                    courierId: courier._id
                })
                await Order.findByIdAndUpdate(order.orderId, { $set: { courierAggregator: null } })
                await CourierAggregator.updateOne(
                    { _id: courier._id },
                    { $pull: { orders: { orderId: order.orderId } } }
                );
            } else {
                break;
            }
        }
    }

    if (needOrTools) {
        await orTools();
    }
}


export default async function orTools() {

    // –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:
    console.log("orTools");
    
    return 

    const couriers = [
        {
            id: 'courier_1',
            lat: 43.28, lon: 76.925,
            capacity_12: 0,
            capacity_19: 30,
            capacity: 40
        },
        {
            id: 'courier_2',
            lat: 43.20, lon: 76.900,
            capacity_12: 0,
            capacity_19: 15,
            capacity: 40
        }
    ]

    const orders = [
        { id: 'order_1', lat: 43.292268, lon: 76.931119, bottles_12: 0, bottles_19: 23 },
        { id: 'order_2', lat: 43.261362, lon: 76.929122, bottles_12: 0, bottles_19: 4 },
        { id: 'order_17', lat: 43.264191, lon: 76.932518, bottles_12: 0, bottles_19: 10 },
        { id: 'order_3', lat: 43.28, lon: 76.895, bottles_12: 0, bottles_19: 4 },
        { id: 'order_4', lat: 43.29, lon: 76.895, bottles_12: 0, bottles_19: 10 }
    ]
    
    const courier_restrictions = {}

    console.log("–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ orTools.js");
    
    console.log("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—å–µ—Ä–æ–≤ = ", couriers.length)
    console.log("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ = ", orders.length)
    console.log("–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–∫–∞–∑—ã = ", courier_restrictions)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (couriers.length === 0) {
        console.log("‚ùå –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏");
        return;
    }
    
    if (orders.length === 0) {
        console.log("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
        return;
    }
    
    const result = await runPythonVRP(couriers, orders, courier_restrictions);
    console.log("–ì–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:", result);

    // –†–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –∫–∞–∂–¥–æ–º –º–∞—Ä—à—Ä—É—Ç–µ
    // for (const route of result) {
    //     route.orders.reverse();
    // }

    await runPythonVisualize(couriers, orders, result);


    for (const route of result) {
        console.log(`‚úÖ –ö—É—Ä—å–µ—Ä ${route.courier_id} –ø–æ–ª—É—á–∏–ª ${route.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
        console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è –±—É—Ç—ã–ª–æ–∫: 12–ª=${route.required_bottles.bottles_12}, 19–ª=${route.required_bottles.bottles_19}, –≤—Å–µ–≥–æ=${route.required_bottles.total}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –∫—É—Ä—å–µ—Ä–∞
        if (route.courier_bottles) {
            // –ö—É—Ä—å–µ—Ä —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –±—É—Ç—ã–ª–æ–∫
            console.log(`   –£ –∫—É—Ä—å–µ—Ä–∞ –µ—Å—Ç—å: 12–ª=${route.courier_bottles.bottles_12}, 19–ª=${route.courier_bottles.bottles_19}, –≤—Å–µ–≥–æ=${route.courier_bottles.total}`);
            
            if (route.max_capacity) {
                console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 12–ª=${route.max_capacity.bottles_12}, 19–ª=${route.max_capacity.bottles_19}, –≤—Å–µ–≥–æ=${route.max_capacity.total}`);
            }
            
            if (route.bottles_sufficient) {
                if (route.refill_needed) {
                    console.log(`   üîÑ –ù—É–∂–Ω–æ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞—Ç—å: 12–ª=${route.refill_needed.bottles_12}, 19–ª=${route.refill_needed.bottles_19}, –≤—Å–µ–≥–æ=${route.refill_needed.total}`);
                    
                    if (route.refill_point) {
                        if (route.refill_point.after_order_id) {
                            console.log(`   üìç –¢–æ—á–∫–∞ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è: –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ ${route.refill_point.after_order_id}, –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º ${route.refill_point.before_order_id}`);
                        } else {
                            console.log(`   üìç –¢–æ—á–∫–∞ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è: –≤ –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞, –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º ${route.refill_point.before_order_id}`);
                        }
                    }
                } else {
                    console.log(`   ‚úÖ –ë—É—Ç—ã–ª–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ`);
                }
            } else {
                console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–∂–µ —Å –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏–µ–º!`);
                if (route.bottles_shortage) {
                    if (route.bottles_shortage.bottles_12 > 0) {
                        console.log(`      –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç 12–ª: ${route.bottles_shortage.bottles_12}`);
                    }
                    if (route.bottles_shortage.bottles_19 > 0) {
                        console.log(`      –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç 19–ª: ${route.bottles_shortage.bottles_19}`);
                    }
                }
            }
        } else if (route.courier_should_take) {
            // –ö—É—Ä—å–µ—Ä —Å –æ–±—â–µ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
            console.log(`   –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å: 12–ª=${route.courier_should_take.bottles_12}, 19–ª=${route.courier_should_take.bottles_19}, –≤—Å–µ–≥–æ=${route.courier_should_take.total}`);
            console.log(`   –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${route.courier_total_capacity} –±—É—Ç—ã–ª–æ–∫`);
        }
        
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${route.capacity_utilization.percent}%`);
    }



    return

    
}

orTools();

async function ensureMongoConnection() {
    if (mongoose.connection.readyState === 0) {
        const uri = "mongodb://localhost:27017/crm";
        await mongoose.connect(uri, {
            dbName: "crm",
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log("‚úÖ MongoDB connected (orTools.js)");
    }
}
