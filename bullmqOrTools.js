import { Queue, Worker, QueueScheduler } from 'bullmq';
import redisConnection from './redis-config.js';
import orTools from './orTools.js';

// –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è orTools –∑–∞–¥–∞—á
const orToolsQueue = new Queue('orTools', {
    connection: redisConnection,
    defaultJobOptions: {
        removeOnComplete: 10, // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        removeOnFail: 5,      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á
        attempts: 3,          // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
        backoff: {
            type: 'exponential',
            delay: 2000,      // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        },
    },
});

// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
const scheduler = new QueueScheduler('orTools', {
    connection: redisConnection,
});

// –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
const worker = new Worker('orTools', async (job) => {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ orTools –∑–∞–¥–∞—á–∏ ${job.id}`);
    
    try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º orTools
        const result = await orTools();
        
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${job.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        return {
            success: true,
            result,
            completedAt: new Date().toISOString(),
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${job.id}:`, error);
        throw error; // BullMQ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç –∑–∞–¥–∞—á—É
    }
}, {
    connection: redisConnection,
    concurrency: 1, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤–æ—Ä–∫–µ—Ä–∞
worker.on('completed', (job, result) => {
    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
});

worker.on('failed', (job, err) => {
    console.error(`‚ùå –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:`, err.message);
});

worker.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞:', err);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
export const addOrToolsJob = async (requestId = null, options = {}) => {
    const jobId = requestId || `orTools_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    const job = await orToolsQueue.add('optimize', {
        requestId: jobId,
        timestamp: new Date().toISOString(),
    }, {
        jobId,
        ...options,
    });
    
    console.log(`üìã –ó–∞–¥–∞—á–∞ ${jobId} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å BullMQ`);
    return job;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏
export const getQueueStatus = async () => {
    const waiting = await orToolsQueue.getWaiting();
    const active = await orToolsQueue.getActive();
    const completed = await orToolsQueue.getCompleted();
    const failed = await orToolsQueue.getFailed();
    
    return {
        waiting: waiting.length,
        active: active.length,
        completed: completed.length,
        failed: failed.length,
        total: waiting.length + active.length + completed.length + failed.length,
        activeJobs: active.map(job => ({
            id: job.id,
            timestamp: job.data.timestamp,
            requestId: job.data.requestId,
        })),
        waitingJobs: waiting.map(job => ({
            id: job.id,
            timestamp: job.data.timestamp,
            requestId: job.data.requestId,
        })),
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
export const clearQueue = async () => {
    await orToolsQueue.obliterate();
    console.log('üßπ –û—á–µ—Ä–µ–¥—å BullMQ –æ—á–∏—â–µ–Ω–∞');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
export const getJobResult = async (jobId) => {
    const job = await orToolsQueue.getJob(jobId);
    if (!job) {
        throw new Error(`–ó–∞–¥–∞—á–∞ ${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    
    const state = await job.getState();
    const result = job.returnvalue;
    const failedReason = job.failedReason;
    
    return {
        id: job.id,
        state,
        result,
        failedReason,
        timestamp: job.data.timestamp,
        requestId: job.data.requestId,
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
export const waitForJobCompletion = async (jobId, timeout = 300000) => { // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const job = await orToolsQueue.getJob(jobId);
    if (!job) {
        throw new Error(`–ó–∞–¥–∞—á–∞ ${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    
    return new Promise((resolve, reject) => {
        const timeoutId = setTimeout(() => {
            reject(new Error(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ${jobId}`));
        }, timeout);
        
        const checkJob = async () => {
            const state = await job.getState();
            if (state === 'completed') {
                clearTimeout(timeoutId);
                resolve(await getJobResult(jobId));
            } else if (state === 'failed') {
                clearTimeout(timeoutId);
                reject(new Error(`–ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${job.failedReason}`));
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                setTimeout(checkJob, 1000);
            }
        };
        
        checkJob();
    });
};

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await worker.close();
    await scheduler.close();
    await orToolsQueue.close();
    await redisConnection.quit();
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await worker.close();
    await scheduler.close();
    await orToolsQueue.close();
    await redisConnection.quit();
    process.exit(0);
});

export default {
    addOrToolsJob,
    getQueueStatus,
    clearQueue,
    getJobResult,
    waitForJobCompletion,
    queue: orToolsQueue,
    worker,
}; 