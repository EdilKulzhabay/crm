#!/usr/bin/env node

import mongoose from 'mongoose';
import CourierAggregator from './Models/CourierAggregator.js';
import Order from './Models/Order.js';
import { pushNotification } from "./pushNotification.js";

/**
 * üì± –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ö–£–†–¨–ï–†–ê–ú –° –ó–ê–ö–ê–ó–ê–ú–ò
 * –ò—â–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–≤–æ–º –∑–∞–∫–∞–∑–µ
 */

async function findCouriersWithOrders() {
    console.log("üîç –ü–û–ò–°–ö –ö–£–†–¨–ï–†–û–í –° –ó–ê–ö–ê–ó–ê–ú–ò");
    console.log("=".repeat(50));
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...");
        await mongoose.connect('mongodb://127.0.0.1:27017/crm');
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        const activeCouriers = await CourierAggregator.find({
            status: "active",
            onTheLine: true
        });

        console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${activeCouriers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞ –ª–∏–Ω–∏–∏`);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–æ–≤ –° –∑–∞–∫–∞–∑–∞–º–∏
        const couriersWithOrders = activeCouriers.filter(courier => {
            const hasOrders = courier.orders && courier.orders.length > 0;
            console.log(`   üë§ ${courier.fullName}: ${hasOrders ? `${courier.orders.length} –∑–∞–∫–∞–∑–æ–≤` : '–ë–ï–ó –ó–ê–ö–ê–ó–û–í'}`);
            return hasOrders;
        });

        console.log(`üì¶ –ö—É—Ä—å–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏: ${couriersWithOrders.length}`);

        if (couriersWithOrders.length === 0) {
            console.log("‚ùå –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏");
            return;
        }

        console.log("=".repeat(50));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞–º —Å –∑–∞–∫–∞–∑–∞–º–∏ –æ –∏—Ö –ø–µ—Ä–≤–æ–º –∑–∞–∫–∞–∑–µ
        for (const courier of couriersWithOrders) {
            await sendNotificationAboutFirstOrder(courier);
        }

        console.log("=".repeat(50));
        console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    } finally {
        await mongoose.disconnect();
        console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ");
    }
}

/**
 * üì® –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ü–ï–†–í–û–ú –ó–ê–ö–ê–ó–ï
 */
async function sendNotificationAboutFirstOrder(courier) {
    try {
        console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${courier.fullName} (${courier.orders.length} –∑–∞–∫–∞–∑–æ–≤)`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–æ–≤
        if (!courier.orders || courier.orders.length === 0) {
            console.log(`   ‚ö†Ô∏è –£ –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName} –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤`);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ (–æ–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        const firstOrder = courier.orders[0];
        
        console.log(`   üìç –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: ${firstOrder.clientAddress || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   üìû –ö–ª–∏–µ–Ω—Ç: ${firstOrder.clientTitle || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'} (${firstOrder.clientPhone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'})`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é pushNotification
        await pushNotification(
            "newOrder",
            `–í–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: ${firstOrder.clientAddress || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`,
            [courier.notificationPushToken || courier.notificationToken],
            "newOrder",
            firstOrder
        );

        console.log(`   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${courier.fullName}`);

    } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${courier.fullName}:`, error.message);
    }
}

/**
 * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–£–†–¨–ï–†–û–í
 */
async function showCourierStats() {
    try {
        const allCouriers = await CourierAggregator.find({});
        const activeCouriers = allCouriers.filter(c => c.status === "active");
        const onLineCouriers = activeCouriers.filter(c => c.onTheLine);
        const couriersWithOrders = onLineCouriers.filter(c => c.orders && c.orders.length > 0);
        const emptyCouriers = onLineCouriers.filter(c => !c.orders || c.orders.length === 0);

        console.log("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–£–†–¨–ï–†–û–í:");
        console.log(`   üë• –í—Å–µ–≥–æ –∫—É—Ä—å–µ—Ä–æ–≤: ${allCouriers.length}`);
        console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeCouriers.length}`);
        console.log(`   üü¢ –ù–∞ –ª–∏–Ω–∏–∏: ${onLineCouriers.length}`);
        console.log(`   üì¶ –° –∑–∞–∫–∞–∑–∞–º–∏: ${couriersWithOrders.length}`);
        console.log(`   üÜì –ë–µ–∑ –∑–∞–∫–∞–∑–æ–≤: ${emptyCouriers.length}`);

        if (couriersWithOrders.length > 0) {
            console.log("\nüì¶ –ö–£–†–¨–ï–†–´ –° –ó–ê–ö–ê–ó–ê–ú–ò:");
            couriersWithOrders.forEach(courier => {
                console.log(`   ‚Ä¢ ${courier.fullName}: ${courier.orders.length} –∑–∞–∫–∞–∑–æ–≤ (${courier.notificationPushToken || courier.notificationToken ? 'üì±' : '‚ùå'})`);
            });
        }

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
console.log("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–õ–Ø –ö–£–†–¨–ï–†–û–í –° –ó–ê–ö–ê–ó–ê–ú–ò");
console.log("üìÖ –í—Ä–µ–º—è:", new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' }));

findCouriersWithOrders(); 