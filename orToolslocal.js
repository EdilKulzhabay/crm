import CourierAggregator from "./Models/CourierAggregator.js"
import Order from "./Models/Order.js"
import Client from "./Models/Client.js"
import { spawn } from "child_process";
import path from "path";
import { fileURLToPath } from "url";
import CourierRestrictions from "./Models/CourierRestrictions.js";
import AquaMarket from "./Models/AquaMarket.js";
import { pushNotification } from "./pushNotification.js";
import { getDateAlmaty } from "./utils/dateUtils.js";
import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();

// –í—ã—á–∏—Å–ª—è–µ–º __dirname –≤ ES –º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –≤–Ω—É—Ç—Ä–∏ venv
const pythonPath = process.platform === "win32"
  ? path.join(__dirname, "venv", "Scripts", "python.exe")
  : path.join(__dirname, "venv", "bin", "python");

export function runPythonVRP(couriers, orders, courier_restrictions) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const python = spawn(pythonPath, ["./orTools/vrp_solver_optimized.py"]);
        // const python = spawn(pythonPath, ["./orTools/vrp_solver2.py"]);

        const input = {
            common_depot: {
                id: "depot",
                lat: 43.16857,
                lon: 76.89642,
            },
            couriers,
            orders,
            courier_restrictions,
        };

        let output = "";
        let error = "";

        python.stdout.on("data", (data) => {
            output += data.toString();
        });

        python.stderr.on("data", (data) => {
            error += data.toString();
        });

        python.on("close", (code) => {
            // –í—ã–≤–æ–¥–∏–º stderr –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (error.trim()) {
                console.log("Python stderr:", error);
            }
            
            if (code === 0) {
                try {
                    const parsed = JSON.parse(output);
                    resolve(parsed);
                } catch (e) {
                    reject("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞ Python: " + e.message + "\n–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + output);
                }
                // resolve(output);
            } else {
                reject(`Python script exited with code ${code}\nSTDERR:\n${error}\nSTDOUT:\n${output}`);
            }
        });

        python.stdin.write(JSON.stringify(input));
        python.stdin.end();
    });
}

export function runPythonVisualize(couriers, orders, routes) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        // const python = spawn(pythonPath, ["./orTools/visualize_routes2.py"]);
        const python = spawn(pythonPath, ["./orTools/visualize_routes_optimized.py"]);

        const input = {
            common_depot: {
                id: "depot",
                lat: 43.16857,
                lon: 76.89642,
            },
            couriers,
            orders,
            routes,
        };

        let output = "";
        let error = "";

        python.stdout.on("data", (data) => {
            output += data.toString();
        });

        python.stderr.on("data", (data) => {
            error += data.toString();
        });

        python.on("close", (code) => {
            if (code === 0) {
                let result;
                try {
                    result = JSON.parse(output);
                } catch (e) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON
                    result = {
                        success: true,
                        message: output.trim()
                    };
                }
                resolve(result);
            } else {
                reject(`Python script exited with code ${code}\n${error}`);
            }
        });

        python.stdin.write(JSON.stringify(input));
        python.stdin.end();
    });
}



export default async function orTools() {

    // –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:
    const couriers = [
        {
            id: 'courier_1',
            lat: 43.282268, lon: 76.921119,
            capacity_12: 0, // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫—É—Ä—å–µ—Ä
            capacity_19: 30, // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫—É—Ä—å–µ—Ä
            capacity: 40,
            order: null,
            completeFirstOrder: true
        },
        {
            id: 'courier_2', 
            lat: 43.24,
            lon: 76.91,
            capacity_12: 10, // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫—É—Ä—å–µ—Ä
            capacity_19: 0, // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫—É—Ä—å–µ—Ä
            capacity: 40,
            order: {
                orderId: "order_14",
                status: "onTheWay",
                lat: 43.234567, lon: 76.912345
            },
            completeFirstOrder: false
        },
        {
            id: 'courier_3',
            lat: 43.168277314921774,
            lon: 76.89654142009347,
            capacity_12: 0, // –ü—É—Å—Ç–æ–π –∫—É—Ä—å–µ—Ä
            capacity_19: 0, // –ü—É—Å—Ç–æ–π –∫—É—Ä—å–µ—Ä
            capacity: 50,
            order: null,
            completeFirstOrder: false
        },
        {
            id: 'courier_4',
            lat: 43.16,
            lon: 76.87,
            capacity_12: 6, // –ü—É—Å—Ç–æ–π –∫—É—Ä—å–µ—Ä
            capacity_19: 10, // –ü—É—Å—Ç–æ–π –∫—É—Ä—å–µ—Ä
            capacity: 16,
            order: {
                orderId: "order_11",
                status: "onTheWay",
                lat: 43.194514, lon: 76.896529
            },
            completeFirstOrder: false
        },
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        {
            id: 'courier_5',
            lat: 43.168277314921774,
            lon: 76.89654142009347,
            capacity_12: 0, // –ü—É—Å—Ç–æ–π –∫—É—Ä—å–µ—Ä
            capacity_19: 0, // –ü—É—Å—Ç–æ–π –∫—É—Ä—å–µ—Ä
            capacity: 50,
            order: null,
            completeFirstOrder: false
        },
        {
            id: 'courier_6',
            lat: 43.168277314921774,
            lon: 76.89654142009347,
            capacity_12: 0, // –ü—É—Å—Ç–æ–π –∫—É—Ä—å–µ—Ä
            capacity_19: 0, // –ü—É—Å—Ç–æ–π –∫—É—Ä—å–µ—Ä
            capacity: 40,
            order: null,
            completeFirstOrder: false
        }
    ]
  
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "awaitingOrder" –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const allOrders = [
        { id: 'order_1', lat: 43.292268, lon: 76.931119, bottles_12: 5, bottles_19: 0, status: "delivered" },
        { id: 'order_2', lat: 43.261362, lon: 76.929122, bottles_12: 3, bottles_19: 0, status: "awaitingOrder" },
        { id: 'order_3', lat: 43.151319, lon: 76.901267, bottles_12: 0, bottles_19: 3, status: "awaitingOrder" },
        { id: 'order_4', lat: 43.228644, lon: 76.866358, bottles_12: 2, bottles_19: 3, status: "awaitingOrder" },
        { id: 'order_5', lat: 43.187654, lon: 76.898765, bottles_12: 0, bottles_19: 2, status: "awaitingOrder" },
        { id: 'order_6', lat: 43.254082, lon: 76.918261, bottles_12: 0, bottles_19: 5, status: "awaitingOrder" },
        { id: 'order_7', lat: 43.198765, lon: 76.923456, bottles_12: 0, bottles_19: 4, status: "awaitingOrder" },
        { id: 'order_8', lat: 43.237369, lon: 76.938627, bottles_12: 0, bottles_19: 6, status: "awaitingOrder" },
        { id: 'order_9', lat: 43.252214, lon: 76.90054, bottles_12: 0, bottles_19: 2, status: "awaitingOrder" },
        { id: 'order_10', lat: 43.187654, lon: 76.912345, bottles_12: 0, bottles_19: 2, status: "awaitingOrder" },
        { id: 'order_11', lat: 43.194514, lon: 76.896529, bottles_12: 4, bottles_19: 0, status: "onTheWay" },
        { id: 'order_12', lat: 43.168765, lon: 76.873977, bottles_12: 0, bottles_19: 2, status: "awaitingOrder" },
        { id: 'order_13', lat: 43.175432, lon: 76.923456, bottles_12: 0, bottles_19: 4, status: "awaitingOrder" },
        { id: 'order_14', lat: 43.234567, lon: 76.912345, bottles_12: 4, bottles_19: 0, status: "onTheWay" },
        { id: 'order_15', lat: 43.212045, lon: 76.872848, bottles_12: 0, bottles_19: 15, status: "awaitingOrder" },
        { id: 'order_16', lat: 43.223456, lon: 76.934567, bottles_12: 0, bottles_19: 10, status: "awaitingOrder" },
        { id: 'order_17', lat: 43.264191, lon: 76.932518, bottles_12: 0, bottles_19: 20, status: "onTheWay" },
        { id: 'order_18', lat: 43.245678, lon: 76.887654, bottles_12: 0, bottles_19: 3, status: "awaitingOrder" },
        { id: 'order_19', lat: 43.212345, lon: 76.945678, bottles_12: 0, bottles_19: 4, status: "awaitingOrder" },
        { id: 'order_20', lat: 43.242453, lon: 76.9409, bottles_12: 0, bottles_19: 2, status: "awaitingOrder" },
        { id: 'order_21', lat: 43.234567, lon: 76.923456, bottles_12: 0, bottles_19: 2, status: "awaitingOrder" },
        { id: 'order_22', lat: 43.198765, lon: 76.934567, bottles_12: 10, bottles_19: 0, status: "awaitingOrder" }
    ]
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ
    const activeOrders = allOrders.filter(order => order.status === "onTheWay");
    const newOrders = allOrders.filter(order => order.status === "awaitingOrder");
    
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã): ${activeOrders.length}`);
    console.log(`üìä –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${newOrders.length}`);
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –≤ Python —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–æ–≤ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–æ–ª–µ order –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫—É—Ä—å–µ—Ä–∞
    const orders = newOrders;
    
    const courier_restrictions = {}

    console.log("–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ orTools.js");
    
    console.log("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—å–µ—Ä–æ–≤ = ", couriers.length)
    console.log("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ = ", orders.length)
    console.log("–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–∫–∞–∑—ã = ", courier_restrictions)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (couriers.length === 0) {
        console.log("‚ùå –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏");
        return;
    }
    
    if (orders.length === 0) {
        console.log("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
        return;
    }
    
    const result = await runPythonVRP(couriers, orders, courier_restrictions);
    console.log("–ì–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:", result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ —Ä–µ—à–µ–Ω–∏–µ
    if (!result || result.length === 0) {
        console.log("‚ùå Python —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π");
        console.log("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã:");
        console.log(`   - –ö—É—Ä—å–µ—Ä–æ–≤: ${couriers.length}`);
        console.log(`   - –ó–∞–∫–∞–∑–æ–≤: ${orders.length}`);
        console.log(`   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: ${Object.keys(courier_restrictions).length}`);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤
        const totalCapacity = couriers.reduce((sum, courier) => sum + courier.capacity, 0);
        const totalOrders = orders.reduce((sum, order) => sum + order.bottles_12 + order.bottles_19, 0);
        
        console.log(`   - –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤: ${totalCapacity} –±—É—Ç—ã–ª–æ–∫`);
        console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤ –∑–∞–∫–∞–∑–∞—Ö: ${totalOrders} –±—É—Ç—ã–ª–æ–∫`);
        
        if (totalCapacity < totalOrders) {
            console.log("   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤!");
        }
        
        console.log("   üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫—É—Ä—å–µ—Ä–∞–º:");
        couriers.forEach(courier => {
            console.log(`     - ${courier.id}: –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å=${courier.capacity}, 12–ª=${courier.capacity_12}, 19–ª=${courier.capacity_19}, –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑=${courier.order ? courier.order.orderId : '–Ω–µ—Ç'}`);
        });
        
        console.log("   üìã –î–µ—Ç–∞–ª–∏ –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º:");
        Object.entries(courier_restrictions).forEach(([orderId, restrictions]) => {
            console.log(`     - –ó–∞–∫–∞–∑ ${orderId}: –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ ${restrictions.join(', ')}`);
        });
        
        console.log("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤");
        return;
    }

    for (const route of result) {
        const courier = couriers.find(c => c.id === route.courier_id)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫—É—Ä—å–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        if (!courier.completeFirstOrder && courier.order === null) {
            route.orders.reverse()
        }
    }

    try {
        const visualizeResult = await runPythonVisualize(couriers, orders, result);
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", visualizeResult);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        console.log("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏");
        return;
    }


    for (const route of result) {
        const courier = couriers.find(c => c.id === route.courier_id)
        const hasActiveOrder = courier.order && courier.order.status === "onTheWay"
        const isEmptyCourier = courier.capacity_12 === 0 && courier.capacity_19 === 0
        
        console.log(`‚úÖ –ö—É—Ä—å–µ—Ä ${route.courier_id} –ø–æ–ª—É—á–∏–ª ${route.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
        console.log(`   –¢–∏–ø –∫—É—Ä—å–µ—Ä–∞: ${route.courier_type || (isEmptyCourier ? '–ü–£–°–¢–û–ô' : '–ó–ê–ì–†–£–ñ–ï–ù–ù–´–ô')}`);
        console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è –±—É—Ç—ã–ª–æ–∫: 12–ª=${route.required_bottles.bottles_12}, 19–ª=${route.required_bottles.bottles_19}, –≤—Å–µ–≥–æ=${route.required_bottles.total}`);
        console.log(`   –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å: 12–ª=${route.courier_should_take.bottles_12}, 19–ª=${route.courier_should_take.bottles_19}, –≤—Å–µ–≥–æ=${route.courier_should_take.total}`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${route.capacity_utilization.percent}%`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: ${hasActiveOrder ? courier.order.orderId : '–Ω–µ—Ç'}`);
        console.log(`   –ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: ${courier.completeFirstOrder ? '–¥–∞' : '–Ω–µ—Ç'}`);
        
        if (hasActiveOrder) {
            const activeOrderIndex = route.orders.indexOf(courier.order.orderId)
            if (activeOrderIndex === 0) {
                console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º –≤ –º–∞—Ä—à—Ä—É—Ç–µ`);
            } else if (activeOrderIndex > 0) {
                console.log(`   ‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∏–¥–µ—Ç ${activeOrderIndex + 1}-–º –≤ –º–∞—Ä—à—Ä—É—Ç–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º)`);
            } else {
                console.log(`   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ`);
            }
        }
    }
    console.log("‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
}

orTools();

async function ensureMongoConnection() {
    if (mongoose.connection.readyState === 0) {
        const uri = "mongodb://localhost:27017/crm";
        await mongoose.connect(uri, {
            dbName: "crm",
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log("‚úÖ MongoDB connected (orTools.js)");
    }
}
