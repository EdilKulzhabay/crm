import CourierAggregator from "./Models/CourierAggregator.js"
import Order from "./Models/Order.js"
import Client from "./Models/Client.js"
import { spawn } from "child_process";
import path from "path";
import { fileURLToPath } from "url";
import CourierRestrictions from "./Models/CourierRestrictions.js";
import AquaMarket from "./Models/AquaMarket.js";
import { pushNotification } from "./pushNotification.js";
import { getDateAlmaty } from "./utils/dateUtils.js";
import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();

// –í—ã—á–∏—Å–ª—è–µ–º __dirname –≤ ES –º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –≤–Ω—É—Ç—Ä–∏ venv
const pythonPath = process.platform === "win32"
  ? path.join(__dirname, "venv", "Scripts", "python.exe")
  : path.join(__dirname, "venv", "bin", "python");

export function runPythonVRP(couriers, orders, courier_restrictions) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        // const python = spawn(pythonPath, ["./orTools/vrp_solver_optimized.py"]);
        // const python = spawn(pythonPath, ["./orTools/vrp_solver_with_time_windows_modified.py"]);
        // const python = spawn(pythonPath, ["./orTools/vrp_solver2.py"]);
        // const python = spawn(pythonPath, ["./orTools/vrp_solver_with_time_windows.py"]);
        // const python = spawn(pythonPath, ["./orTools/test.py"]);
        const python = spawn(pythonPath, ["./orTools/vrp_solver_with_time_windows.py"]);
        const input = {
            common_depot: {
                id: "depot",
                lat: 43.16857,
                lon: 76.89642,
            },
            couriers,
            orders,
            courier_restrictions,
        };

        let output = "";
        let error = "";

        python.stdout.on("data", (data) => {
            output += data.toString();
        });

        python.stderr.on("data", (data) => {
            error += data.toString();
        });

        python.on("close", (code) => {
            // –í—ã–≤–æ–¥–∏–º stderr –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (error.trim()) {
                console.log("Python stderr:", error);
            }
            
            if (code === 0) {
                try {
                    const parsed = JSON.parse(output);
                    resolve(parsed);
                } catch (e) {
                    reject("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞ Python: " + e.message + "\n–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + output);
                }
                // resolve(output);
            } else {
                reject(`Python script exited with code ${code}\nSTDERR:\n${error}\nSTDOUT:\n${output}`);
            }
        });

        python.stdin.write(JSON.stringify(input));
        python.stdin.end();
    });
}

export function runPythonVisualize(couriers, orders, routes) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        // const python = spawn(pythonPath, ["./orTools/visualize_routes2.py"]);
        // const python = spawn(pythonPath, ["./orTools/visualize_routes_optimized.py"]);
        const python = spawn(pythonPath, ["./orTools/testViz.py"]);

        const input = {
            common_depot: {
                id: "depot",
                lat: 43.16857,
                lon: 76.89642,
            },
            couriers,
            orders,
            routes,
        };

        let output = "";
        let error = "";

        python.stdout.on("data", (data) => {
            output += data.toString();
        });

        python.stderr.on("data", (data) => {
            error += data.toString();
        });

        python.on("close", (code) => {
            if (code === 0) {
                let result;
                try {
                    result = JSON.parse(output);
                } catch (e) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON
                    result = {
                        success: true,
                        message: output.trim()
                    };
                }
                resolve(result);
            } else {
                reject(`Python script exited with code ${code}\n${error}`);
            }
        });

        python.stdin.write(JSON.stringify(input));
        python.stdin.end();
    });
}

const zeroing = async () => {
    const todayString = getDateAlmaty();

    // const orders = await Order.find({
    //     "date.d": todayString,
    //     status: "delivered",
    //     forAggregator: true,
    //     $or: [
    //         { "address.point": { $exists: false } },
    //         { "address.point.lat": { $eq: null } },
    //         { "address.point.lon": { $eq: null } }
    //     ]
    // })

    // for (const order of orders) {
    //     const client = await Client.findById(order.client)
    //     const clientAddresses = client.addresses;

    //     // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID 2GIS –ø–æ –∞–¥—Ä–µ—Å—É
    //     const fetchAddressId = async (item) => {
    //         try {
    //             const response = await axios.get('https://catalog.api.2gis.com/3.0/items/geocode', {
    //                 params: {
    //                     fields: "items.point",
    //                     key: "f5af220d-c60a-4cf6-a350-4a953c324a3d",
    //                     q: `–ê–ª–º–∞—Ç—ã, ${item.street}`,
    //                 },
    //             });
    //             console.log("response.data.result", response.data.result);
                
    //             return response.data.result.items[0] || null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∏–ª–∏ null
    //         } catch (error) {
    //             console.log(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å: ${item.street}`);
    //             return null;
    //         }
    //     };

    //     // –ü–æ–ª—É—á–∞–µ–º IDs –¥–ª—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
    //     const res2Gis = await Promise.allSettled(clientAddresses.map(fetchAddressId));
    //     res2Gis.forEach((result, index) => {
    //         console.log("result: ", result);
            
    //         if (result.status === "fulfilled") {
    //             clientAddresses[index].id2Gis = result?.value?.id
    //             clientAddresses[index].point = result?.value?.point
    //         } else {
    //             clientAddresses[index].id2Gis = null
    //             clientAddresses[index].point = {lat: null, lon: null}
    //         }
    //     });

    //     await Client.findByIdAndUpdate(client._id, { $set: { addresses: clientAddresses } })

    //     const orderAddress = clientAddresses.find(address => order.address.actual.includes(address.street))
    //     if (orderAddress) {
    //         await Order.findByIdAndUpdate(order._id, { $set: { address: orderAddress } })
    //     }
    // }

    // await Order.updateMany(
    //     { 
    //         "date.d": todayString,
    //         franchisee: { 
    //             $in: [
    //                 new mongoose.Types.ObjectId('66f15c557a27c92d447a16a0'), 
    //                 new mongoose.Types.ObjectId('66fc0cc6953c2dbbc86c2132'), 
    //                 new mongoose.Types.ObjectId('66fc0d01953c2dbbc86c2135'), 
    //                 new mongoose.Types.ObjectId('66fc0d3e953c2dbbc86c2138'),
    //                 new mongoose.Types.ObjectId('67010493e6648af4cb0213b7')
    //             ]
    //         },
    //         status: { $nin: ["onTheWay", "delivered", "cancelled"] }
    //     },
    //     { $set: { forAggregator: true } }
    // )

    const resetResult = await Order.updateMany(
        { 
            "date.d": todayString,
            forAggregator: true,
            status: "awaitingOrder"
        },
        { 
            $set: { courierAggregator: null }
        }
    );
    
    console.log(`üìä –°–±—Ä–æ—à–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${resetResult.modifiedCount} –∑–∞–∫–∞–∑–æ–≤`);

    const couriersToUpdate = await CourierAggregator.find({ 
        onTheLine: true, 
        status: "active" 
    });
    
    for (const courier of couriersToUpdate) {

        const activeOrder = courier.order && courier.order.orderId ? courier.order : null

        const completeFirstOrder = courier.capacity12 > 0 || courier.capacity19 > 0 ? true : false
        
        // –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
        let ordersToSet = [];
        if (activeOrder) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –º–∞—Å—Å–∏–≤–µ orders
            const existingOrder = courier.orders.find(order => 
                order.orderId.toString() === activeOrder.orderId.toString()
            );
            
            if (!existingOrder) {
                ordersToSet = [activeOrder];
                console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ ${activeOrder.orderId} –¥–æ–±–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä—É ${courier.fullName}`);
            } else {
                ordersToSet = [existingOrder];
                console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ ${activeOrder.orderId} —É–∂–µ –µ—Å—Ç—å —É –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName}`);
            }
        }
        
        await CourierAggregator.updateOne(
            { _id: courier._id },
            { $set: { orders: ordersToSet, completeFirstOrder} }
        );
    }
    
    console.log("‚úÖ –°—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã (–Ω–∞—á–∞—Ç—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)\n");
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
const sentNotifications = new Set();
// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const NOTIFICATION_COOLDOWN = 60000; // 1 –º–∏–Ω—É—Ç–∞
const lastNotificationTime = new Map(); // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞

const sendOrderPushNotification = async () => {
    const couriers = await CourierAggregator.find({status: "active", onTheLine: true})
    let needOrTools = false
    
    for (const courier of couriers) {
        if (courier.order && courier.order.orderId) {
            continue;
        }

        const orders = courier.orders
        const order = orders[0]
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!order || !order.products) {
            console.log(`‚ö†Ô∏è  –ö—É—Ä—å–µ—Ä ${courier.fullName} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
            continue;
        }
        
        // –ü–†–û–í–ï–†–ö–ê –ß–ê–°–¢–û–¢–´: –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
        const lastNotification = lastNotificationTime.get(courier._id.toString());
        const now = Date.now();
        
        if (lastNotification && (now - lastNotification) < NOTIFICATION_COOLDOWN) {
            const remainingTime = Math.ceil((NOTIFICATION_COOLDOWN - (now - lastNotification)) / 1000);
            console.log(`‚è≥ –ö—É—Ä—å–µ—Ä ${courier.fullName} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ, –∂–¥–µ–º –µ—â–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`);
            continue;
        }
        
        // –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´: –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationKey = `${courier._id}_${order.orderId}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if (sentNotifications.has(notificationKey)) {
            console.log(`‚ö†Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderId} –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const existingRestriction = await CourierRestrictions.findOne({
            orderId: order.orderId,
            courierId: courier._id
        });
        
        if (existingRestriction) {
            console.log(`‚ö†Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderId} –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
        }
        
        let messageBody = "–ó–∞–∫–∞–∑ –Ω–∞ ";
        if (order.products.b12 > 0) {
            messageBody += `${order.products.b12} –±—É—Ç—ã–ª–æ–∫ 12.5–ª `
        }
        if (order.products.b19 > 0) {
            messageBody += `${order.products.b19} –±—É—Ç—ã–ª–æ–∫ 19.8–ª`
        }
        
        try {
            await pushNotification(
                "newOrder",
                messageBody,
                [courier.notificationPushToken],
                "newOrder",
                order
            );
            
            // –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            sentNotifications.add(notificationKey);
            lastNotificationTime.set(courier._id.toString(), now);
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—É—Ä—å–µ—Ä—É ${courier.fullName} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderId}`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É ${courier.fullName}:`, error);
            continue;
        }

        // –ñ–¥–µ–º 40 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
        await new Promise(resolve => setTimeout(resolve, 40000));
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∑–∞–∫–∞–∑—É ${order.orderId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);

        const checkOrder = await Order.findById(order.orderId)
        if (checkOrder.status !== "onTheWay") {
            needOrTools = true
            await CourierRestrictions.create({
                orderId: order.orderId,
                courierId: courier._id
            })
            await Order.findByIdAndUpdate(order.orderId, { $set: { courierAggregator: null } })
            await CourierAggregator.updateOne(
                { _id: courier._id },
                { $set: { order: null, orders: [] } },
            );
        }
    }

    // –£–ë–ò–†–ê–ï–ú –†–ï–ö–£–†–°–ò–í–ù–´–ô –í–´–ó–û–í: –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥
    if (needOrTools) {
        console.log("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ orTools –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞–º–∏");
        return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ orTools()
    }
    
    return false; // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤
const cleanupDuplicateOrders = async () => {
    console.log("üßπ –û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ó–ê–ö–ê–ó–û–í");
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏
        const couriers = await CourierAggregator.find({
            onTheLine: true,
            status: "active",
            orders: { $exists: true, $not: { $size: 0 } }
        });
        
        let totalDuplicatesRemoved = 0;
        
        for (const courier of couriers) {
            const orderIds = courier.orders.map(order => order.orderId.toString());
            const uniqueOrderIds = [...new Set(orderIds)];
            
            if (orderIds.length !== uniqueOrderIds.length) {
                console.log(`‚ö†Ô∏è  –ö—É—Ä—å–µ—Ä ${courier.fullName} –∏–º–µ–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤:`);
                console.log(`   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orderIds.length}`);
                console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueOrderIds.length}`);
                console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${orderIds.length - uniqueOrderIds.length}`);
                
                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
                const uniqueOrders = [];
                const seenOrderIds = new Set();
                
                for (const order of courier.orders) {
                    const orderIdStr = order.orderId.toString();
                    if (!seenOrderIds.has(orderIdStr)) {
                        uniqueOrders.push(order);
                        seenOrderIds.add(orderIdStr);
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                await CourierAggregator.updateOne(
                    { _id: courier._id },
                    { $set: { orders: uniqueOrders } }
                );
                
                const duplicatesRemoved = orderIds.length - uniqueOrderIds.length;
                totalDuplicatesRemoved += duplicatesRemoved;
                
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${duplicatesRemoved} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —É –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—É—Ä—å–µ—Ä–∞–º
        const allOrderIds = await CourierAggregator.distinct("orders.orderId");
        
        for (const orderId of allOrderIds) {
            const couriersWithOrder = await CourierAggregator.find({
                "orders.orderId": orderId
            });
            
            if (couriersWithOrder.length > 1) {
                console.log(`‚ö†Ô∏è  –ö–û–ù–§–õ–ò–ö–¢: –ó–∞–∫–∞–∑ ${orderId} –Ω–∞–π–¥–µ–Ω —É ${couriersWithOrder.length} –∫—É—Ä—å–µ—Ä–æ–≤:`);
                couriersWithOrder.forEach(courier => {
                    console.log(`   - ${courier.fullName}`);
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–º—É –∫—É—Ä—å–µ—Ä—É –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
                const order = await Order.findById(orderId);
                if (order && order.courierAggregator) {
                    const correctCourier = couriersWithOrder.find(c => 
                        c._id.toString() === order.courierAggregator.toString()
                    );
                    
                    if (correctCourier) {
                        console.log(`‚úÖ –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –∫—É—Ä—å–µ—Ä–∞ ${correctCourier.fullName}`);
                        
                        // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ —É –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
                        await CourierAggregator.updateMany(
                            { 
                                _id: { $ne: correctCourier._id },
                                "orders.orderId": orderId 
                            },
                            { 
                                $pull: { 
                                    orders: { orderId: orderId } 
                                } 
                            }
                        );
                        
                        totalDuplicatesRemoved += couriersWithOrder.length - 1;
                        console.log(`üîÑ –ó–∞–∫–∞–∑ ${orderId} —É–¥–∞–ª–µ–Ω —É ${couriersWithOrder.length - 1} –∫—É—Ä—å–µ—Ä–æ–≤`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è  –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –≤ –±–∞–∑–µ, —É–¥–∞–ª—è–µ–º —É –≤—Å–µ—Ö`);
                    
                    await CourierAggregator.updateMany(
                        { "orders.orderId": orderId },
                        { $pull: { orders: { orderId: orderId } } }
                    );
                    
                    totalDuplicatesRemoved += couriersWithOrder.length;
                }
            }
        }
        
        console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicatesRemoved}`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:", error);
    }
};

export default async function orTools() {

    const couriers =  [
        {
          id: '–¢–∞—Å“õ—ã–Ω ”ò–±—ñ–∫–µ–Ω',
          lat: 43.17910214669232,
          lon: 76.89971222436965,
          capacity_12: 0,
          capacity_19: 20,
          capacity: 40,
          order: null,
          completeFirstOrder: true
        },
        {
          id: '–í–∞—Å–∏–ª–∏–π –Ø–∫–æ–≤–ª–µ–≤',
          lat: 43.2306662,
          lon: 76.869874,
          capacity_12: 0,
          capacity_19: 10,
          capacity: 16,
          order: {
            orderId: '687dc45965062f6e5fef061d',
            status: 'onTheWay',
            lat: 43.236499,
            lon: 76.825367,
            bottles_12: 0,
            bottles_19: 2,
            orderName: '–§–∏–∑ 36 74 –ê–∫—Å–∞–π-3–∞'
          },
          completeFirstOrder: true
        },
        {
          id: '–ê–π–¥—ã–Ω–±–µ–∫ –°–∞–Ω–¥—ã–±–∞–µ–≤',
          lat: 43.2377779,
          lon: 76.936837,
          capacity_12: 0,
          capacity_19: 45,
          capacity: 50,
          order: null,
          completeFirstOrder: true
        }
  ]
  const allOrders =  [
      {
      id: ('687cbc3465062f6e5feee5a5'),
      lat: 43.259992,
      lon: 76.814559,
      bottles_12: 0,
      bottles_19: 4,
      status: 'awaitingOrder',
      orderName: '–∫–≤–∞—Ä—Ç–∏—Ä–∞',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('68807b6117663dabc50c86e7'),
      lat: 43.138775,
      lon: 76.870492,
      bottles_12: 0,
      bottles_19: 3,
      status: 'awaitingOrder',
      orderName: '–§–∏–∑ 300 –°–ª–∏–≤–æ–≤–∞—è',
      isUrgent: false,
      'date.time': '17:00 - 22:00'
      },
      {
      id: ('68807c6a32bc04ceb95473bd'),
      lat: 43.267576,
      lon: 76.932526,
      bottles_12: 0,
      bottles_19: 14,
      status: 'awaitingOrder',
      orderName: '–ù–æ–≤–∞ –∫–æ–ª–µ–∫—à–Ω',
      isUrgent: false,
      'date.time': '09:00 - 17:00'
      },
      {
      id: ('68808dc1180fe474dced8cee'),
      lat: 43.219227,
      lon: 76.843653,
      bottles_12: 0,
      bottles_19: 2,
      status: 'awaitingOrder',
      orderName: '–î–µ—Ç—Å–∫–∏–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä Ziyatker-bilim Almaty',
      isUrgent: false,
      'date.time': '13:30 - 15:00'
      },
      {
      id: ('6880e80eea36a0e3aabfa856'),
      lat: 43.292615,
      lon: 76.932708,
      bottles_12: 0,
      bottles_19: 8,
      status: 'awaitingOrder',
      orderName: '–¢–û–û "–≠–ª–µ–∫—Ç—Ä–æ–∫–æ–º–ø–ª–µ–∫—Å Lighting"',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6880e839ea36a0e3aabfa88f'),
      lat: 43.238453,
      lon: 76.845088,
      bottles_12: 22,
      bottles_19: 0,
      status: 'awaitingOrder',
      orderName: '–¢–û–û Apple City Corps',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6880e87dea36a0e3aabfa8bd'),
      lat: 43.232278,
      lon: 76.94846,
      bottles_12: 0,
      bottles_19: 2,
      status: 'awaitingOrder',
      orderName: '–ù–æ–º–∞–¥ –õ–∞–π—Ñ (Nomad Life)',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('688103cfea36a0e3aabfb58a'),
      lat: 43.259292,
      lon: 76.893765,
      bottles_12: 0,
      bottles_19: 12,
      status: 'awaitingOrder',
      orderName: '–§–∏–ª–∏–∞–ª "Tealand" –¢–û–û "RG Brands KZ"',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('68813b3aea36a0e3aabfc7ba'),
      lat: 43.229727,
      lon: 76.856355,
      bottles_12: 0,
      bottles_19: 3,
      status: 'awaitingOrder',
      orderName: '–§–∏–∑ 50 21 –º–∫—Ä 4',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881b5d461dd2297ac94d272'),
      lat: 43.236023,
      lon: 76.957068,
      bottles_12: 0,
      bottles_19: 2,
      status: 'awaitingOrder',
      orderName: '–§–∏–∑ 76 4 –º–∫—Ä –°–∞–º–∞–ª-1',
      isUrgent: false,
      'date.time': '14:00 - 16:00'
      },
      {
      id: ('6881b68c61dd2297ac94d681'),
      lat: 43.222419,
      lon: 76.902217,
      bottles_12: 0,
      bottles_19: 5,
      status: 'awaitingOrder',
      orderName: '–¢–æ—Ä–≥–æ–≤–æ-—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è ECOS',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881b76261dd2297ac94dc37'),
      lat: 43.213358,
      lon: 76.880248,
      bottles_12: 0,
      bottles_19: 2,
      status: 'awaitingOrder',
      orderName: '–§–∏–∑ 29 43 –¢–∞—É–≥—É–ª—å-1',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881ba1361dd2297ac94ec01'),
      lat: 43.226383,
      lon: 76.909617,
      bottles_12: 3,
      bottles_19: 0,
      status: 'awaitingOrder',
      orderName: '–ú–∞–≥–∞–∑–∏–Ω Mei Li (–ú–µ–π –õ–∏)',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881be6461dd2297ac94f8d6'),
      lat: 43.164299,
      lon: 76.879533,
      bottles_12: 0,
      bottles_19: 3,
      status: 'awaitingOrder',
      orderName: '–§–∏–∑ 23 –†–µ–¥—å–∫–æ',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881c79061dd2297ac94fae2'),
      lat: 43.232947,
      lon: 76.954032,
      bottles_12: 0,
      bottles_19: 2,
      status: 'awaitingOrder',
      orderName: '–ë—É—Ç–∏–∫ –ø–ª—è–∂–Ω–æ–π –æ–¥–µ–∂–¥—ã Luxury Beachwear',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881c8ec61dd2297ac94faf4'),
      lat: 43.212045,
      lon: 76.872848,
      bottles_12: 0,
      bottles_19: 8,
      status: 'awaitingOrder',
      orderName: '–ì–ö–ö–ü –Ø—Å–ª–∏-—Å–∞–¥ ‚Ññ55',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881c92161dd2297ac94fc6b'),
      lat: 43.234928,
      lon: 76.804648,
      bottles_12: 0,
      bottles_19: 6,
      status: 'awaitingOrder',
      orderName: '–§–∏–∑ 26 –ê–±–∏—à–µ–≤–∞ –¢–∞–Ω—ã–º',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881d53a61dd2297ac95089a'),
      lat: 43.217591,
      lon: 76.901896,
      bottles_12: 0,
      bottles_19: 6,
      status: 'awaitingOrder',
      orderName: '–ñ–∞—Ä–æ–∫–æ–≤–∞ 257',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881d56d61dd2297ac9508f8'),
      lat: 43.255626,
      lon: 76.846004,
      bottles_12: 0,
      bottles_19: 3,
      status: 'awaitingOrder',
      orderName: '–ñ–µ–∑–∫–∞–∑–≥–∞–Ω—Å–∫–∞—è 15',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881d73361dd2297ac950b10'),
      lat: 43.189195,
      lon: 76.866654,
      bottles_12: 0,
      bottles_19: 3,
      status: 'awaitingOrder',
      orderName: '–§—É–¥–ª–∏',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881d77261dd2297ac950c23'),
      lat: 43.179617,
      lon: 76.903879,
      bottles_12: 0,
      bottles_19: 2,
      status: 'awaitingOrder',
      orderName: '8-—è —É–ª–∏—Ü–∞, 1 –ú—è—Å–Ω–æ–π –ø–∞–≤–∏–ª–∏–æ–Ω',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881de8161dd2297ac95174e'),
      lat: 43.262858,
      lon: 76.820958,
      bottles_12: 0,
      bottles_19: 2,
      status: 'awaitingOrder',
      orderName: '–§–∏–∑ 24 77 –ë–∞–π—Ç–µ—Ä–µ–∫–æ–≤–∞',
      isUrgent: false,
      'date.time': ''
      },
      {
      id: ('6881df3261dd2297ac951ad7'),
      lat: 43.19165,
      lon: 76.857181,
      bottles_12: 0,
      bottles_19: 3,
      status: 'awaitingOrder',
      orderName: '–¢–û–û –¢—É—Ä–°–∞–¥',
      isUrgent: false,
      'date.time': ''
      }
  ]
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ
    const activeOrders = allOrders.filter(order => order.status === "onTheWay");
    const newOrders = allOrders.filter(order => order.status === "awaitingOrder");
    
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã): ${activeOrders.length}`);
    console.log(`üìä –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${newOrders.length}`);
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –≤ Python —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–æ–≤ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–æ–ª–µ order –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫—É—Ä—å–µ—Ä–∞
    const orders = newOrders;
    
    const courier_restrictions = {}

    console.log("–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ orTools.js");
    
    console.log("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—å–µ—Ä–æ–≤ = ", couriers.length)
    console.log("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ = ", orders.length)
    console.log("–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–∫–∞–∑—ã = ", courier_restrictions)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (couriers.length === 0) {
        console.log("‚ùå –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏");
        return;
    }
    
    if (orders.length === 0) {
        console.log("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
        return;
    }

    console.log("couriers = ", couriers);
    console.log("orders = ", orders);
    
    
    const result = await runPythonVRP(couriers, orders, courier_restrictions);
    console.log("–ì–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:", result);

    // return

    

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ —Ä–µ—à–µ–Ω–∏–µ
    if (!result || result.length === 0) {
        console.log("‚ùå Python —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π");
        console.log("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã:");
        console.log(`   - –ö—É—Ä—å–µ—Ä–æ–≤: ${couriers.length}`);
        console.log(`   - –ó–∞–∫–∞–∑–æ–≤: ${orders.length}`);
        console.log(`   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: ${Object.keys(courier_restrictions).length}`);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤
        const totalCapacity = couriers.reduce((sum, courier) => sum + courier.capacity, 0);
        const totalOrders = orders.reduce((sum, order) => sum + order.bottles_12 + order.bottles_19, 0);
        
        console.log(`   - –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤: ${totalCapacity} –±—É—Ç—ã–ª–æ–∫`);
        console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤ –∑–∞–∫–∞–∑–∞—Ö: ${totalOrders} –±—É—Ç—ã–ª–æ–∫`);
        
        if (totalCapacity < totalOrders) {
            console.log("   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤!");
        }
        
        console.log("   üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫—É—Ä—å–µ—Ä–∞–º:");
        couriers.forEach(courier => {
            console.log(`     - ${courier.id}: –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å=${courier.capacity}, 12–ª=${courier.capacity_12}, 19–ª=${courier.capacity_19}, –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑=${courier.order ? courier.order.orderId : '–Ω–µ—Ç'}`);
        });
        
        console.log("   üìã –î–µ—Ç–∞–ª–∏ –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º:");
        Object.entries(courier_restrictions).forEach(([orderId, restrictions]) => {
            console.log(`     - –ó–∞–∫–∞–∑ ${orderId}: –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ ${restrictions.join(', ')}`);
        });
        
        console.log("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤");
        return;
    }

    for (const courier of couriers) {
        const activeOrder = courier.order;
        if (activeOrder && activeOrder.orderId) {
            const alreadyIncluded = orders.find(o => o.id === activeOrder.orderId);
            if (!alreadyIncluded) {
                const fullOrder = allOrders.find(o => o.id === activeOrder.orderId);
                if (fullOrder) {
                    orders.push(fullOrder);
                }
            }
        }
    }

    try {
        const visualizeResult = await runPythonVisualize(couriers, allOrders, result);
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", visualizeResult);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        console.log("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏");
        return;
    }


    for (const route of result) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤
        if (!route.orders || !Array.isArray(route.orders)) {
            console.log(`‚ö†Ô∏è  –ö—É—Ä—å–µ—Ä ${route.courier_id}: –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤`);
            continue;
        }
        
        const courier = couriers.find(c => c.id === route.courier_id)
        const hasActiveOrder = courier.order && courier.order.status === "onTheWay"
        const isEmptyCourier = courier.capacity_12 === 0 && courier.capacity_19 === 0
        
        console.log(`‚úÖ –ö—É—Ä—å–µ—Ä ${route.courier_id} –ø–æ–ª—É—á–∏–ª ${route.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
        console.log(`   –¢–∏–ø –∫—É—Ä—å–µ—Ä–∞: ${route.courier_type || (isEmptyCourier ? '–ü–£–°–¢–û–ô' : '–ó–ê–ì–†–£–ñ–ï–ù–ù–´–ô')}`);
        console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è –±—É—Ç—ã–ª–æ–∫: 12–ª=${route.required_bottles?.bottles_12 || 0}, 19–ª=${route.required_bottles?.bottles_19 || 0}, –≤—Å–µ–≥–æ=${route.required_bottles?.total || 0}`);
        console.log(`   –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å: 12–ª=${route.courier_should_take?.bottles_12 || 0}, 19–ª=${route.courier_should_take?.bottles_19 || 0}, –≤—Å–µ–≥–æ=${route.courier_should_take?.total || 0}`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${route.capacity_utilization?.percent || 0}%`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: ${hasActiveOrder ? courier.order.orderId : '–Ω–µ—Ç'}`);
        console.log(`   –ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: ${courier.completeFirstOrder ? '–¥–∞' : '–Ω–µ—Ç'}`);
        
        if (hasActiveOrder) {
            const activeOrderIndex = route.orders.indexOf(courier.order.orderId)
            if (activeOrderIndex === 0) {
                console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º –≤ –º–∞—Ä—à—Ä—É—Ç–µ`);
            } else if (activeOrderIndex > 0) {
                console.log(`   ‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∏–¥–µ—Ç ${activeOrderIndex + 1}-–º –≤ –º–∞—Ä—à—Ä—É—Ç–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º)`);
            } else {
                console.log(`   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ`);
            }
        }
    }
    console.log("‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
}

orTools();

async function ensureMongoConnection() {
    if (mongoose.connection.readyState === 0) {
        const uri = "mongodb://localhost:27017/crm";
        await mongoose.connect(uri, {
            dbName: "crm",
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log("‚úÖ MongoDB connected (orTools.js)");
    }
}
