import mongoose from 'mongoose';
import Order from '../Models/Order.js';
import CourierAggregator from '../Models/CourierAggregator.js';
import AquaMarket from '../Models/AquaMarket.js';
import Client from '../Models/Client.js';
import { getDateAlmaty } from '../utils/dateUtils.js';
import { pushNotification } from '../pushNotification.js';

/**
 * üìè –í–´–ß–ò–°–õ–ï–ù–ò–ï –†–ê–°–°–¢–û–Ø–ù–ò–Ø –ú–ï–ñ–î–£ –î–í–£–ú–Ø –¢–û–ß–ö–ê–ú–ò –í –ú–ï–¢–†–ê–•
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
 */
function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const toRad = x => x * Math.PI / 180;
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
              Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

/**
 * üó∫Ô∏è –°–û–ó–î–ê–ù–ò–ï –ú–ê–¢–†–ò–¶–´ –†–ê–°–°–¢–û–Ø–ù–ò–ô
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
 */
function createDistanceMatrix(locations) {
    const matrix = [];
    for (let i = 0; i < locations.length; i++) {
        matrix[i] = [];
        for (let j = 0; j < locations.length; j++) {
            if (i === j) {
                matrix[i][j] = 0;
            } else {
                matrix[i][j] = calculateDistance(
                    locations[i].lat,
                    locations[i].lon,
                    locations[j].lat,
                    locations[j].lon
                );
            }
        }
    }
    return matrix;
}

/**
 * üß¨ –ì–ï–ù–ï–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ì–û–†–ò–¢–ú –î–õ–Ø TSP
 * –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞
 */
function solveTSPGenetic(distanceMatrix, populationSize = 50, generations = 100) {
    const n = distanceMatrix.length;
    if (n <= 2) return Array.from({length: n}, (_, i) => i);

    console.log(`   üß¨ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: ${n} —Ç–æ—á–µ–∫, ${populationSize} –æ—Å–æ–±–µ–π, ${generations} –ø–æ–∫–æ–ª–µ–Ω–∏–π`);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏
    function createRandomRoute() {
        const route = Array.from({length: n - 1}, (_, i) => i + 1);
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π (–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞)
        for (let i = route.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [route[i], route[j]] = [route[j], route[i]];
        }
        return [0, ...route]; // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–æ—á–∫–∏ 0
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –æ–±—â–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è)
    function calculateFitness(route) {
        let totalDistance = 0;
        for (let i = 0; i < route.length - 1; i++) {
            totalDistance += distanceMatrix[route[i]][route[i + 1]];
        }
        return 1 / (totalDistance + 1); // +1 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    }

    // –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ–ª–µ–∫—Ü–∏—è
    function tournamentSelection(population, fitnesses, tournamentSize = 3) {
        let best = Math.floor(Math.random() * population.length);
        let bestFitness = fitnesses[best];
        
        for (let i = 1; i < tournamentSize; i++) {
            const candidate = Math.floor(Math.random() * population.length);
            if (fitnesses[candidate] > bestFitness) {
                best = candidate;
                bestFitness = fitnesses[candidate];
            }
        }
        return [...population[best]];
    }

    // –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ (Order Crossover - OX)
    function orderCrossover(parent1, parent2) {
        const start = Math.floor(Math.random() * (n - 2)) + 1;
        const end = Math.floor(Math.random() * (n - start - 1)) + start + 1;
        
        const child = new Array(n);
        child[0] = 0; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç –æ—Ç parent1
        for (let i = start; i < end; i++) {
            child[i] = parent1[i];
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ parent2
        const used = new Set(child.slice(start, end));
        let childIndex = 1;
        
        for (let i = 1; i < n; i++) {
            if (childIndex === start) childIndex = end;
            if (childIndex >= n) break;
            
            if (!used.has(parent2[i])) {
                child[childIndex] = parent2[i];
                childIndex++;
            }
        }
        
        return child;
    }

    // –ú—É—Ç–∞—Ü–∏—è (swap mutation)
    function mutate(route, mutationRate = 0.02) {
        const mutated = [...route];
        for (let i = 1; i < mutated.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É
            if (Math.random() < mutationRate) {
                const j = Math.floor(Math.random() * (mutated.length - 1)) + 1;
                [mutated[i], mutated[j]] = [mutated[j], mutated[i]];
            }
        }
        return mutated;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
    let population = [];
    for (let i = 0; i < populationSize; i++) {
        population.push(createRandomRoute());
    }

    let bestRoute = null;
    let bestDistance = Infinity;

    // –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    for (let generation = 0; generation < generations; generation++) {
        // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏—Ç–Ω–µ—Å –¥–ª—è –≤—Å–µ–π –ø–æ–ø—É–ª—è—Ü–∏–∏
        const fitnesses = population.map(calculateFitness);
        
        // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –æ—Å–æ–±—å –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏
        const maxFitnessIndex = fitnesses.indexOf(Math.max(...fitnesses));
        const currentBest = population[maxFitnessIndex];
        const currentBestDistance = 1 / fitnesses[maxFitnessIndex] - 1;
        
        if (currentBestDistance < bestDistance) {
            bestDistance = currentBestDistance;
            bestRoute = [...currentBest];
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
        const newPopulation = [];
        
        // –≠–ª–∏—Ç–∏–∑–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –æ—Å–æ–±—å
        newPopulation.push([...bestRoute]);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
        while (newPopulation.length < populationSize) {
            const parent1 = tournamentSelection(population, fitnesses);
            const parent2 = tournamentSelection(population, fitnesses);
            const child = orderCrossover(parent1, parent2);
            const mutatedChild = mutate(child);
            newPopulation.push(mutatedChild);
        }
        
        population = newPopulation;
        
        if (generation % 20 === 0) {
            console.log(`      –ü–æ–∫–æ–ª–µ–Ω–∏–µ ${generation}: –ª—É—á—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${Math.round(bestDistance)}–º`);
        }
    }

    console.log(`   ‚úÖ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(bestDistance)}–º`);
    return bestRoute;
}

/**
 * üîÑ 2-OPT –õ–û–ö–ê–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
 * –£–ª—É—á—à–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç –º–µ—Ç–æ–¥–æ–º 2-opt
 */
function improve2Opt(route, distanceMatrix, maxIterations = 100) {
    let improved = true;
    let currentRoute = [...route];
    let iterations = 0;
    
    while (improved && iterations < maxIterations) {
        improved = false;
        iterations++;
        
        for (let i = 1; i < currentRoute.length - 2; i++) {
            for (let j = i + 1; j < currentRoute.length - 1; j++) {
                // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                const currentDistance = 
                    distanceMatrix[currentRoute[i-1]][currentRoute[i]] +
                    distanceMatrix[currentRoute[j]][currentRoute[j+1]];
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ 2-opt –æ–±–º–µ–Ω–∞
                const newDistance = 
                    distanceMatrix[currentRoute[i-1]][currentRoute[j]] +
                    distanceMatrix[currentRoute[i]][currentRoute[j+1]];
                
                if (newDistance < currentDistance) {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º 2-opt –æ–±–º–µ–Ω (—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç)
                    const newRoute = [
                        ...currentRoute.slice(0, i),
                        ...currentRoute.slice(i, j + 1).reverse(),
                        ...currentRoute.slice(j + 1)
                    ];
                    currentRoute = newRoute;
                    improved = true;
                }
            }
        }
    }
    
    return currentRoute;
}

/**
 * üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ú–ê–†–®–†–£–¢–ê –° TSP
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º + 2-opt –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
 */
function optimizeCourierRouteTSP(orders, courierName) {
    if (orders.length <= 1) return orders;
    if (orders.length === 2) return orders; // –î–ª—è 2 –∑–∞–∫–∞–∑–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞

    console.log(`   üöÄ TSP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è ${courierName} (${orders.length} –∑–∞–∫–∞–∑–æ–≤)`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤
    const locations = orders.map(order => {
        if (order.address && order.address.point) {
            return {
                lat: order.address.point.lat,
                lon: order.address.point.lon
            };
        } else if (order.clientPoints) {
            return {
                lat: order.clientPoints.lat,
                lon: order.clientPoints.lon
            };
        }
        return null;
    }).filter(loc => loc !== null);

    if (locations.length !== orders.length) {
        console.log(`   ‚ö†Ô∏è –ù–µ –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é`);
        return optimizeCourierRouteSimple(orders, courierName);
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    const distanceMatrix = createDistanceMatrix(locations);

    // –†–µ—à–∞–µ–º TSP –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    let optimalRoute;
    if (orders.length <= 10) {
        // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        optimalRoute = solveTSPGenetic(distanceMatrix, 100, 200);
    } else {
        // –î–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        optimalRoute = solveTSPGenetic(distanceMatrix, 50, 100);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è 2-opt –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    optimalRoute = improve2Opt(optimalRoute, distanceMatrix);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫ –∑–∞–∫–∞–∑–∞–º
    const optimizedOrders = optimalRoute.map(index => orders[index]);

    // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    let totalDistance = 0;
    for (let i = 0; i < optimalRoute.length - 1; i++) {
        totalDistance += distanceMatrix[optimalRoute[i]][optimalRoute[i + 1]];
    }

    console.log(`   ‚úÖ TSP –º–∞—Ä—à—Ä—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω. –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(totalDistance)}–º`);
    
    // –í—ã–≤–æ–¥–∏–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    optimizedOrders.forEach((order, index) => {
        const address = order.address?.actual || order.clientAddress || order.clientTitle;
        console.log(`      ${index + 1}. ${address}`);
    });

    return optimizedOrders;
}

/**
 * üèÉ‚Äç‚ôÇÔ∏è –ü–†–û–°–¢–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø (FALLBACK)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ TSP –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º
 */
function optimizeCourierRouteSimple(orders, courierName) {
    if (orders.length <= 1) return orders;

    console.log(`   üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è ${courierName} (${orders.length} –∑–∞–∫–∞–∑–æ–≤)`);

    const optimizedRoute = [];
    const remainingOrders = [...orders];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const firstOrder = remainingOrders.shift();
    optimizedRoute.push(firstOrder);
    
    let currentLocation;
    if (firstOrder.address && firstOrder.address.point) {
        currentLocation = {
            lat: firstOrder.address.point.lat,
            lon: firstOrder.address.point.lon
        };
    } else if (firstOrder.clientPoints) {
        currentLocation = {
            lat: firstOrder.clientPoints.lat,
            lon: firstOrder.clientPoints.lon
        };
    } else {
        return orders; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    }

    // –ê–ª–≥–æ—Ä–∏—Ç–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ—Å–µ–¥–∞
    while (remainingOrders.length > 0) {
        let nearestIndex = 0;
        let shortestDistance = Infinity;

        for (let i = 0; i < remainingOrders.length; i++) {
            const order = remainingOrders[i];
            let orderLat, orderLon;
            
            if (order.address && order.address.point) {
                orderLat = order.address.point.lat;
                orderLon = order.address.point.lon;
            } else if (order.clientPoints) {
                orderLat = order.clientPoints.lat;
                orderLon = order.clientPoints.lon;
            } else {
                continue;
            }

            const distance = calculateDistance(
                currentLocation.lat,
                currentLocation.lon,
                orderLat,
                orderLon
            );

            if (distance < shortestDistance) {
                shortestDistance = distance;
                nearestIndex = i;
            }
        }

        const selectedOrder = remainingOrders.splice(nearestIndex, 1)[0];
        optimizedRoute.push(selectedOrder);
        
        if (selectedOrder.address && selectedOrder.address.point) {
            currentLocation = {
                lat: selectedOrder.address.point.lat,
                lon: selectedOrder.address.point.lon
            };
        } else if (selectedOrder.clientPoints) {
            currentLocation = {
                lat: selectedOrder.clientPoints.lat,
                lon: selectedOrder.clientPoints.lon
            };
        }
    }

    return optimizedRoute;
}

/**
 * üåê –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° VROOM API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è VRP (Vehicle Routing Problem)
 */
async function optimizeWithVROOM(orders, vehicles, depot) {
    try {
        console.log(`   üåê –ó–∞–ø—Ä–æ—Å –∫ VROOM API –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –∏ ${vehicles.length} –∫—É—Ä—å–µ—Ä–æ–≤`);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è VROOM
        const vroomJobs = orders.map((order, index) => ({
            id: index + 1,
            location: [
                order.address?.point?.lon || order.clientPoints?.lon,
                order.address?.point?.lat || order.clientPoints?.lat
            ],
            service: 300, // 5 –º–∏–Ω—É—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
            delivery: [1], // –ï–¥–∏–Ω–∏—Ü–∞ –≥—Ä—É–∑–∞
            skills: order.priority === 'high' ? [1] : [] // –ù–∞–≤—ã–∫–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        }));

        const vroomVehicles = vehicles.map((vehicle, index) => ({
            id: index + 1,
            start: [depot.lon, depot.lat],
            end: [depot.lon, depot.lat],
            capacity: [6], // –ú–∞–∫—Å–∏–º—É–º 6 –∑–∞–∫–∞–∑–æ–≤
            skills: [1], // –ú–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            time_window: [28800, 72000] // 8:00 - 20:00 –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        }));

        const vroomRequest = {
            jobs: vroomJobs,
            vehicles: vroomVehicles,
            options: {
                g: true // –í–∫–ª—é—á–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
            }
        };

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ VROOM API
        // const response = await fetch('http://localhost:3000/vroom', {
        //     method: 'POST',
        //     headers: { 'Content-Type': 'application/json' },
        //     body: JSON.stringify(vroomRequest)
        // });
        // const result = await response.json();

        console.log(`   ‚ö†Ô∏è VROOM API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º TSP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é`);
        return null;

    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ VROOM API: ${error.message}, –∏—Å–ø–æ–ª—å–∑—É–µ–º TSP`);
        return null;
    }
}

/**
 * üß† –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ó–û–ù –° –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–ï–ô
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç k-means –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∑–æ–Ω—ã
 */
function createAdvancedZones(orders, maxZones = 10) {
    console.log(`\nüß† –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–´–• –ó–û–ù (–º–∞–∫—Å. ${maxZones} –∑–æ–Ω)`);
    
    if (orders.length === 0) return [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const points = orders.map(order => ({
        lat: order.address?.point?.lat || order.clientPoints?.lat,
        lon: order.address?.point?.lon || order.clientPoints?.lon,
        order: order
    })).filter(p => p.lat && p.lon);

    if (points.length === 0) return [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    const optimalClusters = Math.min(Math.ceil(points.length / 3), maxZones);
    
    console.log(`   üìä K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: ${points.length} —Ç–æ—á–µ–∫ ‚Üí ${optimalClusters} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤`);

    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è k-means
    function kMeans(points, k) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
        let centroids = [];
        for (let i = 0; i < k; i++) {
            const randomPoint = points[Math.floor(Math.random() * points.length)];
            centroids.push({ lat: randomPoint.lat, lon: randomPoint.lon });
        }

        let clusters = [];
        let iterations = 0;
        const maxIterations = 50;

        while (iterations < maxIterations) {
            // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–æ—á–∫–∏ –∫ –±–ª–∏–∂–∞–π—à–∏–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º
            clusters = Array.from({ length: k }, () => []);
            
            for (const point of points) {
                let minDistance = Infinity;
                let closestCluster = 0;
                
                for (let i = 0; i < centroids.length; i++) {
                    const distance = calculateDistance(
                        point.lat, point.lon,
                        centroids[i].lat, centroids[i].lon
                    );
                    if (distance < minDistance) {
                        minDistance = distance;
                        closestCluster = i;
                    }
                }
                clusters[closestCluster].push(point);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã
            let centroidsChanged = false;
            for (let i = 0; i < k; i++) {
                if (clusters[i].length > 0) {
                    const newLat = clusters[i].reduce((sum, p) => sum + p.lat, 0) / clusters[i].length;
                    const newLon = clusters[i].reduce((sum, p) => sum + p.lon, 0) / clusters[i].length;
                    
                    if (Math.abs(centroids[i].lat - newLat) > 0.0001 || 
                        Math.abs(centroids[i].lon - newLon) > 0.0001) {
                        centroids[i] = { lat: newLat, lon: newLon };
                        centroidsChanged = true;
                    }
                }
            }

            if (!centroidsChanged) break;
            iterations++;
        }

        return { clusters, centroids };
    }

    const { clusters, centroids } = kMeans(points, optimalClusters);

    // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    const zones = [];
    for (let i = 0; i < clusters.length; i++) {
        if (clusters[i].length > 0) {
            const zoneOrders = clusters[i].map(p => p.order);
            const priority = zoneOrders.length >= 4 ? 'high' : 
                           zoneOrders.length >= 2 ? 'medium' : 'low';
            
            zones.push({
                id: `cluster_zone_${i + 1}`,
                center: centroids[i],
                orders: zoneOrders,
                radius: Math.max(...clusters[i].map(p => 
                    calculateDistance(p.lat, p.lon, centroids[i].lat, centroids[i].lon)
                )),
                priority: priority
            });
        }
    }

    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${zones.length} –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∑–æ–Ω`);
    zones.forEach(zone => {
        const priorityIcon = zone.priority === 'high' ? '‚≠ê' : 
                           zone.priority === 'medium' ? 'üî∂' : 'üè∑Ô∏è';
        console.log(`      ${priorityIcon} ${zone.id}: ${zone.orders.length} –∑–∞–∫–∞–∑–æ–≤, —Ä–∞–¥–∏—É—Å ${Math.round(zone.radius)}–º`);
    });

    return zones;
}

/**
 * üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
 */
export async function optimizedZoneBasedDistribution(date = null, useVROOM = false) {
    try {
        const today = getDateAlmaty(date);
        console.log(`üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ó–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê ${today}`);
        console.log("=".repeat(70));

        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        console.log("üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...");

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ –Ω–∞—á–∞—Ç—ã—Ö –∫—É—Ä—å–µ—Ä–∞–º–∏)
        const resetResult = await Order.updateMany(
            { 
                "date.d": today,
                forAggregator: true,
                status: { $nin: ["onTheWay", "delivered", "cancelled"] } // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—á–∞—Ç—ã–µ, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
            },
            { 
                $unset: { courierAggregator: "" }
            }
        );

        console.log(`üìä –°–±—Ä–æ—à–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${resetResult.modifiedCount} –∑–∞–∫–∞–∑–æ–≤`);

        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —É –∫—É—Ä—å–µ—Ä–æ–≤ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º —É–∂–µ –Ω–∞—á–∞—Ç—ã–µ)
        const couriersToUpdate = await CourierAggregator.find({ 
            onTheLine: true, 
            status: "active" 
        });

        for (const courier of couriersToUpdate) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞—Ç—ã (–≤ —Å—Ç–∞—Ç—É—Å–µ "onTheWay")
            const activeOrders = courier.orders.filter(order => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "onTheWay" (—É–∂–µ –Ω–∞—á–∞—Ç –∫—É—Ä—å–µ—Ä–æ–º)
                return order.status && order.status === "onTheWay";
            });
            
            await CourierAggregator.updateOne(
                { _id: courier._id },
                { $set: { orders: activeOrders } }
            );
        }

        console.log("‚úÖ –°—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã (–Ω–∞—á–∞—Ç—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)\n");

        // 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –∫—É—Ä—å–µ—Ä–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
        const orders = await Order.find({
            "date.d": today,
            forAggregator: true,
            status: { $nin: ["onTheWay", "delivered", "cancelled"] },
            $or: [
                { courierAggregator: { $exists: false } },
                { courierAggregator: null },
                { courierAggregator: undefined }
            ],
            "address.point.lat": { $exists: true, $ne: null },
            "address.point.lon": { $exists: true, $ne: null }
        }).populate('client');

        if (orders.length === 0) {
            console.log("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
            return { success: false, message: "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è" };
        }

        const couriers = await CourierAggregator.find({
            onTheLine: true,
            status: "active"
        });

        if (couriers.length === 0) {
            console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤!");
            return { success: false, message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤" };
        }

        const aquaMarket = await AquaMarket.findOne({
            "point.lat": { $exists: true, $ne: null },
            "point.lon": { $exists: true, $ne: null }
        });

        if (!aquaMarket) {
            console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–≤–∞–º–∞—Ä–∫–µ—Ç!");
            return { success: false, message: "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–≤–∞–º–∞—Ä–∫–µ—Ç" };
        }

        console.log(`üì¶ –ó–∞–∫–∞–∑–æ–≤: ${orders.length} | üë• –ö—É—Ä—å–µ—Ä–æ–≤: ${couriers.length}`);

        // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–æ–Ω—ã —Å k-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        const zones = createAdvancedZones(orders, couriers.length * 2);

        if (zones.length === 0) {
            console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–æ–Ω—ã!");
            return { success: false, message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–æ–Ω—ã" };
        }

        // 3. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VROOM –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        let vroomResult = null;
        if (useVROOM) {
            vroomResult = await optimizeWithVROOM(orders, couriers, {
                lat: aquaMarket.point.lat,
                lon: aquaMarket.point.lon
            });
        }

        // 4. –ï—Å–ª–∏ VROOM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ TSP —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if (!vroomResult) {
            console.log(`\nüß† –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–û–ù –ú–ï–ñ–î–£ –ö–£–†–¨–ï–†–ê–ú–ò`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏, —á—Ç–æ –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            const courierGroups = groupZonesForCouriersAdvanced(zones, couriers);

            // 5. –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å TSP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            let totalDistributed = 0;
            console.log(`\nüë• –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –° TSP –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô:`);

            for (let groupIndex = 0; groupIndex < courierGroups.length; groupIndex++) {
                const courierGroup = courierGroups[groupIndex];
                const courier = courierGroup.courier;
                
                console.log(`\nüë§ –ö–£–†–¨–ï–†: ${courier.fullName}`);
                console.log(`   üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${courierGroup.courierLocation.lat.toFixed(6)}, ${courierGroup.courierLocation.lon.toFixed(6)}`);
                console.log(`   üè∑Ô∏è –ó–æ–Ω—ã: ${courierGroup.zones.map(z => z.id).join(', ')}`);
                console.log(`   üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${courierGroup.totalOrders}`);

                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞
                const allCourierOrders = [];
                for (const zone of courierGroup.zones) {
                    allCourierOrders.push(...zone.orders);
                }

                // –ò–°–ü–û–õ–¨–ó–£–ï–ú TSP –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ –í–ú–ï–°–¢–û –ü–†–û–°–¢–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê
                const optimizedOrders = optimizeCourierRouteTSP(allCourierOrders, courier.fullName);

                // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
                for (const order of optimizedOrders) {
                    try {
                        await Order.updateOne(
                            { _id: order._id },
                            { 
                                $set: { 
                                    courierAggregator: courier._id,
                                }
                            }
                        );

                        const orderData = {
                            orderId: order._id.toString(),
                            status: order.status,
                            products: order.products,
                            sum: order.sum,
                            opForm: order.opForm,
                            comment: order.comment || "",
                            clientReview: order.clientReview || "",
                            clientTitle: order.client?.fullName || "",
                            clientPhone: order.client?.phone || "",
                            date: order.date,
                            clientPoints: {
                                lat: order.address.point.lat,
                                lon: order.address.point.lon
                            },
                            clientAddress: order.address.actual,
                            clientAddressLink: order.address.link || "",
                            aquaMarketPoints: { lat: aquaMarket.point.lat, lon: aquaMarket.point.lon },
                            aquaMarketAddress: aquaMarket.address,
                            aquaMarketAddressLink: aquaMarket.link,
                            step: "toAquaMarket",
                            income: order.sum,
                        };

                        await CourierAggregator.updateOne(
                            { _id: courier._id },
                            { $push: { orders: orderData } }
                        );
                        
                        totalDistributed++;
                        console.log(`      ‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω`);

                    } catch (error) {
                        console.log(`      ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                    }
                }
            }

            // 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            console.log("\n" + "=".repeat(70));
            console.log("üéâ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!");
            console.log("=".repeat(70));
            console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
            console.log(`‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${totalDistributed}`);
            console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–Ω–æ –∑–æ–Ω: ${zones.length}`);
            console.log(`üë• –ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ –∫—É—Ä—å–µ—Ä–æ–≤: ${courierGroups.length}`);
            console.log(`üß¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç–º: TSP + –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π + 2-opt`);

            return {
                success: true,
                totalOrders: orders.length,
                distributedOrders: totalDistributed,
                zonesCreated: zones.length,
                couriersUsed: courierGroups.length,
                algorithm: 'TSP + Genetic + 2-opt',
                zones: zones.map(zone => ({
                    id: zone.id,
                    center: zone.center,
                    ordersCount: zone.orders.length,
                    radius: zone.radius
                }))
            };
        }

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏:", error);
        return { success: false, error: error.message };
    }
}

/**
 * üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ó–û–ù –î–õ–Ø –ö–£–†–¨–ï–†–û–í
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤
 */
function groupZonesForCouriersAdvanced(zones, couriers) {
    console.log(`\nüß† –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ì–†–£–ü–ü–ò–†–û–í–ö–ê ${zones.length} –ó–û–ù –î–õ–Ø ${couriers.length} –ö–£–†–¨–ï–†–û–í –° –£–ß–ï–¢–û–ú –ò–• –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø`);
    
    if (zones.length === 0) return [];
    if (couriers.length === 0) return [];
    
    const totalOrders = zones.reduce((sum, zone) => sum + zone.orders.length, 0);
    const targetOrdersPerCourier = Math.ceil(totalOrders / couriers.length);
    const maxOrdersPerCourier = Math.min(targetOrdersPerCourier + 1, 6);
    
    console.log(`üìä –¶–µ–ª–µ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${targetOrdersPerCourier}, –º–∞–∫—Å–∏–º—É–º: ${maxOrdersPerCourier} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫—É—Ä—å–µ—Ä–∞`);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—å–µ—Ä–∞—Ö
    const courierGroups = couriers.map((courier, index) => ({
        courier: courier,
        courierIndex: index,
        zones: [],
        totalOrders: 0,
        center: null,
        totalDistance: 0,
        maxDistanceBetweenZones: 0,
        hasPriorityZone: false,
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞
        courierLocation: {
            lat: courier.point?.lat || 43.2, // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ê–ª–º–∞—Ç—ã
            lon: courier.point?.lon || 76.9
        }
    }));

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–∞—Ö
    console.log(`üë• –ö–£–†–¨–ï–†–´ –ò –ò–• –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï:`);
    courierGroups.forEach((group, index) => {
        console.log(`   ${index + 1}. ${group.courier.fullName}: ${group.courierLocation.lat.toFixed(6)}, ${group.courierLocation.lon.toFixed(6)}`);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–æ–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Ä–∞–∑–º–µ—Ä—É
    const sortedZones = [...zones].sort((a, b) => {
        const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };
        const aPriority = priorityOrder[a.priority] || 1;
        const bPriority = priorityOrder[b.priority] || 1;
        
        if (aPriority !== bPriority) {
            return bPriority - aPriority;
        }
        return b.orders.length - a.orders.length;
    });

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–æ–Ω—ã –∫—É—Ä—å–µ—Ä–∞–º —Å —É—á–µ—Ç–æ–º –∏—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    for (const zone of sortedZones) {
        let bestCourierIndex = -1;
        let bestScore = Infinity;
        
        console.log(`\nüè∑Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–æ–Ω—ã ${zone.id} (${zone.orders.length} –∑–∞–∫–∞–∑–æ–≤):`);
        console.log(`   üìç –¶–µ–Ω—Ç—Ä –∑–æ–Ω—ã: ${zone.center.lat.toFixed(6)}, ${zone.center.lon.toFixed(6)}`);
        
        for (let i = 0; i < courierGroups.length; i++) {
            const group = courierGroups[i];
            const newTotalOrders = group.totalOrders + zone.orders.length;
            
            if (newTotalOrders > maxOrdersPerCourier) {
                console.log(`      ‚ùå ${group.courier.fullName}: –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ (${newTotalOrders}/${maxOrdersPerCourier})`);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –∑–æ–Ω—ã
            const distanceToCourier = calculateDistance(
                group.courierLocation.lat, group.courierLocation.lon,
                zone.center.lat, zone.center.lon
            );
            
            let score = distanceToCourier;
            
            // –ï—Å–ª–∏ —É –∫—É—Ä—å–µ—Ä–∞ —É–∂–µ –µ—Å—Ç—å –∑–æ–Ω—ã, —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –∑–æ–Ω—ã
            if (group.zones.length > 0) {
                let minDistanceToExistingZone = Infinity;
                for (const existingZone of group.zones) {
                    const distance = calculateDistance(
                        zone.center.lat, zone.center.lon,
                        existingZone.center.lat, existingZone.center.lon
                    );
                    minDistanceToExistingZone = Math.min(minDistanceToExistingZone, distance);
                }
                
                // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫—É—Ä—å–µ—Ä–∞ –∏ –¥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–æ–Ω
                score = (distanceToCourier * 0.7) + (minDistanceToExistingZone * 0.3);
                
                // –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏
                if (minDistanceToExistingZone > 3000) score *= 2;
                if (minDistanceToExistingZone > 5000) score *= 3;
            }
            
            // –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            const loadPenalty = newTotalOrders > targetOrdersPerCourier ? 
                (newTotalOrders - targetOrdersPerCourier) * 1000 : 0;
            score += loadPenalty;
            
            console.log(`      üìä ${group.courier.fullName}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${Math.round(distanceToCourier)}–º, score ${Math.round(score)}, –Ω–∞–≥—Ä—É–∑–∫–∞ ${newTotalOrders}/${maxOrdersPerCourier}`);
            
            if (score < bestScore) {
                bestScore = score;
                bestCourierIndex = i;
            }
        }
        
        if (bestCourierIndex !== -1) {
            const selectedGroup = courierGroups[bestCourierIndex];
            selectedGroup.zones.push(zone);
            selectedGroup.totalOrders += zone.orders.length;
            
            if (zone.priority === 'high') {
                selectedGroup.hasPriorityZone = true;
            }
            
            console.log(`      ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∫—É—Ä—å–µ—Ä—É: ${selectedGroup.courier.fullName} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${Math.round(bestScore)}–º)`);
        } else {
            console.log(`      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–æ–Ω—É - –≤—Å–µ –∫—É—Ä—å–µ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã`);
        }
    }
    
    return courierGroups.filter(group => group.zones.length > 0);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { 
    optimizeCourierRouteTSP, 
    createAdvancedZones, 
    solveTSPGenetic, 
    improve2Opt,
    optimizeWithVROOM 
}; 