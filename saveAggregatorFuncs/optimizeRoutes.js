import mongoose from 'mongoose';
import Order from '../Models/Order.js';
import CourierAggregator from '../Models/CourierAggregator.js';
import AquaMarket from '../Models/AquaMarket.js';
import Client from '../Models/Client.js';
import { getDateAlmaty } from '../utils/dateUtils.js';
import { pushNotification } from '../pushNotification.js';

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
 */
function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const toRad = x => x * Math.PI / 180;
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
              Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

/**
 * üó∫Ô∏è –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ú–ê–†–®–†–£–¢–ê –ü–û –ü–†–ò–ù–¶–ò–ü–£ "–ë–õ–ò–ñ–ê–ô–®–ò–ô –°–û–°–ï–î"
 * –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ - –±–ª–∏–∂–∞–π—à–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
 */
function optimizeCourierRoute(orders, courierName) {
    if (orders.length <= 1) return orders;

    console.log(`   üó∫Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è ${courierName} (${orders.length} –∑–∞–∫–∞–∑–æ–≤)`);

    const optimizedRoute = [];
    const remainingOrders = [...orders];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–ª—é–±–æ–≥–æ)
    const firstOrder = remainingOrders.shift();
    optimizedRoute.push(firstOrder);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
    let currentLocation;
    if (firstOrder.address && firstOrder.address.point) {
        // –§–æ—Ä–º–∞—Ç –∏–∑ –±–∞–∑—ã Order
        currentLocation = {
            lat: firstOrder.address.point.lat,
            lon: firstOrder.address.point.lon
        };
        console.log(`      üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–∫–∞–∑–∞: ${firstOrder.address.actual}`);
    } else if (firstOrder.clientPoints) {
        // –§–æ—Ä–º–∞—Ç –∏–∑ CourierAggregator
        currentLocation = {
            lat: firstOrder.clientPoints.lat,
            lon: firstOrder.clientPoints.lon
        };
        console.log(`      üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–∫–∞–∑–∞: ${firstOrder.clientAddress || firstOrder.clientTitle}`);
    } else {
        console.log(`      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞`);
        return orders; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    }

    console.log(`         üìç (${currentLocation.lat.toFixed(4)}, ${currentLocation.lon.toFixed(4)})`);

    // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "–±–ª–∏–∂–∞–π—à–∏–π —Å–æ—Å–µ–¥"
    while (remainingOrders.length > 0) {
        let nearestIndex = 0;
        let shortestDistance = Infinity;

        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–∫–∞–∑ –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
        for (let i = 0; i < remainingOrders.length; i++) {
            const order = remainingOrders[i];
            let orderLat, orderLon;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–∫–∞–∑–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
            if (order.address && order.address.point) {
                orderLat = order.address.point.lat;
                orderLon = order.address.point.lon;
            } else if (order.clientPoints) {
                orderLat = order.clientPoints.lat;
                orderLon = order.clientPoints.lon;
            } else {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            }

            const distance = calculateDistance(
                currentLocation.lat,
                currentLocation.lon,
                orderLat,
                orderLon
            );

            if (distance < shortestDistance) {
                shortestDistance = distance;
                nearestIndex = i;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–∫–∞–∑ –≤ –º–∞—Ä—à—Ä—É—Ç
        const selectedOrder = remainingOrders.splice(nearestIndex, 1)[0];
        optimizedRoute.push(selectedOrder);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        let newLat, newLon, orderName;
        if (selectedOrder.address && selectedOrder.address.point) {
            newLat = selectedOrder.address.point.lat;
            newLon = selectedOrder.address.point.lon;
            orderName = selectedOrder.address.actual;
        } else if (selectedOrder.clientPoints) {
            newLat = selectedOrder.clientPoints.lat;
            newLon = selectedOrder.clientPoints.lon;
            orderName = selectedOrder.clientAddress || selectedOrder.clientTitle;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        const deltaLat = newLat - currentLocation.lat;
        const deltaLon = newLon - currentLocation.lon;
        
        let direction = '';
        if (Math.abs(deltaLat) > Math.abs(deltaLon)) {
            direction = deltaLat > 0 ? '‚¨ÜÔ∏è –°–µ–≤–µ—Ä' : '‚¨áÔ∏è –Æ–≥';
        } else {
            direction = deltaLon > 0 ? '‚û°Ô∏è –í–æ—Å—Ç–æ–∫' : '‚¨ÖÔ∏è –ó–∞–ø–∞–¥';
        }
        
        console.log(`      ‚Üí ${optimizedRoute.length}. ${orderName}`);
        console.log(`         üìç (${newLat}, ${newLon})`);
        console.log(`         ${direction} - ${Math.round(shortestDistance)}–º –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        currentLocation = {
            lat: newLat,
            lon: newLon
        };
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
    let totalDistance = 0;
    
    for (let i = 1; i < optimizedRoute.length; i++) {
        let prevLat, prevLon, currLat, currLon;
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        if (optimizedRoute[i-1].address && optimizedRoute[i-1].address.point) {
            prevLat = optimizedRoute[i-1].address.point.lat;
            prevLon = optimizedRoute[i-1].address.point.lon;
        } else if (optimizedRoute[i-1].clientPoints) {
            prevLat = optimizedRoute[i-1].clientPoints.lat;
            prevLon = optimizedRoute[i-1].clientPoints.lon;
        }
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        if (optimizedRoute[i].address && optimizedRoute[i].address.point) {
            currLat = optimizedRoute[i].address.point.lat;
            currLon = optimizedRoute[i].address.point.lon;
        } else if (optimizedRoute[i].clientPoints) {
            currLat = optimizedRoute[i].clientPoints.lat;
            currLon = optimizedRoute[i].clientPoints.lon;
        }
        
        if (prevLat && prevLon && currLat && currLon) {
            const distance = calculateDistance(prevLat, prevLon, currLat, currLon);
            totalDistance += distance;
        }
    }

    console.log(`   ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω. –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏: ${Math.round(totalDistance)}–º`);
    return optimizedRoute;
}

/**
 * üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ó–û–ù –î–õ–Ø –ö–£–†–¨–ï–†–û–í
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–ª–∏–∑–∫–∏–µ –∑–æ–Ω—ã –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
 */
function groupZonesForCouriers(zones, courierCount) {
    console.log(`\nüß† –ì–†–£–ü–ü–ò–†–û–í–ö–ê ${zones.length} –ó–û–ù –î–õ–Ø ${courierCount} –ö–£–†–¨–ï–†–û–í`);
    
    if (zones.length === 0) return [];
    if (courierCount === 0) return [];
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ —Ü–µ–ª–µ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∫—É—Ä—å–µ—Ä–∞
    const totalOrders = zones.reduce((sum, zone) => sum + zone.orders.length, 0);
    const targetOrdersPerCourier = Math.ceil(totalOrders / courierCount);
    const maxOrdersPerCourier = targetOrdersPerCourier + 3 // –°—Ç—Ä–æ–∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    
    console.log(`üìä –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑:`);
    console.log(`   üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`);
    console.log(`   üë• –ö—É—Ä—å–µ—Ä–æ–≤: ${courierCount}`);
    console.log(`   üéØ –¶–µ–ª–µ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä–∞: ${targetOrdersPerCourier} –∑–∞–∫–∞–∑–æ–≤`);
    console.log(`   ‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –∫—É—Ä—å–µ—Ä–∞: ${maxOrdersPerCourier} –∑–∞–∫–∞–∑–æ–≤`);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–æ–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    const highPriorityZones = zones.filter(zone => zone.priority === 'high');
    const mediumPriorityZones = zones.filter(zone => zone.priority === 'medium');
    const lowPriorityZones = zones.filter(zone => zone.priority === 'low');
    
    console.log(`üìä –ó–æ–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º: ‚≠ê${highPriorityZones.length} / üî∂${mediumPriorityZones.length} / üè∑Ô∏è${lowPriorityZones.length}`);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
    const courierGroups = Array.from({ length: courierCount }, () => ({
        zones: [],
        totalOrders: 0,
        center: null,
        totalDistance: 0,
        maxDistanceBetweenZones: 0,
        hasPriorityZone: false
    }));
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–æ–Ω—ã —Å –≥—Ä—É–ø–ø–æ–π –∫—É—Ä—å–µ—Ä–∞
    function calculateZoneCompatibilityScore(zone, courierGroup) {
        const newTotalOrders = courierGroup.totalOrders + zone.orders.length;
        
        // –ñ–ï–°–¢–ö–ò–ô –ª–∏–º–∏—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º
        if (newTotalOrders > maxOrdersPerCourier) {
            return Infinity; // –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ
        }
        
        let score = 0;
        
        if (courierGroup.zones.length === 0) {
            // –ü–µ—Ä–≤–∞—è –∑–æ–Ω–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            score = newTotalOrders > targetOrdersPerCourier ? 
                (newTotalOrders - targetOrdersPerCourier) * 500 : 0;
        } else {
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–æ–Ω
            let minDistance = Infinity;
            let maxDistance = 0;
            let totalDistance = 0;
            
            for (const existingZone of courierGroup.zones) {
                const distance = calculateDistance(
                    zone.center.lat,
                    zone.center.lon,
                    existingZone.center.lat,
                    existingZone.center.lon
                );
                minDistance = Math.min(minDistance, distance);
                maxDistance = Math.max(maxDistance, distance);
                totalDistance += distance;
            }
            
            const avgDistance = totalDistance / courierGroup.zones.length;
            
            // –û–ß–ï–ù–¨ –°–¢–†–û–ì–ò–ï —à—Ç—Ä–∞—Ñ—ã –∑–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            let distancePenalty = minDistance; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –±–∞–∑—É
            
            // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            if (minDistance > 3000) distancePenalty *= 5;   // 3–∫–º - –ø—è—Ç–∏–∫—Ä–∞—Ç–Ω—ã–π —à—Ç—Ä–∞—Ñ
            if (minDistance > 5000) distancePenalty *= 10;  // 5–∫–º - –¥–µ—Å—è—Ç–∏–∫—Ä–∞—Ç–Ω—ã–π —à—Ç—Ä–∞—Ñ
            if (minDistance > 8000) distancePenalty *= 20;  // 8–∫–º - –¥–≤–∞–¥—Ü–∞—Ç–∏–∫—Ä–∞—Ç–Ω—ã–π —à—Ç—Ä–∞—Ñ
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –∑–æ–Ω–∞–º–∏ > 6–∫–º
            if (maxDistance > 6000) {
                distancePenalty += (maxDistance - 6000) * 3;
            }
            
            // –®—Ç—Ä–∞—Ñ –∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π, —á–µ–º —Ä–∞–Ω—å—à–µ)
            const loadPenalty = newTotalOrders > targetOrdersPerCourier ? 
                (newTotalOrders - targetOrdersPerCourier) * 1000 : 0;
            
            // –ë–æ–Ω—É—Å –∑–∞ –Ω–µ–¥–æ–∑–∞–≥—Ä—É–∑–∫—É –∫—É—Ä—å–µ—Ä–∞ (—Å—Ç–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å)
            const underloadBonus = courierGroup.totalOrders < targetOrdersPerCourier ? 
                (targetOrdersPerCourier - courierGroup.totalOrders) * -300 : 0;
            
            score = distancePenalty + loadPenalty + underloadBonus;
        }
        
        return score;
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–æ–Ω—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const allZones = [
        ...highPriorityZones.map(z => ({...z, priorityWeight: 3})),
        ...mediumPriorityZones.map(z => ({...z, priorityWeight: 2})),
        ...lowPriorityZones.map(z => ({...z, priorityWeight: 1}))
    ];
    
    // –≠–¢–ê–ü 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    for (const zone of allZones) {
        let bestCourierIndex = -1;
        let bestScore = Infinity;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        for (let i = 0; i < courierCount; i++) {
            const score = calculateZoneCompatibilityScore(zone, courierGroups[i]);
            
            if (score < bestScore) {
                bestScore = score;
                bestCourierIndex = i;
            }
        }
        
        if (bestCourierIndex === -1 || bestScore === Infinity) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–æ–Ω—É ${zone.id} - –≤—Å–µ –∫—É—Ä—å–µ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ`);
            continue;
        }
        
        const selectedGroup = courierGroups[bestCourierIndex];
        selectedGroup.zones.push(zone);
        selectedGroup.totalOrders += zone.orders.length;
        
        if (zone.priority === 'high') {
            selectedGroup.hasPriorityZone = true;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –≥—Ä—É–ø–ø—ã
        if (selectedGroup.zones.length === 1) {
            selectedGroup.center = { ...zone.center };
        } else {
            let totalLat = 0;
            let totalLon = 0;
            for (const z of selectedGroup.zones) {
                totalLat += z.center.lat;
                totalLon += z.center.lon;
            }
            selectedGroup.center = {
                lat: totalLat / selectedGroup.zones.length,
                lon: totalLon / selectedGroup.zones.length
            };
        }
        
        const priorityIcon = zone.priority === 'high' ? '‚≠ê' : zone.priority === 'medium' ? 'üî∂' : 'üè∑Ô∏è';
        console.log(`üë§ –ö—É—Ä—å–µ—Ä ${bestCourierIndex + 1}: –¥–æ–±–∞–≤–ª–µ–Ω–∞ ${priorityIcon}–∑–æ–Ω–∞ ${zone.id} (–æ—Ü–µ–Ω–∫–∞ ${Math.round(bestScore)}, –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${selectedGroup.totalOrders})`);
    }
    
    // –≠–¢–ê–ü 2: –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª—è –ª—É—á—à–µ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
    console.log(`\nüîÑ –ü–û–°–¢-–û–ë–†–ê–ë–û–¢–ö–ê: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –∫—É—Ä—å–µ—Ä–∞–º–∏`);
    
    let improved = true;
    let iterations = 0;
    const maxIterations = 5;
    
    while (improved && iterations < maxIterations) {
        improved = false;
        iterations++;
        
        console.log(`   –ò—Ç–µ—Ä–∞—Ü–∏—è ${iterations}:`);
        
        // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        for (let i = 0; i < courierGroups.length; i++) {
            for (let j = i + 1; j < courierGroups.length; j++) {
                const group1 = courierGroups[i];
                const group2 = courierGroups[j];
                
                if (group1.zones.length === 0 || group2.zones.length === 0) continue;
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–æ–Ω—ã –¥–ª—è –ª—É—á—à–µ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
                for (let zoneIdx = 0; zoneIdx < group1.zones.length; zoneIdx++) {
                    const zone = group1.zones[zoneIdx];
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏
                    const currentScore1 = calculateGroupEfficiency(group1);
                    const currentScore2 = calculateGroupEfficiency(group2);
                    const currentTotal = currentScore1 + currentScore2;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–æ–Ω—É
                    if (group2.totalOrders + zone.orders.length <= maxOrdersPerCourier) {
                        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏
                        const tempGroup1 = {
                            ...group1,
                            zones: group1.zones.filter((_, idx) => idx !== zoneIdx),
                            totalOrders: group1.totalOrders - zone.orders.length
                        };
                        
                        const tempGroup2 = {
                            ...group2,
                            zones: [...group2.zones, zone],
                            totalOrders: group2.totalOrders + zone.orders.length
                        };
                        
                        const newScore1 = calculateGroupEfficiency(tempGroup1);
                        const newScore2 = calculateGroupEfficiency(tempGroup2);
                        const newTotal = newScore1 + newScore2;
                        
                        // –ï—Å–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ (–º–∏–Ω–∏–º—É–º 1000 –µ–¥–∏–Ω–∏—Ü)
                        if (newTotal < currentTotal - 1000) {
                            console.log(`     üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–æ–Ω—É ${zone.id} –æ—Ç –∫—É—Ä—å–µ—Ä–∞ ${i+1} –∫ –∫—É—Ä—å–µ—Ä—É ${j+1}`);
                            console.log(`        –£–ª—É—á—à–µ–Ω–∏–µ: ${Math.round(currentTotal - newTotal)} –µ–¥–∏–Ω–∏—Ü`);
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            group1.zones.splice(zoneIdx, 1);
                            group1.totalOrders -= zone.orders.length;
                            group2.zones.push(zone);
                            group2.totalOrders += zone.orders.length;
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä—ã –≥—Ä—É–ø–ø
                            updateGroupCenter(group1);
                            updateGroupCenter(group2);
                            
                            improved = true;
                            break;
                        }
                    }
                }
                if (improved) break;
            }
            if (improved) break;
        }
        
        if (!improved) {
            console.log(`     ‚úÖ –î–∞–ª—å–Ω–µ–π—à–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
    for (let i = 0; i < courierGroups.length; i++) {
        const group = courierGroups[i];
        if (group.zones.length > 1) {
            let totalDistance = 0;
            let maxDistance = 0;
            
            for (let j = 0; j < group.zones.length - 1; j++) {
                for (let k = j + 1; k < group.zones.length; k++) {
                    const distance = calculateDistance(
                        group.zones[j].center.lat,
                        group.zones[j].center.lon,
                        group.zones[k].center.lat,
                        group.zones[k].center.lon
                    );
                    totalDistance += distance;
                    maxDistance = Math.max(maxDistance, distance);
                }
            }
            
            group.totalDistance = totalDistance;
            group.maxDistanceBetweenZones = maxDistance;
        }
    }
    
    console.log(`\nüìä –ò–¢–û–ì–û–í–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–û–ù:`);
    courierGroups.forEach((group, index) => {
        if (group.zones.length > 0) {
            const zoneNames = group.zones.map(z => {
                const priorityIcon = z.priority === 'high' ? '‚≠ê' : z.priority === 'medium' ? 'üî∂' : 'üè∑Ô∏è';
                return `${priorityIcon}${z.id}`;
            }).join(' + ');
            
            const balanceStatus = group.totalOrders <= targetOrdersPerCourier ? '‚úÖ' : 
                                group.totalOrders <= maxOrdersPerCourier ? '‚ö†Ô∏è' : '‚ùå';
            
            const distanceStatus = group.maxDistanceBetweenZones > 8000 ? 'üî¥' : 
                                 group.maxDistanceBetweenZones > 5000 ? 'üü°' : 'üü¢';
            
            console.log(`üë§ –ö—É—Ä—å–µ—Ä ${index + 1}: ${zoneNames} (${group.totalOrders} –∑–∞–∫–∞–∑–æ–≤ ${balanceStatus}, –º–∞–∫—Å.—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${Math.round(group.maxDistanceBetweenZones)}–º ${distanceStatus})`);
        }
    });
    
    return courierGroups.filter(group => group.zones.length > 0);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
function calculateGroupEfficiency(group) {
    if (group.zones.length === 0) return 0;
    if (group.zones.length === 1) return group.totalOrders * 100; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –∑–æ–Ω—ã
    
    let totalDistance = 0;
    let maxDistance = 0;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ
    for (let i = 0; i < group.zones.length - 1; i++) {
        for (let j = i + 1; j < group.zones.length; j++) {
            const distance = calculateDistance(
                group.zones[i].center.lat,
                group.zones[i].center.lon,
                group.zones[j].center.lat,
                group.zones[j].center.lon
            );
            totalDistance += distance;
            maxDistance = Math.max(maxDistance, distance);
        }
    }
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    let penalty = totalDistance;
    if (maxDistance > 5000) penalty += (maxDistance - 5000) * 2;
    if (maxDistance > 8000) penalty += (maxDistance - 8000) * 5;
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    const targetLoad = 4; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    if (group.totalOrders > targetLoad) {
        penalty += (group.totalOrders - targetLoad) * 1000;
    }
    
    return penalty;
}

function updateGroupCenter(group) {
    if (group.zones.length === 0) {
        group.center = null;
        return;
    }
    
    if (group.zones.length === 1) {
        group.center = { ...group.zones[0].center };
        return;
    }
    
    let totalLat = 0;
    let totalLon = 0;
    for (const zone of group.zones) {
        totalLat += zone.center.lat;
        totalLon += zone.center.lon;
    }
    
    group.center = {
        lat: totalLat / group.zones.length,
        lon: totalLon / group.zones.length
    };
}

/**
 * üîÑ –ü–û–°–¢-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ú–ê–†–®–†–£–¢–û–í –ü–£–¢–ï–ú –û–ë–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê–ú–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –æ–±—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—É—Ç–µ–º –æ–±–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞–º–∏ –º–µ–∂–¥—É –∫—É—Ä—å–µ—Ä–∞–º–∏
 */
async function optimizeRoutesBySwapping(couriers) {
    console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤...");
    
    let improvements = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–æ–≤
    const courierDocs = await Promise.all(
        couriers.map(c => CourierAggregator.findById(c._id))
    );
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –∫—É—Ä—å–µ—Ä–æ–≤
    for (let i = 0; i < courierDocs.length; i++) {
        for (let j = i + 1; j < courierDocs.length; j++) {
            const courier1 = courierDocs[i];
            const courier2 = courierDocs[j];
            
            if (courier1.orders.length === 0 || courier2.orders.length === 0) continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞–º–∏
            for (let order1Idx = 0; order1Idx < courier1.orders.length; order1Idx++) {
                for (let order2Idx = 0; order2Idx < courier2.orders.length; order2Idx++) {
                    const order1 = courier1.orders[order1Idx];
                    const order2 = courier2.orders[order2Idx];
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    const current1Distance = calculateCourierTotalDistance(courier1.orders);
                    const current2Distance = calculateCourierTotalDistance(courier2.orders);
                    const currentTotal = current1Distance + current2Distance;
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ —Å –æ–±–º–µ–Ω—è–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                    const newOrders1 = [...courier1.orders];
                    const newOrders2 = [...courier2.orders];
                    
                    newOrders1[order1Idx] = order2;
                    newOrders2[order2Idx] = order1;
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    const new1Distance = calculateCourierTotalDistance(newOrders1);
                    const new2Distance = calculateCourierTotalDistance(newOrders2);
                    const newTotal = new1Distance + new2Distance;
                    
                    // –ï—Å–ª–∏ –æ–±–º–µ–Ω —É–ª—É—á—à–∞–µ—Ç –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    if (newTotal < currentTotal - 500) { // –º–∏–Ω–∏–º—É–º 500–º —É–ª—É—á—à–µ–Ω–∏—è
                        console.log(`üîÑ –£–õ–£–ß–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û:`);
                        console.log(`   üì¶ –û–±–º–µ–Ω–∏–≤–∞–µ–º "${order1.clientAddress}" ‚Üî "${order2.clientAddress}"`);
                        console.log(`   üìä –≠–∫–æ–Ω–æ–º–∏—è: ${Math.round(currentTotal - newTotal)}–º`);
                        console.log(`   üöó ${courier1.fullName}: ${Math.round(current1Distance)}–º ‚Üí ${Math.round(new1Distance)}–º`);
                        console.log(`   üöó ${courier2.fullName}: ${Math.round(current2Distance)}–º ‚Üí ${Math.round(new2Distance)}–º`);
                        
                        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        try {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Order
                            await Order.updateOne(
                                { _id: order1.orderId },
                                { $set: { courierAggregator: courier2._id } }
                            );
                            
                            await Order.updateOne(
                                { _id: order2.orderId },
                                { $set: { courierAggregator: courier1._id } }
                            );
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã —É –∫—É—Ä—å–µ—Ä–æ–≤
                            await CourierAggregator.updateOne(
                                { _id: courier1._id },
                                { $set: { orders: newOrders1 } }
                            );
                            
                            await CourierAggregator.updateOne(
                                { _id: courier2._id },
                                { $set: { orders: newOrders2 } }
                            );
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏
                            courier1.orders = newOrders1;
                            courier2.orders = newOrders2;
                            
                            improvements++;
                            console.log(`   ‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                            
                            // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª—ã –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –∫—É—Ä—å–µ—Ä–æ–≤
                            break;
                            
                        } catch (error) {
                            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞: ${error.message}`);
                        }
                    }
                }
                if (improvements > 0) break; // –û–¥–∏–Ω –æ–±–º–µ–Ω –∑–∞ —Ä–∞–∑
            }
            if (improvements > 0) break; // –û–¥–∏–Ω –æ–±–º–µ–Ω –∑–∞ —Ä–∞–∑
        }
        if (improvements > 0) break; // –û–¥–∏–Ω –æ–±–º–µ–Ω –∑–∞ —Ä–∞–∑
    }
    
    if (improvements > 0) {
        console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${improvements} —É–ª—É—á—à–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
        if (improvements < 3) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏
            await optimizeRoutesBySwapping(couriers);
        }
    } else {
        console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã, —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
}

/**
 * üìè –í–´–ß–ò–°–õ–ï–ù–ò–ï –û–ë–©–ï–ì–û –†–ê–°–°–¢–û–Ø–ù–ò–Ø –ú–ê–†–®–†–£–¢–ê –ö–£–†–¨–ï–†–ê
 */
function calculateCourierTotalDistance(orders) {
    if (orders.length <= 1) return 0;
    
    let totalDistance = 0;
    
    // –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
    for (let i = 1; i < orders.length; i++) {
        const prevOrder = orders[i-1];
        const currentOrder = orders[i];
        
        if (prevOrder.clientPoints && prevOrder.clientPoints.lat && prevOrder.clientPoints.lon &&
            currentOrder.clientPoints && currentOrder.clientPoints.lat && currentOrder.clientPoints.lon) {
            const distance = calculateDistance(
                prevOrder.clientPoints.lat,
                prevOrder.clientPoints.lon,
                currentOrder.clientPoints.lat,
                currentOrder.clientPoints.lon
            );
            totalDistance += distance;
        }
    }
    
    return totalDistance;
}

/**
 * üó∫Ô∏è –ó–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –° –ì–†–£–ü–ü–ò–†–û–í–ö–û–ô
 * –°–æ–∑–¥–∞–µ—Ç –∑–æ–Ω—ã, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∫—É—Ä—å–µ—Ä–∞–º
 */
export async function zoneBasedDistribution(date = null) {
    try {
        const today = getDateAlmaty(date);
        console.log(`üöÄ –ó–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í –ù–ê ${today}`);
        console.log("=".repeat(60));

        // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –Ω–∞—á–∞—Ç—ã–µ)
        const orders = await Order.find({
            "date.d": today,
            forAggregator: true,
            status: { $nin: ["onTheWay", "delivered", "cancelled"] }, // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—á–∞—Ç—ã–µ, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
            $or: [
                { courierAggregator: { $exists: false } },
                { courierAggregator: null },
                { courierAggregator: undefined }
            ],
            "address.point.lat": { $exists: true, $ne: null },
            "address.point.lon": { $exists: true, $ne: null }
        }).populate('client');

        console.log(`üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:`);
        console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: –∏—Å–∫–ª—é—á–∞–µ–º "onTheWay", "delivered", "cancelled"`);
        console.log(`   ‚úÖ –ö—É—Ä—å–µ—Ä: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω`);
        console.log(`   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);

        if (orders.length === 0) {
            console.log("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
            return { success: false, message: "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è" };
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        const couriers = await CourierAggregator.find({
            onTheLine: true,
            status: "active"
        });

        if (couriers.length === 0) {
            console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤!");
            return { success: false, message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤" };
        }

        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
        console.log(`üë• –î–æ—Å—Ç—É–ø–Ω–æ –∫—É—Ä—å–µ—Ä–æ–≤: ${couriers.length}`);

        // 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–∫–≤–∞–º–∞—Ä–∫–µ—Ç–∞
        const aquaMarket = await AquaMarket.findOne({
            "point.lat": { $exists: true, $ne: null },
            "point.lon": { $exists: true, $ne: null }
        });

        if (!aquaMarket) {
            console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–≤–∞–º–∞—Ä–∫–µ—Ç!");
            return { success: false, message: "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–≤–∞–º–∞—Ä–∫–µ—Ç" };
        }

        const aquaMarketLocation = { lat: aquaMarket.point.lat, lon: aquaMarket.point.lon };
        console.log(`üè™ –ê–∫–≤–∞–º–∞—Ä–∫–µ—Ç: ${aquaMarket.address}`);

        // 4. –°–û–ó–î–ê–ï–ú –ó–û–ù–´ –ù–ê –û–°–ù–û–í–ï –ü–õ–û–¢–ù–û–°–¢–ò –ó–ê–ö–ê–ó–û–í
        const zones = await createSmartZones(orders);
        
        if (zones.length === 0) {
            console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–æ–Ω—ã!");
            return { success: false, message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–æ–Ω—ã" };
        }

        // 5. –ì–†–£–ü–ü–ò–†–£–ï–ú –ó–û–ù–´ –î–õ–Ø –ö–£–†–¨–ï–†–û–í
        const courierGroups = groupZonesForCouriers(zones, couriers.length);

        // 6. –ù–ê–ó–ù–ê–ß–ê–ï–ú –ó–ê–ö–ê–ó–´ –ö–£–†–¨–ï–†–ê–ú –ü–û –ì–†–£–ü–ü–ê–ú –ó–û–ù
        let totalDistributed = 0;
        console.log(`\nüë• –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í –ö–£–†–¨–ï–†–ê–ú:`);

        for (let groupIndex = 0; groupIndex < courierGroups.length && groupIndex < couriers.length; groupIndex++) {
            const courier = couriers[groupIndex];
            const group = courierGroups[groupIndex];
            
            console.log(`\nüë§ –ö–£–†–¨–ï–†: ${courier.fullName}`);
            console.log(`   üè∑Ô∏è –ó–æ–Ω—ã: ${group.zones.map(z => z.id).join(', ')}`);
            console.log(`   üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${group.totalOrders}`);

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –≤—Å–µ—Ö –∑–æ–Ω –∫—É—Ä—å–µ—Ä–∞
            const allCourierOrders = [];
            for (const zone of group.zones) {
                allCourierOrders.push(...zone.orders);
            }

            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞
            const optimizedOrders = optimizeCourierRoute(allCourierOrders, courier.fullName);

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä—É
            for (let orderIndex = 0; orderIndex < optimizedOrders.length; orderIndex++) {
                const order = optimizedOrders[orderIndex];

                try {
                    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await Order.updateOne(
                        { _id: order._id },
                        { 
                            $set: { 
                                courierAggregator: courier._id,
                                status: "assigned",
                                assignedAt: new Date()
                            }
                        }
                    );

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
                    const orderData = {
                        orderId: order._id.toString(),
                        status: order.status,
                        products: order.products,
                        sum: order.sum,
                        opForm: order.opForm,
                        comment: order.comment || "",
                        clientReview: order.clientReview || "",
                        clientTitle: order.client?.fullName || "",
                        clientPhone: order.client?.phone || "",
                        date: order.date,
                        clientPoints: {
                            lat: order.address.point.lat,
                            lon: order.address.point.lon
                        },
                        clientAddress: order.address.actual,
                        clientAddressLink: order.address.link || "",
                        aquaMarketPoints: { lat: aquaMarket.point.lat, lon: aquaMarket.point.lon },
                        aquaMarketAddress: aquaMarket.address,
                        aquaMarketAddressLink: aquaMarket.link,
                        step: "toAquaMarket",
                        income: order.sum,
                        assignedAt: new Date()
                    };

                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞
                    await CourierAggregator.updateOne(
                        { _id: courier._id },
                        { $push: { orders: orderData } }
                    );
                    
                    totalDistributed++;

                    console.log(`      ‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—å–µ—Ä—É`);

                } catch (error) {
                    console.log(`      ‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${error.message}`);
                }
            }
        }

        // 7. –ü–û–°–¢-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–õ–£–ß–®–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–û–í –ü–£–¢–ï–ú –û–ë–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê–ú–ò
        console.log(`\nüîÑ –ü–û–°–¢-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ú–ê–†–®–†–£–¢–û–í`);
        await optimizeRoutesBySwapping(couriers);

        // 8. –ü–†–û–í–ï–†–Ø–ï–ú –ò –ù–ê–ó–ù–ê–ß–ê–ï–ú –û–°–¢–ê–í–®–ò–ï–°–Ø –ù–ï–ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ï –ó–ê–ö–ê–ó–´
        const remainingOrders = await Order.find({
            "date.d": today,
            forAggregator: true,
            status: { $nin: ["onTheWay", "delivered", "cancelled"] }, // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—á–∞—Ç—ã–µ, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
            $or: [
                { courierAggregator: { $exists: false } },
                { courierAggregator: null },
                { courierAggregator: undefined }
            ],
            "address.point.lat": { $exists: true, $ne: null },
            "address.point.lon": { $exists: true, $ne: null }
        }).populate('client');

        if (remainingOrders.length > 0) {
            console.log(`\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û ${remainingOrders.length} –ù–ï–ù–ê–ó–ù–ê–ß–ï–ù–ù–´–• –ó–ê–ö–ê–ó–û–í`);
            console.log("üîß –ù–ê–ó–ù–ê–ß–ê–ï–ú –û–°–¢–ê–í–®–ò–ï–°–Ø –ó–ê–ö–ê–ó–´ –° –ö–û–ù–¢–†–û–õ–ï–ú –ù–ê–ì–†–£–ó–ö–ò:");

            // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∫—É—Ä—å–µ—Ä–∞
            const totalOrdersWithRemaining = orders.length;
            const targetOrdersPerCourier = Math.ceil(totalOrdersWithRemaining / couriers.length);
            const maxOrdersPerCourier = targetOrdersPerCourier + 1;
            
            console.log(`   üìä –ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫—É—Ä—å–µ—Ä–∞: ${maxOrdersPerCourier}`);

            for (const order of remainingOrders) {
                let bestCourier = null;
                let shortestDistance = Infinity;
                let bestScore = Infinity;

                console.log(`   üì¶ –ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è "${order.address.actual}"`);
                console.log(`      üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (${order.address.point.lat.toFixed(4)}, ${order.address.point.lon.toFixed(4)})`);

                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞–≥—Ä—É–∑–∫–∏
                const courierAnalysis = [];
                
                for (const courier of couriers) {
                    const courierDoc = await CourierAggregator.findById(courier._id);
                    
                    // –°–¢–†–û–ì–ò–ô –ö–û–ù–¢–†–û–õ–¨: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
                    if (courierDoc.orders.length >= maxOrdersPerCourier) {
                        console.log(`      üö´ ${courier.fullName}: –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (${courierDoc.orders.length}/${maxOrdersPerCourier} –∑–∞–∫–∞–∑–æ–≤)`);
                        continue;
                    }

                    let avgDistance = Infinity;
                    
                    if (courierDoc.orders.length > 0) {
                        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞
                        let totalDistance = 0;
                        let validOrders = 0;

                        for (const courierOrder of courierDoc.orders) {
                            if (courierOrder.clientPoints && courierOrder.clientPoints.lat && courierOrder.clientPoints.lon) {
                                const distance = calculateDistance(
                                    order.address.point.lat,
                                    order.address.point.lon,
                                    courierOrder.clientPoints.lat,
                                    courierOrder.clientPoints.lon
                                );
                                totalDistance += distance;
                                validOrders++;
                            }
                        }

                        if (validOrders > 0) {
                            avgDistance = totalDistance / validOrders;
                        }
                    } else {
                        // –ï—Å–ª–∏ —É –∫—É—Ä—å–µ—Ä–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, —Å—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
                        avgDistance = calculateDistance(
                            43.2220, 76.8512, // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ê–ª–º–∞—Ç—ã
                            order.address.point.lat,
                            order.address.point.lon
                        );
                    }

                    // –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞–≥—Ä—É–∑–∫—É (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤)
                    const loadPenalty = courierDoc.orders.length * 2000; // 2–∫–º —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
                    
                    // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞
                    const score = avgDistance + loadPenalty;
                    
                    courierAnalysis.push({
                        courier: courier,
                        ordersCount: courierDoc.orders.length,
                        avgDistance: avgDistance,
                        loadPenalty: loadPenalty,
                        score: score
                    });

                    console.log(`      üöó ${courier.fullName}: ${Math.round(avgDistance)}–º, –Ω–∞–≥—Ä—É–∑–∫–∞ ${courierDoc.orders.length}, —Ä–µ–π—Ç–∏–Ω–≥ ${Math.round(score)}`);
                }

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–ª—É—á—à–∏–π - —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º)
                courierAnalysis.sort((a, b) => a.score - b.score);

                if (courierAnalysis.length > 0) {
                    const best = courierAnalysis[0];
                    bestCourier = best.courier;
                    shortestDistance = best.avgDistance;
                    
                    console.log(`      ‚úÖ –õ—É—á—à–∏–π –≤—ã–±–æ—Ä ‚Üí ${bestCourier.fullName}`);
                    console.log(`         üìä –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(shortestDistance)}–º, –Ω–∞–≥—Ä—É–∑–∫–∞: ${best.ordersCount}‚Üí${best.ordersCount + 1}`);
                } else {
                    console.log(`      ‚ùå –í—Å–µ –∫—É—Ä—å–µ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã! –ó–∞–∫–∞–∑ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º.`);
                    continue;
                }

                try {
                    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await Order.updateOne(
                        { _id: order._id },
                        { 
                            $set: { 
                                courierAggregator: bestCourier._id,
                                status: "assigned",
                                assignedAt: new Date()
                            }
                        }
                    );

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
                    const orderData = {
                        orderId: order._id.toString(),
                        status: order.status,
                        products: order.products,
                        sum: order.sum,
                        opForm: order.opForm,
                        comment: order.comment || "",
                        clientReview: order.clientReview || "",
                        clientTitle: order.client?.fullName || "",
                        clientPhone: order.client?.phone || "",
                        date: order.date,
                        clientPoints: {
                            lat: order.address.point.lat,
                            lon: order.address.point.lon
                        },
                        clientAddress: order.address.actual,
                        clientAddressLink: order.address.link || "",
                        aquaMarketPoints: { lat: aquaMarket.point.lat, lon: aquaMarket.point.lon },
                        aquaMarketAddress: aquaMarket.address,
                        aquaMarketAddressLink: aquaMarket.link,
                        step: "toAquaMarket",
                        income: order.sum,
                        assignedAt: new Date()
                    };

                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞
                    await CourierAggregator.updateOne(
                        { _id: bestCourier._id },
                        { $push: { orders: orderData } }
                    );
                    
                    totalDistributed++;

                    console.log(`      ‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω`);

                } catch (error) {
                    console.log(`      ‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${error.message}`);
                }
            }
        }

        // 9. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log("\n" + "=".repeat(60));
        console.log("üéâ –ó–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!");
        console.log("=".repeat(60));
        console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
        console.log(`‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${totalDistributed}`);
        console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–Ω–æ –∑–æ–Ω: ${zones.length}`);
        console.log(`üë• –ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ –∫—É—Ä—å–µ—Ä–æ–≤: ${courierGroups.length}`);
        
        if (totalDistributed < orders.length) {
            console.log(`‚ö†Ô∏è –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö: ${orders.length - totalDistributed}`);
        }

        return {
            success: true,
            totalOrders: orders.length,
            distributedOrders: totalDistributed,
            zonesCreated: zones.length,
            couriersUsed: courierGroups.length,
            zones: zones.map(zone => ({
                id: zone.id,
                center: zone.center,
                ordersCount: zone.orders.length,
                radius: zone.radius
            }))
        };

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–æ–Ω–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏:", error);
        return { success: false, error: error.message };
    }
}

/**
 * üèóÔ∏è –°–û–ó–î–ê–ù–ò–ï –£–ú–ù–´–• –ó–û–ù –ù–ê –û–°–ù–û–í–ï –ü–õ–û–¢–ù–û–°–¢–ò
 */
async function createSmartZones(orders, maxDistance = 2000, minOrdersInZone = 2) {
    console.log(`\nüèóÔ∏è –°–û–ó–î–ê–ù–ò–ï –ó–û–ù–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´`);
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –º–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${maxDistance}–º, –º–∏–Ω. –∑–∞–∫–∞–∑–æ–≤ –≤ –∑–æ–Ω–µ ${minOrdersInZone}`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const sortedOrders = [...orders].sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ —à–∏—Ä–æ—Ç–µ, –ø–æ—Ç–æ–º –ø–æ –¥–æ–ª–≥–æ—Ç–µ
        if (a.address.point.lat !== b.address.point.lat) {
            return a.address.point.lat - b.address.point.lat;
        }
        return a.address.point.lon - b.address.point.lon;
    });
    
    console.log(`üìç –ó–∞–∫–∞–∑—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:`);
    sortedOrders.forEach((order, index) => {
        console.log(`   ${index + 1}. ${order.address.actual} - (${order.address.point.lat.toFixed(4)}, ${order.address.point.lon.toFixed(4)})`);
    });
    
    const clusters = [];
    const visited = new Set();
    const remainingOrders = [];

    // –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ–º –∫—Ä—É–ø–Ω—ã–µ –∑–æ–Ω—ã (–º–∏–Ω–∏–º—É–º 3 –∑–∞–∫–∞–∑–∞)
    for (let i = 0; i < sortedOrders.length; i++) {
        if (visited.has(i)) continue;

        const order = sortedOrders[i];
        const neighbors = findOrderNeighbors(sortedOrders, i, maxDistance);

        if (neighbors.length >= 3) { // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∑–æ–Ω
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä
            const cluster = {
                id: `zone_${clusters.length + 1}`,
                center: calculateOrdersCenter(sortedOrders, neighbors),
                orders: [],
                radius: 0,
                priority: 'high' // –ö—Ä—É–ø–Ω—ã–µ –∑–æ–Ω—ã –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä
            const stack = [...neighbors];
            visited.add(i);

            while (stack.length > 0) {
                const currentIdx = stack.pop();
                if (visited.has(currentIdx)) continue;

                visited.add(currentIdx);
                cluster.orders.push(sortedOrders[currentIdx]);

                const currentNeighbors = findOrderNeighbors(sortedOrders, currentIdx, maxDistance);
                if (currentNeighbors.length >= 2) { // –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    for (const neighborIdx of currentNeighbors) {
                        if (!visited.has(neighborIdx)) {
                            stack.push(neighborIdx);
                        }
                    }
                }
            }

            cluster.radius = Math.min(calculateClusterRadius(cluster.center, cluster.orders), maxDistance);
            clusters.push(cluster);
            console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∞ –∫—Ä—É–ø–Ω–∞—è –∑–æ–Ω–∞ ${cluster.id}: ${cluster.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
        }
    }

    // –≠–¢–ê–ü 2: –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è (–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ) –∑–∞–∫–∞–∑—ã
    for (let i = 0; i < sortedOrders.length; i++) {
        if (!visited.has(i)) {
            remainingOrders.push({ order: sortedOrders[i], index: i });
        }
    }

    console.log(`üì¶ –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: ${remainingOrders.length}`);

    // –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–æ–Ω—ã –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–∫–∞–∑–æ–≤ (–º–∏–Ω–∏–º—É–º 2 –∑–∞–∫–∞–∑–∞)
    const processedRemaining = new Set();
    
    for (let i = 0; i < remainingOrders.length; i++) {
        if (processedRemaining.has(i)) continue;
        
        const baseOrder = remainingOrders[i].order;
        const closeOrders = [baseOrder];
        const usedIndices = [i];
        
        // –ò—â–µ–º –±–ª–∏–∑–∫–∏–µ –∑–∞–∫–∞–∑—ã
        for (let j = i + 1; j < remainingOrders.length; j++) {
            if (processedRemaining.has(j)) continue;
            
            const distance = calculateDistance(
                baseOrder.address.point.lat,
                baseOrder.address.point.lon,
                remainingOrders[j].order.address.point.lat,
                remainingOrders[j].order.address.point.lon
            );
            
            if (distance <= maxDistance * 1.5) { // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
                closeOrders.push(remainingOrders[j].order);
                usedIndices.push(j);
            }
        }
        
        // –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        for (const idx of usedIndices) {
            processedRemaining.add(idx);
        }
        
        if (closeOrders.length >= 2) {
            // –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–æ–Ω—É
            const mediumCenter = calculateOrdersCenterFromArray(closeOrders);
            
            clusters.push({
                id: `zone_${clusters.length + 1}`,
                center: mediumCenter,
                orders: closeOrders,
                radius: Math.min(calculateClusterRadius(mediumCenter, closeOrders), maxDistance),
                priority: 'medium'
            });
            console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∞ —Å—Ä–µ–¥–Ω—è—è –∑–æ–Ω–∞ zone_${clusters.length}: ${closeOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
        } else {
            // –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ - —Å–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∑–æ–Ω—É
            clusters.push({
                id: `single_zone_${clusters.length + 1}`,
                center: {
                    lat: baseOrder.address.point.lat,
                    lon: baseOrder.address.point.lon
                },
                orders: [baseOrder],
                radius: 1000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–æ–Ω
                priority: 'low'
            });
            console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∑–æ–Ω–∞ single_zone_${clusters.length}: 1 –∑–∞–∫–∞–∑`);
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–æ–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –∑–∞—Ç–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
    clusters.sort((a, b) => {
        const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };
        const aPriority = priorityOrder[a.priority] || 1;
        const bPriority = priorityOrder[b.priority] || 1;
        
        if (aPriority !== bPriority) {
            return bPriority - aPriority;
        }
        return b.orders.length - a.orders.length;
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${clusters.length} –∑–æ–Ω:`);
    clusters.forEach(zone => {
        const priorityIcon = zone.priority === 'high' ? '‚≠ê' : zone.priority === 'medium' ? 'üî∂' : 'üè∑Ô∏è';
        console.log(`   ${priorityIcon} ${zone.id}: ${zone.orders.length} –∑–∞–∫–∞–∑–æ–≤, —Ä–∞–¥–∏—É—Å ${Math.round(zone.radius)}–º`);
    });
    
    return clusters;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
function findOrderNeighbors(orders, centerIndex, maxDistance) {
    const neighbors = [centerIndex];
    const centerOrder = orders[centerIndex];

    for (let i = 0; i < orders.length; i++) {
        if (i === centerIndex) continue;

        const distance = calculateDistance(
            centerOrder.address.point.lat,
            centerOrder.address.point.lon,
            orders[i].address.point.lat,
            orders[i].address.point.lon
        );

        if (distance <= maxDistance) {
            neighbors.push(i);
        }
    }

    return neighbors;
}

function calculateOrdersCenter(orders, indices) {
    let totalLat = 0;
    let totalLon = 0;

    for (const idx of indices) {
        totalLat += orders[idx].address.point.lat;
        totalLon += orders[idx].address.point.lon;
    }

    return {
        lat: totalLat / indices.length,
        lon: totalLon / indices.length
    };
}

function calculateOrdersCenterFromArray(orders) {
    let totalLat = 0;
    let totalLon = 0;

    for (const order of orders) {
        totalLat += order.address.point.lat;
        totalLon += order.address.point.lon;
    }

    return {
        lat: totalLat / orders.length,
        lon: totalLon / orders.length
    };
}

function calculateClusterRadius(center, orders) {
    let maxDistance = 0;

    for (const order of orders) {
        const distance = calculateDistance(
            center.lat,
            center.lon,
            order.address.point.lat,
            order.address.point.lon
        );
        maxDistance = Math.max(maxDistance, distance);
    }

    return Math.max(maxDistance, 1000);
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/crm');

// –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
console.log("üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...");

const today = getDateAlmaty();

// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ –Ω–∞—á–∞—Ç—ã—Ö –∫—É—Ä—å–µ—Ä–∞–º–∏)
const resetResult = await Order.updateMany(
    { 
        "date.d": today,
        forAggregator: true,
        status: { $nin: ["onTheWay", "delivered", "cancelled"] } // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—á–∞—Ç—ã–µ, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
    },
    { 
        $unset: { courierAggregator: "" }
    }
);

console.log(`üìä –°–±—Ä–æ—à–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${resetResult.modifiedCount} –∑–∞–∫–∞–∑–æ–≤`);

// –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —É –∫—É—Ä—å–µ—Ä–æ–≤ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º —É–∂–µ –Ω–∞—á–∞—Ç—ã–µ)
const couriersToUpdate = await CourierAggregator.find({ 
    onTheLine: true, 
    status: "active" 
});

for (const courier of couriersToUpdate) {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞—Ç—ã (–≤ —Å—Ç–∞—Ç—É—Å–µ "onTheWay")
    const activeOrders = courier.orders.filter(order => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "onTheWay" (—É–∂–µ –Ω–∞—á–∞—Ç –∫—É—Ä—å–µ—Ä–æ–º)
        return order.status && order.status === "onTheWay";
    });
    
    await CourierAggregator.updateOne(
        { _id: courier._id },
        { $set: { orders: activeOrders } }
    );
}

console.log("‚úÖ –°—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã (–Ω–∞—á–∞—Ç—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)\n");

// –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
zoneBasedDistribution().then(result => {
    console.log("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:", result);
    mongoose.disconnect();
}).catch(error => {
    console.error("–û—à–∏–±–∫–∞:", error);
    mongoose.disconnect();
}); 