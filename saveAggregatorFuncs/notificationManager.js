import mongoose from 'mongoose';
import Order from '../Models/Order.js';
import CourierAggregator from '../Models/CourierAggregator.js';
import { pushNotification } from '../pushNotification.js';
import { zoneBasedDistribution } from './optimizeRoutes.js';

/**
 * üì± –ú–ï–ù–ï–î–ñ–ï–† –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–õ–Ø –ö–£–†–¨–ï–†–û–í
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞–º –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
class NotificationManager {
    constructor() {
        this.processingCouriers = new Set(); // –ö—É—Ä—å–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        this.waitingTime = 20000; // 20 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
    }

    /**
     * üöÄ –ó–ê–ü–£–°–ö –ü–†–û–¶–ï–°–°–ê –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
     */
    async startNotificationProcess() {
        console.log("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô");
        console.log("=".repeat(60));

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏
            const couriers = await CourierAggregator.find({
                onTheLine: true,
                status: "active",
                "orders.0": { $exists: true } // –£ –∫—É—Ä—å–µ—Ä–∞ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–∫–∞–∑
            });

            if (couriers.length === 0) {
                console.log("üì≠ –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                return;
            }

            console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏: ${couriers.length}`);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const processingPromises = couriers.map(courier => 
                this.processCourierNotifications(courier)
            );

            await Promise.all(processingPromises);

            console.log("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω");

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
        }
    }

    /**
     * üë§ –û–ë–†–ê–ë–û–¢–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–õ–Ø –û–î–ù–û–ì–û –ö–£–†–¨–ï–†–ê
     */
    async processCourierNotifications(courier) {
        const courierId = courier._id.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫—É—Ä—å–µ—Ä
        if (this.processingCouriers.has(courierId)) {
            console.log(`‚è≥ –ö—É—Ä—å–µ—Ä ${courier.fullName} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è`);
            return;
        }

        this.processingCouriers.add(courierId);

        try {
            console.log(`\nüë§ –û–ë–†–ê–ë–û–¢–ö–ê –ö–£–†–¨–ï–†–ê: ${courier.fullName}`);
            console.log(`üì¶ –ó–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${courier.orders.length}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É
            for (let orderIndex = 0; orderIndex < courier.orders.length; orderIndex++) {
                const order = courier.orders[orderIndex];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - –µ—Å–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if (order.status === "onTheWay") {
                    console.log(`   ‚úÖ –ó–∞–∫–∞–∑ ${orderIndex + 1} —É–∂–µ –ø—Ä–∏–Ω—è—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }

                console.log(`   üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ ${orderIndex + 1}:`);
                console.log(`      üìç ${order.clientAddress}`);
                console.log(`      üì¶ ${this.formatProductsMessage(order.products)}`);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const notificationSent = await this.sendOrderNotification(courier, order);
                
                if (!notificationSent) {
                    console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
                    continue;
                }

                // –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥
                console.log(`   ‚è±Ô∏è –û–∂–∏–¥–∞–µ–º ${this.waitingTime / 1000} —Å–µ–∫—É–Ω–¥...`);
                await this.sleep(this.waitingTime);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                const orderAccepted = await this.checkOrderAcceptance(order.orderId);
                
                if (orderAccepted) {
                    console.log(`   ‚úÖ –ó–∞–∫–∞–∑ ${orderIndex + 1} –ø—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º!`);
                    break; // –ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                } else {
                    console.log(`   ‚ùå –ó–∞–∫–∞–∑ ${orderIndex + 1} –Ω–µ –ø—Ä–∏–Ω—è—Ç`);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–∫–∞–∑–æ–º
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –∫—É—Ä—å–µ—Ä —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–∫–∞–∑
            const courierHasActiveOrders = await this.checkCourierHasActiveOrders(courierId);
            
            if (!courierHasActiveOrders) {
                console.log(`   ‚ö†Ô∏è –ö—É—Ä—å–µ—Ä ${courier.fullName} –Ω–µ –ø—Ä–∏–Ω—è–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞`);
                await this.deactivateCourier(courierId);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName}:`, error);
        } finally {
            this.processingCouriers.delete(courierId);
        }
    }

    /**
     * üì® –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ó–ê–ö–ê–ó–ï
     */
    async sendOrderNotification(courier, order) {
        try {
            if (!courier.notificationPushToken) {
                console.log(`   ‚ùå –£ –∫—É—Ä—å–µ—Ä–∞ ${courier.fullName} –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
                return false;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            let message = this.formatProductsMessage(order.products);
            message += ` –ó–∞–±—Ä–∞—Ç—å –∏–∑ –∞–∫–≤–∞–º–∞—Ä–∫–µ—Ç–∞: ${order.aquaMarketAddress}`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await pushNotification(
                "newOrder",
                message,
                [courier.notificationPushToken],
                "newOrder",
                order
            );

            console.log(`   üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
            return true;

        } catch (error) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error);
            return false;
        }
    }

    /**
     * üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ò–ù–Ø–¢–ò–Ø –ó–ê–ö–ê–ó–ê
     */
    async checkOrderAcceptance(orderId) {
        try {
            const order = await Order.findById(orderId);
            return order && order.status === "onTheWay";
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
            return false;
        }
    }

    /**
     * üë• –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ê–ö–¢–ò–í–ù–´–• –ó–ê–ö–ê–ó–û–í –£ –ö–£–†–¨–ï–†–ê
     */
    async checkCourierHasActiveOrders(courierId) {
        try {
            const courier = await CourierAggregator.findById(courierId);
            if (!courier) return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫—É—Ä—å–µ—Ä–∞ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "onTheWay"
            const hasActiveOrders = courier.orders.some(order => order.status === "onTheWay");
            return hasActiveOrders;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞ ${courierId}:`, error);
            return false;
        }
    }

    /**
     * üî¥ –î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê
     */
    async deactivateCourier(courierId) {
        try {
            await CourierAggregator.updateOne(
                { _id: courierId },
                { 
                    $set: { 
                        status: "inactive",
                        onTheLine: false
                    }
                }
            );

            const courier = await CourierAggregator.findById(courierId);
            console.log(`   üî¥ –ö—É—Ä—å–µ—Ä ${courier.fullName} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞ ${courierId}:`, error);
        }
    }

    /**
     * üìù –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –û –ü–†–û–î–£–ö–¢–ê–•
     */
    formatProductsMessage(products) {
        let message = "";
        
        if (products?.b19 > 0) {
            message += `${products.b19} –±—É—Ç—ã–ª–µ–π 19–ª. `;
        }
        if (products?.b12 > 0) {
            message += `${products.b12} –±—É—Ç—ã–ª–µ–π 12.5–ª. `;
        }
        
        return message.trim();
    }

    /**
     * ‚è∞ –ó–ê–î–ï–†–ñ–ö–ê
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

/**
 * üéØ –¢–†–ò–ì–ì–ï–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ó–ê–ü–£–°–ö–ê
 */
class AutoTriggerManager {
    constructor() {
        this.notificationManager = new NotificationManager();
        this.isProcessing = false;
    }

    /**
     * üöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
     */
    async triggerOptimizationAndNotifications(reason = "manual") {
        if (this.isProcessing) {
            console.log("‚è≥ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return;
        }

        this.isProcessing = true;

        try {
            console.log(`üéØ –¢–†–ò–ì–ì–ï–†: ${reason}`);
            console.log("=".repeat(60));

            // 1. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤
            console.log("üó∫Ô∏è –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤...");
            const optimizationResult = await zoneBasedDistribution();

            if (!optimizationResult.success) {
                console.log("‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:", optimizationResult.message);
                return;
            }

            console.log("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            // 2. –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await this.sleep(5000);

            // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            console.log("üì± –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
            await this.notificationManager.startNotificationProcess();

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
        } finally {
            this.isProcessing = false;
        }
    }

    /**
     * üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
     */
    async startDatabaseMonitoring() {
        console.log("üîç –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ë–î");
        
        try {
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Order
            const orderChangeStream = Order.watch([
                {
                    $match: {
                        $or: [
                            { "fullDocument.forAggregator": true },
                            { "updateDescription.updatedFields.forAggregator": true }
                        ]
                    }
                }
            ]);

            orderChangeStream.on('change', async (change) => {
                console.log("üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–∫–∞–∑–∞—Ö:", change.operationType);
                
                if (change.operationType === 'insert' || 
                    (change.operationType === 'update' && change.updateDescription?.updatedFields?.forAggregator)) {
                    
                    await this.triggerOptimizationAndNotifications("new_order_for_aggregator");
                }
            });

            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ CourierAggregator
            const courierChangeStream = CourierAggregator.watch([
                {
                    $match: {
                        $or: [
                            { "updateDescription.updatedFields.onTheLine": true },
                            { "fullDocument.orders": { $exists: true } }
                        ]
                    }
                }
            ]);

            courierChangeStream.on('change', async (change) => {
                console.log("üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É –∫—É—Ä—å–µ—Ä–æ–≤:", change.operationType);
                
                if (change.operationType === 'update') {
                    const updatedFields = change.updateDescription?.updatedFields || {};
                    
                    // –ö—É—Ä—å–µ—Ä –≤—ã—à–µ–ª –Ω–∞ –ª–∏–Ω–∏—é
                    if (updatedFields.onTheLine === true) {
                        await this.triggerOptimizationAndNotifications("courier_online");
                    }
                    
                    // –ö—É—Ä—å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑ (–∏–∑–º–µ–Ω–∏–ª—Å—è –º–∞—Å—Å–∏–≤ orders)
                    if (change.updateDescription?.updatedFields && 
                        Object.keys(updatedFields).some(key => key.startsWith('orders.'))) {
                        
                        await this.triggerOptimizationAndNotifications("order_completed");
                    }
                }
            });

            console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω");

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", error);
        }
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const autoTriggerManager = new AutoTriggerManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export { NotificationManager, AutoTriggerManager, autoTriggerManager };

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    mongoose.connect('mongodb://127.0.0.1:27017/crm');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    autoTriggerManager.startDatabaseMonitoring();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    autoTriggerManager.triggerOptimizationAndNotifications("initial_startup");
} 