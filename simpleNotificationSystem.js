#!/usr/bin/env node

import mongoose from 'mongoose';
import { autoTriggerManager } from './notificationManager.js';
import Order from './Models/Order.js';
import CourierAggregator from './Models/CourierAggregator.js';

/**
 * üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–±—ã—Ç–∏–π: –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –∫—É—Ä—å–µ—Ä—ã –Ω–∞ –ª–∏–Ω–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
 */

class EventMonitor {
    constructor() {
        this.lastCheck = new Date();
        this.knownOrders = new Set();
        this.knownCouriers = new Map(); // courierID -> {onTheLine, ordersCount}
    }

    /**
     * üîç –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ó–ê–ö–ê–ó–û–í –° forAggregator = true
     */
    async checkNewOrders() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (mongoose.connection.readyState !== 1) {
                console.log("‚ö†Ô∏è MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑–æ–≤");
                return false;
            }

            const newOrders = await Order.find({
                forAggregator: true,
                createdAt: { $gt: this.lastCheck },
                status: { $nin: ["onTheWay", "delivered", "cancelled"] }
            }).maxTimeMS(5000); // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥

            if (newOrders.length > 0) {
                console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${newOrders.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞`);
                newOrders.forEach(order => {
                    console.log(`   üì¶ ${order.address?.actual || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                    this.knownOrders.add(order._id.toString());
                });
                
                await autoTriggerManager.triggerOptimizationAndNotifications("new_orders_detected");
                return true;
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:", error.message);
        }
        return false;
    }

    /**
     * üë• –ü–†–û–í–ï–†–ö–ê –ö–£–†–¨–ï–†–û–í, –í–´–®–ï–î–®–ò–• –ù–ê –õ–ò–ù–ò–Æ
     */
    async checkCouriersOnline() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (mongoose.connection.readyState !== 1) {
                console.log("‚ö†Ô∏è MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫—É—Ä—å–µ—Ä–æ–≤");
                return false;
            }

            const currentCouriers = await CourierAggregator.find({
                status: "active"
            }).maxTimeMS(5000); // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥

            let hasChanges = false;

            for (const courier of currentCouriers) {
                const courierId = courier._id.toString();
                const currentState = {
                    onTheLine: courier.onTheLine,
                    ordersCount: courier.orders?.length || 0
                };

                const previousState = this.knownCouriers.get(courierId);

                if (!previousState) {
                    // –ù–æ–≤—ã–π –∫—É—Ä—å–µ—Ä
                    this.knownCouriers.set(courierId, currentState);
                    if (currentState.onTheLine) {
                        console.log(`üë§ –ö—É—Ä—å–µ—Ä ${courier.fullName} –≤—ã—à–µ–ª –Ω–∞ –ª–∏–Ω–∏—é`);
                        hasChanges = true;
                    }
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if (!previousState.onTheLine && currentState.onTheLine) {
                        console.log(`üë§ –ö—É—Ä—å–µ—Ä ${courier.fullName} –≤—ã—à–µ–ª –Ω–∞ –ª–∏–Ω–∏—é`);
                        hasChanges = true;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
                    if (previousState.ordersCount > currentState.ordersCount) {
                        const completedOrders = previousState.ordersCount - currentState.ordersCount;
                        console.log(`‚úÖ –ö—É—Ä—å–µ—Ä ${courier.fullName} –∑–∞–≤–µ—Ä—à–∏–ª ${completedOrders} –∑–∞–∫–∞–∑–æ–≤`);
                        hasChanges = true;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    this.knownCouriers.set(courierId, currentState);
                }
            }

            if (hasChanges) {
                await autoTriggerManager.triggerOptimizationAndNotifications("courier_status_changed");
                return true;
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤:", error.message);
        }
        return false;
    }

    /**
     * üîÑ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–û–ë–´–¢–ò–ô
     */
    async checkAllEvents() {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })} (MongoDB: ${mongoose.connection.readyState === 1 ? '‚úÖ' : '‚ùå'})`);
        
        const newOrdersFound = await this.checkNewOrders();
        const courierChanges = await this.checkCouriersOnline();

        if (!newOrdersFound && !courierChanges) {
            console.log("   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.lastCheck = new Date();
    }

    /**
     * üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
     */
    async initialize() {
        console.log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π...");
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
            const existingOrders = await Order.find({
                forAggregator: true,
                status: { $nin: ["delivered", "cancelled"] }
            });
            
            existingOrders.forEach(order => {
                this.knownOrders.add(order._id.toString());
            });
            
            console.log(`   üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${existingOrders.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤`);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—å–µ—Ä–æ–≤
            const existingCouriers = await CourierAggregator.find({
                status: "active"
            });

            existingCouriers.forEach(courier => {
                this.knownCouriers.set(courier._id.toString(), {
                    onTheLine: courier.onTheLine,
                    ordersCount: courier.orders?.length || 0
                });
            });

            console.log(`   üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${existingCouriers.length} –∫—É—Ä—å–µ—Ä–æ–≤`);
            console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", error.message);
        }
    }
}

/**
 * üîå –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö MONGODB
 */
async function connectToMongoDB() {
    try {
        await mongoose.connect('mongodb://127.0.0.1:27017/crm', {
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
            maxPoolSize: 10,
            minPoolSize: 5,
            maxIdleTimeMS: 30000,
            bufferCommands: false,
            bufferMaxEntries: 0
        });
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        return true;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error.message);
        return false;
    }
}

/**
 * üîÑ –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB
 */
async function ensureMongoConnection() {
    if (mongoose.connection.readyState !== 1) {
        console.log("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...");
        await connectToMongoDB();
    }
}

async function startSimpleSystem() {
    try {
        console.log("üöÄ –ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô");
        console.log("=".repeat(60));
        console.log("üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:", new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' }));
        console.log("=".repeat(60));

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...");
        const connected = await connectToMongoDB();
        
        if (!connected) {
            console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB. –í—ã—Ö–æ–¥...");
            process.exit(1);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        mongoose.connection.on('disconnected', () => {
            console.log("‚ö†Ô∏è MongoDB –æ—Ç–∫–ª—é—á–µ–Ω");
        });

        mongoose.connection.on('reconnected', () => {
            console.log("‚úÖ MongoDB –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω");
        });

        mongoose.connection.on('error', (err) => {
            console.error("‚ùå –û—à–∏–±–∫–∞ MongoDB:", err.message);
        });

        // –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π
        const eventMonitor = new EventMonitor();
        await eventMonitor.initialize();

        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        console.log("üó∫Ô∏è –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...");
        await autoTriggerManager.triggerOptimizationAndNotifications("system_startup");

        console.log("=".repeat(60));
        console.log("‚úÖ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê");
        console.log("=".repeat(60));
        console.log("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π:");
        console.log("   üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å forAggregator: true");
        console.log("   üë§ –ö—É—Ä—å–µ—Ä—ã –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –ª–∏–Ω–∏—é (onTheLine: true)");
        console.log("   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞–º–∏");
        console.log("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥");
        console.log("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C");
        console.log("=".repeat(60));

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        const intervalId = setInterval(async () => {
            await ensureMongoConnection();
            await eventMonitor.checkAllEvents();
        }, 30 * 1000); // 30 —Å–µ–∫—É–Ω–¥

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        const cleanup = async () => {
            console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");
            clearInterval(intervalId);
            console.log("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...");
            
            try {
                await mongoose.disconnect();
                console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ");
                console.log("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
                process.exit(0);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:", error.message);
                process.exit(1);
            }
        };

        process.on('SIGINT', cleanup);
        process.on('SIGTERM', cleanup);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:", error.message);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason?.message || reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
startSimpleSystem(); 