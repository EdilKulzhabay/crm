import { runDynamicZoneDistribution } from "../utils/dynamicZoneSystem.js";
import dynamicZoneScheduler from "../utils/dynamicZoneScheduler.js";
import zoneSystemMonitor from "../utils/zoneSystemMonitor.js";

// ... existing code ...

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 */
export const getZoneSystemStats = async (req, res) => {
    try {
        const stats = await zoneSystemMonitor.getSystemStats();
        
        if (!stats) {
            return res.status(500).json({
                success: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            });
        }

        res.json({
            success: true,
            data: stats
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getZoneSystemStats:", error);
        res.status(500).json({
            success: false,
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤
 */
export const getCourierPerformance = async (req, res) => {
    try {
        const performance = await zoneSystemMonitor.getCourierPerformance();
        
        res.json({
            success: true,
            data: performance
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getCourierPerformance:", error);
        res.status(500).json({
            success: false,
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
export const getTimeAnalytics = async (req, res) => {
    try {
        const analytics = await zoneSystemMonitor.getTimeAnalytics();
        
        if (!analytics) {
            return res.status(500).json({
                success: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
            });
        }

        res.json({
            success: true,
            data: analytics
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getTimeAnalytics:", error);
        res.status(500).json({
            success: false,
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º—ã
 */
export const getSystemIssues = async (req, res) => {
    try {
        const issues = await zoneSystemMonitor.getSystemIssues();
        
        res.json({
            success: true,
            data: issues
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getSystemIssues:", error);
        res.status(500).json({
            success: false,
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
export const generateDetailedReport = async (req, res) => {
    try {
        const report = await zoneSystemMonitor.generateDetailedReport();
        
        if (!report) {
            return res.status(500).json({
                success: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
            });
        }

        res.json({
            success: true,
            data: report
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ generateDetailedReport:", error);
        res.status(500).json({
            success: false,
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
 */
export const getSchedulerStats = async (req, res) => {
    try {
        const stats = dynamicZoneScheduler.getStats();
        
        res.json({
            success: true,
            data: stats
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getSchedulerStats:", error);
        res.status(500).json({
            success: false,
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
};

/**
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
 */
export const manualDistribution = async (req, res) => {
    try {
        console.log("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API");
        
        const result = await dynamicZoneScheduler.manualDistribution();
        
        res.json({
            success: true,
            message: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ",
            data: result
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ manualDistribution:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        });
    }
};

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
 */
export const controlScheduler = async (req, res) => {
    try {
        const { action } = req.body;
        
        if (!action || !['start', 'stop', 'restart'].includes(action)) {
            return res.status(400).json({
                success: false,
                message: "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –î–æ—Å—Ç—É–ø–Ω—ã: start, stop, restart"
            });
        }

        let result;
        switch (action) {
            case 'start':
                dynamicZoneScheduler.start();
                result = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω";
                break;
            case 'stop':
                dynamicZoneScheduler.stop();
                result = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
                break;
            case 'restart':
                dynamicZoneScheduler.stop();
                setTimeout(() => {
                    dynamicZoneScheduler.start();
                }, 1000);
                result = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω";
                break;
        }

        res.json({
            success: true,
            message: result,
            data: dynamicZoneScheduler.getStats()
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ controlScheduler:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º"
        });
    }
};

// –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–∑–∞–≥–ª—É—à–∫–∏)
export const getAllZones = async (req, res) => {
    try {
        res.json({
            success: true,
            message: "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–æ–Ω",
            data: []
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getAllZones:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–æ–Ω"
        });
    }
};

export const createZone = async (req, res) => {
    try {
        res.json({
            success: true,
            message: "–ó–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞",
            data: {}
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ createZone:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–æ–Ω—ã"
        });
    }
};

export const updateZone = async (req, res) => {
    try {
        res.json({
            success: true,
            message: "–ó–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            data: {}
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ updateZone:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã"
        });
    }
};

export const deleteZone = async (req, res) => {
    try {
        res.json({
            success: true,
            message: "–ó–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞"
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ deleteZone:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã"
        });
    }
};

export const getZoneStats = async (req, res) => {
    try {
        res.json({
            success: true,
            message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–æ–Ω",
            data: {}
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getZoneStats:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        });
    }
};

export const autoCreateZones = async (req, res) => {
    try {
        res.json({
            success: true,
            message: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω",
            data: {}
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ autoCreateZones:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–æ–Ω"
        });
    }
};

export const assignCouriersToZones = async (req, res) => {
    try {
        res.json({
            success: true,
            message: "–ö—É—Ä—å–µ—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∑–æ–Ω–∞–º",
            data: {}
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ assignCouriersToZones:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–æ–≤"
        });
    }
};

export const startZoneDistribution = async (req, res) => {
    try {
        res.json({
            success: true,
            message: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –∑–æ–Ω–∞—Ö –∑–∞–ø—É—â–µ–Ω–æ",
            data: {}
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ startZoneDistribution:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        });
    }
}; 