import { 
    runDynamicZoneDistribution, 
    createDynamicZones, 
    analyzeZoneEfficiency,
    assignCouriersToZones,
    getZoneDetails,
    printZoneInfo
} from "../utils/dynamicZoneSystem.js";
import Order from "../Models/Order.js";
import CourierAggregator from "../Models/CourierAggregator.js";
import { getTodayAlmaty } from "../utils/dateUtils.js";

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
 */
export const startDynamicDistribution = async (req, res) => {
    try {
        const { date } = req.body;
        
        console.log("üéØ –ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
        
        const result = await runDynamicZoneDistribution(date);
        
        if (result.success) {
            res.json({
                success: true,
                message: `–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${result.zonesCreated} –∑–æ–Ω –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ${result.ordersDistributed} –∑–∞–∫–∞–∑–æ–≤`,
                data: result
            });
        } else {
            res.json({
                success: false,
                message: result.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
                error: result.error
            });
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ startDynamicDistribution:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        });
    }
};

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
 */
export const analyzeOrderDensity = async (req, res) => {
    try {
        const { date, maxDistance = 3000, minOrdersInZone = 3 } = req.body;
        
        const zones = await createDynamicZones(date, maxDistance, minOrdersInZone);
        
        if (zones.length === 0) {
            return res.json({
                success: false,
                message: "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω"
            });
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const analysisResult = {
            totalOrders: zones.reduce((sum, zone) => sum + zone.orders.length, 0),
            zonesCount: zones.length,
            zones: zones.map(zone => ({
                id: zone.id,
                center: {
                    lat: zone.center.lat,
                    lon: zone.center.lon
                },
                radius: Math.round(zone.radius),
                ordersCount: zone.orders.length,
                orders: zone.orders.map(order => ({
                    id: order._id,
                    address: order.address.actual,
                    coordinates: {
                        lat: order.address.point.lat,
                        lon: order.address.point.lon
                    },
                    products: order.products,
                    clientName: order.client?.fullName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                }))
            })),
            settings: {
                maxDistance,
                minOrdersInZone
            }
        };

        res.json({
            success: true,
            message: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analysisResult.totalOrders} –∑–∞–∫–∞–∑–æ–≤, –Ω–∞–π–¥–µ–Ω–æ ${zones.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω`,
            data: analysisResult
        });
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ analyzeOrderDensity:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤"
        });
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export const getZoneEfficiencyStats = async (req, res) => {
    try {
        const today = getTodayAlmaty();
        
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–æ–Ω –¥–ª—è ${today}`);
        
        const stats = await analyzeZoneEfficiency(today);
        
        if (Object.keys(stats).length === 0) {
            return res.json({
                success: false,
                message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            });
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let totalOrders = 0;
        let totalDistance = 0;
        let totalCouriers = 0;

        const courierStats = Object.values(stats).map(stat => {
            totalOrders += stat.orders.length;
            totalDistance += stat.totalDistance;
            totalCouriers++;
            
            return {
                courierName: stat.courierName,
                ordersCount: stat.orders.length,
                totalDistance: stat.totalDistance,
                averageDistance: stat.averageDistance,
                efficiency: stat.orders.length > 1 ? Math.round(stat.totalDistance / stat.orders.length) : 0
            };
        });

        const overallStats = {
            totalCouriers,
            totalOrders,
            totalDistance: Math.round(totalDistance),
            averageOrdersPerCourier: Math.round(totalOrders / totalCouriers),
            averageDistancePerCourier: Math.round(totalDistance / totalCouriers),
            courierStats: courierStats.sort((a, b) => b.ordersCount - a.ordersCount)
        };

        res.json({
            success: true,
            message: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ${totalCouriers} –∫—É—Ä—å–µ—Ä–∞–º –∏ ${totalOrders} –∑–∞–∫–∞–∑–∞–º`,
            data: overallStats
        });
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getZoneEfficiencyStats:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        });
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
 */
export const getCurrentDistributionStatus = async (req, res) => {
    try {
        const today = getTodayAlmaty();
        
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è ${today}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const totalOrders = await Order.countDocuments({
            "date.d": today,
            status: { $nin: ["delivered", "cancelled"] }
        });

        // –ó–∞–∫–∞–∑—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞–º-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞–º
        const assignedOrders = await Order.countDocuments({
            "date.d": today,
            courierAggregator: { $exists: true, $ne: null },
            status: { $nin: ["delivered", "cancelled"] }
        });

        // –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ
        const inProgressOrders = await Order.countDocuments({
            "date.d": today,
            status: "onTheWay"
        });

        // –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        const deliveredOrders = await Order.countDocuments({
            "date.d": today,
            status: "delivered"
        });

        // –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã
        const activeCouriers = await CourierAggregator.countDocuments({
            onTheLine: true,
            status: "active"
        });

        // –ö—É—Ä—å–µ—Ä—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
        const busyCouriers = await CourierAggregator.countDocuments({
            onTheLine: true,
            status: "active",
            "orders.0": { $exists: true }
        });

        const status = {
            ordersStats: {
                total: totalOrders,
                assigned: assignedOrders,
                inProgress: inProgressOrders,
                delivered: deliveredOrders,
                unassigned: totalOrders - assignedOrders,
                assignmentRate: totalOrders > 0 ? Math.round((assignedOrders / totalOrders) * 100) : 0
            },
            couriersStats: {
                active: activeCouriers,
                busy: busyCouriers,
                free: activeCouriers - busyCouriers,
                utilizationRate: activeCouriers > 0 ? Math.round((busyCouriers / activeCouriers) * 100) : 0
            },
            timestamp: new Date().toISOString()
        };

        res.json({
            success: true,
            message: "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            data: status
        });
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getCurrentDistributionStatus:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        });
    }
};

/**
 * –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
 */
export const redistributeOrders = async (req, res) => {
    try {
        const { orderId, reason } = req.body;
        
        console.log(`üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${orderId}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
        
        if (orderId) {
            // –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑
            const order = await Order.findById(orderId);
            if (!order) {
                return res.json({
                    success: false,
                    message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                });
            }

            // –£–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑ —É —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (order.courierAggregator) {
                await CourierAggregator.updateOne(
                    { _id: order.courierAggregator },
                    { $pull: { orders: { orderId: orderId } } }
                );
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            await Order.updateOne(
                { _id: orderId },
                { 
                    $unset: { courierAggregator: "" },
                    $set: { status: "awaitingOrder" }
                }
            );

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            const result = await runDynamicZoneDistribution();
            
            res.json({
                success: true,
                message: `–ó–∞–∫–∞–∑ ${orderId} –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω`,
                data: result
            });
        } else {
            // –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
            const result = await runDynamicZoneDistribution();
            
            res.json({
                success: result.success,
                message: result.success ? 
                    `–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ${result.ordersDistributed} –∑–∞–∫–∞–∑–æ–≤ –≤ ${result.zonesCreated} –∑–æ–Ω–∞—Ö` :
                    result.message,
                data: result
            });
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ redistributeOrders:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤"
        });
    }
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export const updateZoneSettings = async (req, res) => {
    try {
        const { 
            maxDistance = 3000, 
            minOrdersInZone = 3, 
            maxOrdersPerCourier = 4,
            autoRedistribute = true 
        } = req.body;

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const settings = {
            maxDistance,
            minOrdersInZone,
            maxOrdersPerCourier,
            autoRedistribute,
            updatedAt: new Date().toISOString()
        };

        res.json({
            success: true,
            message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            data: settings
        });
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ updateZoneSettings:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        });
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–æ–Ω–∞—Ö
 */
export const getZoneDetailsAPI = async (req, res) => {
    try {
        const { date } = req.query;
        
        console.log("üó∫Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–∞—Ö");
        
        const result = await getZoneDetails(date);
        
        if (result.success) {
            res.json({
                success: true,
                message: result.message,
                data: result
            });
        } else {
            res.json({
                success: false,
                message: result.message,
                data: { zones: [] }
            });
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getZoneDetailsAPI:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–æ–Ω"
        });
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä—ã –∑–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 */
export const getZoneCenters = async (req, res) => {
    try {
        const { date } = req.query;
        const today = date || getTodayAlmaty();
        
        console.log(`üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤ –∑–æ–Ω –¥–ª—è ${today}`);
        
        const result = await getZoneDetails(today);
        
        if (result.success) {
            const centers = result.zones.map(zone => ({
                id: zone.id,
                courierName: zone.courier.name,
                center: zone.center,
                centerAddress: zone.centerAddress,
                radius: zone.radius,
                ordersCount: zone.ordersCount,
                status: zone.courier.status
            }));
            
            res.json({
                success: true,
                message: `–ù–∞–π–¥–µ–Ω–æ ${centers.length} —Ü–µ–Ω—Ç—Ä–æ–≤ –∑–æ–Ω`,
                data: {
                    date: today,
                    totalZones: centers.length,
                    centers: centers
                }
            });
        } else {
            res.json({
                success: false,
                message: result.message,
                data: { centers: [] }
            });
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ getZoneCenters:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ –∑–æ–Ω"
        });
    }
};

export const getDynamicZoneStats = async (req, res) => {
    try {
        const today = getTodayAlmaty();
        
        const totalOrders = await Order.countDocuments({ "date.d": today });
        const assignedOrders = await Order.countDocuments({ 
            "date.d": today,
            courier: { $exists: true, $ne: null }
        });
        
        res.json({
            success: true,
            data: {
                date: today,
                totalOrders,
                assignedOrders,
                assignmentRate: totalOrders > 0 ? (assignedOrders / totalOrders * 100).toFixed(2) : 0
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–æ–Ω:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        });
    }
};

export const optimizeZones = async (req, res) => {
    try {
        const today = getTodayAlmaty();
        
        console.log(`üîÑ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω –¥–ª—è ${today}`);
        
        // –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω
        const result = await runDynamicZoneDistribution();
        
        res.json({
            success: true,
            message: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            data: result
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ optimizeZones:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω"
        });
    }
};

/**
 * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
export const printZonesConsole = async (req, res) => {
    try {
        const { date } = req.query;
        
        console.log("üñ®Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–∞—Ö –≤ –∫–æ–Ω—Å–æ–ª—å");
        
        const result = await getZoneDetails(date);
        
        if (result.success) {
            printZoneInfo(result.zones);
            
            res.json({
                success: true,
                message: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${result.zones.length} –∑–æ–Ω–∞—Ö –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞`,
                data: {
                    zonesCount: result.zones.length,
                    ordersCount: result.summary.totalOrders,
                    date: result.date
                }
            });
        } else {
            console.log("üìç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
            res.json({
                success: false,
                message: result.message
            });
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ printZonesConsole:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–∞—Ö"
        });
    }
};