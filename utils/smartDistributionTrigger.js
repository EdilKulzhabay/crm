import { runDynamicZoneDistribution } from "./dynamicZoneSystem.js";
import Order from "../Models/Order.js";
import CourierAggregator from "../Models/CourierAggregator.js";
import { getTodayAlmaty } from "./dateUtils.js";

/**
 * –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
 */
export async function onNewOrderAdded(orderId) {
    try {
        console.log(`üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω: ${orderId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        const unassignedOrders = await Order.countDocuments({
            status: { $nin: ["delivered", "cancelled", "onTheWay"] },
            courierAggregator: { $exists: false },
            forAggregator: true
        });

        // –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–∫–∞–∑–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if (unassignedOrders >= 5) {
            console.log(`üéØ –ù–∞–∫–æ–ø–∏–ª–æ—Å—å ${unassignedOrders} –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - –∑–∞–ø—É—Å–∫ –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã`);
            await runDynamicZoneDistribution();
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ onNewOrderAdded:", error);
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ –ª–∏–Ω–∏—é
 */
export async function onCourierGoesOnline(courierId) {
    try {
        console.log(`üë®‚Äçüíº –ö—É—Ä—å–µ—Ä –≤—ã—à–µ–ª –Ω–∞ –ª–∏–Ω–∏—é: ${courierId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        const unassignedOrders = await Order.countDocuments({
            status: { $nin: ["delivered", "cancelled", "onTheWay"] },
            courierAggregator: { $exists: false },
            forAggregator: true
        });

        if (unassignedOrders > 0) {
            console.log(`üîÑ –ï—Å—Ç—å ${unassignedOrders} –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º`);
            await runDynamicZoneDistribution();
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ onCourierGoesOnline:", error);
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º
 */
export async function onOrderCompleted(orderId, courierId) {
    try {
        console.log(`‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${orderId} –∫—É—Ä—å–µ—Ä–æ–º ${courierId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∫—É—Ä—å–µ—Ä–∞ –µ—â–µ –∑–∞–∫–∞–∑—ã
        const courier = await CourierAggregator.findById(courierId);
        
        if (courier && courier.orders.length === 0) {
            // –ö—É—Ä—å–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            const unassignedOrders = await Order.countDocuments({
                status: { $nin: ["delivered", "cancelled", "onTheWay"] },
                courierAggregator: { $exists: false },
                forAggregator: true
            });

            if (unassignedOrders > 0) {
                console.log(`üîÑ –ö—É—Ä—å–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω, –µ—Å—Ç—å ${unassignedOrders} –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
                await runDynamicZoneDistribution();
            }
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ onOrderCompleted:", error);
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º
 */
export async function onOrderRejected(orderId, courierId, reason) {
    try {
        console.log(`‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${orderId} –∫—É—Ä—å–µ—Ä–æ–º ${courierId}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        await Order.updateOne(
            { _id: orderId },
            { 
                $unset: { courierAggregator: "" },
                $set: { status: "awaitingOrder" }
            }
        );

        // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–∞
        await CourierAggregator.updateOne(
            { _id: courierId },
            { $pull: { orders: { orderId: orderId } } }
        );

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        console.log("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞");
        await runDynamicZoneDistribution();
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ onOrderRejected:", error);
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
 */
export async function onOrderStatusChanged(orderId, newStatus, oldStatus) {
    try {
        console.log(`üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω: ${orderId} —Å '${oldStatus}' –Ω–∞ '${newStatus}'`);
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫—É—Ä—å–µ—Ä–∞
        if (newStatus === "cancelled" || newStatus === "delivered") {
            const order = await Order.findById(orderId);
            if (order && order.courierAggregator) {
                await CourierAggregator.updateOne(
                    { _id: order.courierAggregator },
                    { $pull: { orders: { orderId: orderId } } }
                );

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Å–≤–æ–±–æ–¥–∏–≤—à–µ–≥–æ—Å—è –∫—É—Ä—å–µ—Ä–∞
                const unassignedOrders = await Order.countDocuments({
                    status: { $nin: ["delivered", "cancelled", "onTheWay"] },
                    courierAggregator: { $exists: false },
                    forAggregator: true
                });

                if (unassignedOrders > 0) {
                    console.log(`üîÑ –ö—É—Ä—å–µ—Ä –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è, –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º ${unassignedOrders} –∑–∞–∫–∞–∑–æ–≤`);
                    await runDynamicZoneDistribution();
                }
            }
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ onOrderStatusChanged:", error);
    }
}

/**
 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–æ–Ω
 */
export async function periodicZoneOptimization() {
    try {
        console.log("üîç –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–æ–Ω");
        
        const today = getTodayAlmaty();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–∫–∞–∑–∞–º
        const activeOrders = await Order.countDocuments({
            "date.d": today,
            status: { $nin: ["delivered", "cancelled"] },
            forAggregator: true
        });

        const assignedOrders = await Order.countDocuments({
            "date.d": today,
            courierAggregator: { $exists: true, $ne: null },
            status: { $nin: ["delivered", "cancelled"] },
            forAggregator: true
        });

        const assignmentRate = activeOrders > 0 ? (assignedOrders / activeOrders) * 100 : 100;

        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${activeOrders} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, ${assignedOrders} –Ω–∞–∑–Ω–∞—á–µ–Ω–æ (${assignmentRate.toFixed(1)}%)`);

        // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∑–∫–∏–π - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        if (assignmentRate < 80 && activeOrders > 0) {
            console.log("‚ö° –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏");
            await runDynamicZoneDistribution();
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ periodicZoneOptimization:", error);
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
 */
export async function shouldTriggerZoneSystem() {
    try {
        const today = getTodayAlmaty();

        console.log("today = ", today);
        
        const unassignedOrders = await Order.countDocuments({
            "date.d": today,
            status: { $nin: ["delivered", "cancelled", "onTheWay"] },
            courierAggregator: null,
            forAggregator: true
        });

        const activeCouriers = await CourierAggregator.countDocuments({
            onTheLine: true,
            status: "active",
            forAggregator: true
        });

        return {
            shouldTrigger: unassignedOrders > 0 && activeCouriers > 0,
            unassignedOrders,
            activeCouriers,
            reason: unassignedOrders === 0 ? "–ù–µ—Ç –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤" :
                   activeCouriers === 0 ? "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤" : "–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
        };
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ shouldTriggerZoneSystem:", error);
        return { shouldTrigger: false, reason: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏" };
    }
} 