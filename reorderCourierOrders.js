import mongoose from 'mongoose';
import CourierAggregator from './Models/CourierAggregator.js';

/**
 * üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–†–Ø–î–ö–ê –ó–ê–ö–ê–ó–û–í –£ –ö–£–†–¨–ï–†–ê
 * –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
 */
async function reorderCourierOrders() {
    try {
        console.log('üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–†–Ø–î–ö–ê –ó–ê–ö–ê–ó–û–í –£ –ö–£–†–¨–ï–†–ê');
        console.log('='.repeat(50));

        // ID –∫—É—Ä—å–µ—Ä–∞
        const courierId = '683dd48b54ed3e4c0adcc241';
        
        // ID –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
        const orderToPosition2 = '68626cc548cdb02bd0ba39b3'; // –ê–¥–º —Å—É–¥ –∫–∞–±-111 –∏ 210
        const orderToPosition6 = '6862a9ed48cdb02bd0ba6d1e'; // –ê–∫–∞–¥–µ–º–∏—è –∏–º. –ñ—É—Ä–≥–µ–Ω–æ–≤–∞

        console.log(`üë§ –ö—É—Ä—å–µ—Ä ID: ${courierId}`);
        console.log(`üì¶ –ó–∞–∫–∞–∑ –Ω–∞ 2-–µ –º–µ—Å—Ç–æ: ${orderToPosition2}`);
        console.log(`üì¶ –ó–∞–∫–∞–∑ –Ω–∞ 6-–µ –º–µ—Å—Ç–æ: ${orderToPosition6}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        const courier = await CourierAggregator.findById(courierId);
        
        if (!courier) {
            console.log('‚ùå –ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        console.log(`\nüìã –¢–µ–∫—É—â–∏–π –∫—É—Ä—å–µ—Ä: ${courier.fullName}`);
        console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${courier.orders.length}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫
        console.log('\nüìã –¢–ï–ö–£–©–ò–ô –ü–û–†–Ø–î–û–ö –ó–ê–ö–ê–ó–û–í:');
        courier.orders.forEach((order, index) => {
            const isTarget1 = order.orderId === orderToPosition2;
            const isTarget2 = order.orderId === orderToPosition6;
            const marker = isTarget1 ? ' üéØ‚û°Ô∏è2' : isTarget2 ? ' üéØ‚û°Ô∏è6' : '';
            console.log(`   ${index + 1}. ${order.orderId} - ${order.clientTitle}${marker}`);
        });

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
        let newOrders = [...courier.orders];

        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        const order1Index = newOrders.findIndex(order => order.orderId === orderToPosition2);
        const order2Index = newOrders.findIndex(order => order.orderId === orderToPosition6);

        if (order1Index === -1) {
            console.log(`‚ùå –ó–∞–∫–∞–∑ ${orderToPosition2} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
            return;
        }

        if (order2Index === -1) {
            console.log(`‚ùå –ó–∞–∫–∞–∑ ${orderToPosition6} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
            return;
        }

        console.log(`\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò:`);
        console.log(`   –ó–∞–∫–∞–∑ ${orderToPosition2} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${order1Index + 1}`);
        console.log(`   –ó–∞–∫–∞–∑ ${orderToPosition6} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${order2Index + 1}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã
        const order1 = newOrders[order1Index];
        const order2 = newOrders[order2Index];

        // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π (—É–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—Ç, —á—Ç–æ —Å –±–æ–ª—å—à–∏–º –∏–Ω–¥–µ–∫—Å–æ–º)
        if (order1Index > order2Index) {
            newOrders.splice(order1Index, 1);
            newOrders.splice(order2Index, 1);
        } else {
            newOrders.splice(order2Index, 1);
            newOrders.splice(order1Index, 1);
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        newOrders.splice(1, 0, order1); // –í—Å—Ç–∞–≤–ª—è–µ–º order1 –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 2 (–∏–Ω–¥–µ–∫—Å 1)
        newOrders.splice(5, 0, order2); // –í—Å—Ç–∞–≤–ª—è–µ–º order2 –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 6 (–∏–Ω–¥–µ–∫—Å 5)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
        console.log('\nüìã –ù–û–í–´–ô –ü–û–†–Ø–î–û–ö –ó–ê–ö–ê–ó–û–í:');
        newOrders.forEach((order, index) => {
            const isTarget1 = order.orderId === orderToPosition2;
            const isTarget2 = order.orderId === orderToPosition6;
            const marker = isTarget1 ? ' ‚úÖ (–ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ 2-–µ –º–µ—Å—Ç–æ)' : 
                          isTarget2 ? ' ‚úÖ (–ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ 6-–µ –º–µ—Å—Ç–æ)' : '';
            console.log(`   ${index + 1}. ${order.orderId} - ${order.clientTitle}${marker}`);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const result = await CourierAggregator.updateOne(
            { _id: courierId },
            { $set: { orders: newOrders } }
        );

        if (result.modifiedCount > 0) {
            console.log('\n‚úÖ –ü–û–†–Ø–î–û–ö –ó–ê–ö–ê–ó–û–í –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–ï–ù!');
            console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${result.modifiedCount}`);
        } else {
            console.log('\n‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const updatedCourier = await CourierAggregator.findById(courierId);
        console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
        
        const finalOrder1Position = updatedCourier.orders.findIndex(order => order.orderId === orderToPosition2) + 1;
        const finalOrder2Position = updatedCourier.orders.findIndex(order => order.orderId === orderToPosition6) + 1;
        
        console.log(`   –ó–∞–∫–∞–∑ ${orderToPosition2} —Ç–µ–ø–µ—Ä—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${finalOrder1Position} ${finalOrder1Position === 2 ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –ó–∞–∫–∞–∑ ${orderToPosition6} —Ç–µ–ø–µ—Ä—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${finalOrder2Position} ${finalOrder2Position === 6 ? '‚úÖ' : '‚ùå'}`);

        console.log('\nüéâ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', error);
    }
}

/**
 * üìä –ü–û–ö–ê–ó–ê–¢–¨ –¢–ï–ö–£–©–ò–ô –ü–û–†–Ø–î–û–ö –ó–ê–ö–ê–ó–û–í
 */
async function showCurrentOrder(courierId = '683dd48b54ed3e4c0adcc241') {
    try {
        const courier = await CourierAggregator.findById(courierId);
        
        if (!courier) {
            console.log('‚ùå –ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        console.log(`\nüë§ –ö—É—Ä—å–µ—Ä: ${courier.fullName}`);
        console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${courier.orders.length}`);
        console.log('\nüìã –ü–û–†–Ø–î–û–ö –ó–ê–ö–ê–ó–û–í:');
        
        courier.orders.forEach((order, index) => {
            console.log(`   ${index + 1}. ${order.orderId} - ${order.clientTitle}`);
            console.log(`      üìç ${order.clientAddress}`);
            console.log(`      üí∞ ${order.sum} —Ç–µ–Ω–≥–µ (${order.opForm})`);
            console.log('');
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
async function main() {
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        await mongoose.connect('mongodb://localhost:27017/crm');
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫
        console.log('üìã –¢–ï–ö–£–©–ò–ô –ü–û–†–Ø–î–û–ö –ó–ê–ö–ê–ó–û–í:');
        await showCurrentOrder();

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É
        await reorderCourierOrders();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
        console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –ü–û–†–Ø–î–û–ö –ó–ê–ö–ê–ó–û–í:');
        await showCurrentOrder();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await mongoose.disconnect();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export { reorderCourierOrders, showCurrentOrder };

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
} 