const mongoose = require('mongoose');
const CourierAggregator = require('./Models/CourierAggregator');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb://localhost:27017/crm', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

async function redistributeOrders() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...\n');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        const couriers = await CourierAggregator.find({onTheLine: true});
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${couriers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤\n`);

        // –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∞–º
        const vasiliy = couriers.find(c => c.fullName === '–í–∞—Å–∏–ª–∏–π –Ø–∫–æ–≤–ª–µ–≤');
        const beket = couriers.find(c => c.fullName === '–ë–µ–∫–µ—Ç –°–∞–ø–∞—Ä–±–∞–µ–≤');
        const taskyn = couriers.find(c => c.fullName === '–¢–∞—Å“õ—ã–Ω ”ò–±—ñ–∫–µ–Ω');

        if (!vasiliy || !beket || !taskyn) {
            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—É—Ä—å–µ—Ä—ã');
            return;
        }

        console.log('üë• –ù–∞–π–¥–µ–Ω—ã –∫—É—Ä—å–µ—Ä—ã:');
        console.log(`   - –í–∞—Å–∏–ª–∏–π –Ø–∫–æ–≤–ª–µ–≤: ${vasiliy._id}`);
        console.log(`   - –ë–µ–∫–µ—Ç –°–∞–ø–∞—Ä–±–∞–µ–≤: ${beket._id}`);
        console.log(`   - –¢–∞—Å“õ—ã–Ω ”ò–±—ñ–∫–µ–Ω: ${taskyn._id}\n`);

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ç –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        const allOrders = [];
        couriers.forEach(courier => {
            courier.orders.forEach(order => {
                allOrders.push({
                    ...order.toObject(),
                    currentCourier: courier.fullName
                });
            });
        });

        console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${allOrders.length}\n`);

        // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        const orderForVasiliy1 = allOrders.find(o => o.orderId === '68636a8848cdb02bd0ba8deb');
        const orderForVasiliy2 = allOrders.find(o => o.orderId === '68636e0948cdb02bd0ba97df');
        const orderForBeket1 = allOrders.find(o => o.orderId === '68634eb248cdb02bd0ba7e7a');
        const orderForBeket2 = allOrders.find(o => o.orderId === '6862557048cdb02bd0ba091c');
        const orderForTaskyn = allOrders.find(o => o.orderId === '6862a9ed48cdb02bd0ba6d1e');

        console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:');
        console.log(`   - –î–ª—è –í–∞—Å–∏–ª–∏—è: ${orderForVasiliy1 ? orderForVasiliy1.clientTitle : '–ù–ï –ù–ê–ô–î–ï–ù'} (${orderForVasiliy1 ? orderForVasiliy1.currentCourier : 'N/A'})`);
        console.log(`   - –î–ª—è –í–∞—Å–∏–ª–∏—è: ${orderForVasiliy2 ? orderForVasiliy2.clientTitle : '–ù–ï –ù–ê–ô–î–ï–ù'} (${orderForVasiliy2 ? orderForVasiliy2.currentCourier : 'N/A'})`);
        console.log(`   - –î–ª—è –ë–µ–∫–µ—Ç–∞: ${orderForBeket1 ? orderForBeket1.clientTitle : '–ù–ï –ù–ê–ô–î–ï–ù'} (${orderForBeket1 ? orderForBeket1.currentCourier : 'N/A'})`);
        console.log(`   - –î–ª—è –ë–µ–∫–µ—Ç–∞: ${orderForBeket2 ? orderForBeket2.clientTitle : '–ù–ï –ù–ê–ô–î–ï–ù'} (${orderForBeket2 ? orderForBeket2.currentCourier : 'N/A'})`);
        console.log(`   - –î–ª—è –¢–∞—Å–∫—ã–Ω–∞: ${orderForTaskyn ? orderForTaskyn.clientTitle : '–ù–ï –ù–ê–ô–î–ï–ù'} (${orderForTaskyn ? orderForTaskyn.currentCourier : 'N/A'})\n`);

        // –û—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑—ã —É –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        await CourierAggregator.updateMany(
            {onTheLine: true},
            {$set: {orders: []}}
        );

        console.log('üßπ –û—á–∏—Å—Ç–∏–ª–∏ –∑–∞–∫–∞–∑—ã —É –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤\n');

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        const newOrders = {
            [vasiliy._id]: [orderForVasiliy1, orderForVasiliy2].filter(Boolean),
            [beket._id]: [orderForBeket1, orderForBeket2].filter(Boolean),
            [taskyn._id]: [orderForTaskyn].filter(Boolean)
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        for (const [courierId, orders] of Object.entries(newOrders)) {
            if (orders.length > 0) {
                await CourierAggregator.findByIdAndUpdate(
                    courierId,
                    {$set: {orders: orders}}
                );
                
                const courierName = couriers.find(c => c._id.toString() === courierId).fullName;
                console.log(`‚úÖ ${courierName}: –Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
                orders.forEach(order => {
                    console.log(`   - ${order.clientTitle} (${order.orderId})`);
                });
                console.log();
            }
        }

        console.log('üéâ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    } finally {
        mongoose.connection.close();
    }
}

async function showCurrentDistribution() {
    try {
        console.log('üìä –¢–ï–ö–£–©–ï–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í:\n');
        
        const couriers = await CourierAggregator.find({onTheLine: true});
        
        couriers.forEach(courier => {
            console.log(`üë§ ${courier.fullName}:`);
            if (courier.orders.length === 0) {
                console.log('   - –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
            } else {
                courier.orders.forEach((order, index) => {
                    console.log(`   ${index + 1}. ${order.clientTitle} (${order.orderId})`);
                });
            }
            console.log();
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
    }
}

async function main() {
    console.log('üöÄ –°–ö–†–ò–ü–¢ –ü–ï–†–ï–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–û–í\n');
    
    await showCurrentDistribution();
    await redistributeOrders();
    
    console.log('\n' + '='.repeat(50));
    console.log('üìã –ò–¢–û–ì–û–í–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:');
    console.log('='.repeat(50));
    await showCurrentDistribution();
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
    redistributeOrders,
    showCurrentDistribution
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}