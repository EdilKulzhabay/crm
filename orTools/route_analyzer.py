#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤
"""

import math
import json

def haversine(lat1, lon1, lat2, lon2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–º"""
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    d_lat = math.radians(lat2 - lat1)
    d_lon = math.radians(lon2 - lon1)
    a = (
        math.sin(d_lat/2) ** 2 +
        math.cos(math.radians(lat1)) *
        math.cos(math.radians(lat2)) *
        math.sin(d_lon/2) ** 2
    )
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

def calculate_route_distance(courier_pos, order_positions):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
    if not order_positions:
        return 0
    
    total_distance = 0
    current_pos = courier_pos
    
    for order_pos in order_positions:
        distance = haversine(current_pos['lat'], current_pos['lon'], 
                           order_pos['lat'], order_pos['lon'])
        total_distance += distance
        current_pos = order_pos
    
    return total_distance

# –î–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–æ–≤
couriers = {
    'courier_2': {'lat': 43.2044094, 'lon': 76.893334},
    'courier_3': {'lat': 43.215678, 'lon': 76.912345}
}

# –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
orders = {
    'order_1': {'lat': 43.292268, 'lon': 76.931119},
    'order_2': {'lat': 43.261362, 'lon': 76.929122},
    'order_4': {'lat': 43.228644, 'lon': 76.866358},
    'order_6': {'lat': 43.254082, 'lon': 76.918261},
    'order_8': {'lat': 43.237369, 'lon': 76.938627},
    'order_9': {'lat': 43.252214, 'lon': 76.90054},
    'order_14': {'lat': 43.234567, 'lon': 76.912345},
    'order_15': {'lat': 43.212045, 'lon': 76.872848},
    'order_17': {'lat': 43.264191, 'lon': 76.932518},
    'order_18': {'lat': 43.245678, 'lon': 76.887654},
    'order_20': {'lat': 43.242453, 'lon': 76.9409},
    'order_21': {'lat': 43.234567, 'lon': 76.923456}
}

print("=== –ê–ù–ê–õ–ò–ó –ú–ê–†–®–†–£–¢–û–í ===")
print()

# –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–∏–∑ OR-Tools)
print("1. –¢–ï–ö–£–©–ï–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï (OR-Tools):")
current_courier2_orders = ['order_15', 'order_4', 'order_14', 'order_21', 'order_8', 'order_20']
current_courier3_orders = ['order_18', 'order_9', 'order_6', 'order_2', 'order_17', 'order_1']

courier2_positions = [orders[order_id] for order_id in current_courier2_orders]
courier3_positions = [orders[order_id] for order_id in current_courier3_orders]

current_courier2_distance = calculate_route_distance(couriers['courier_2'], courier2_positions)
current_courier3_distance = calculate_route_distance(couriers['courier_3'], courier3_positions)

print(f"Courier_2: {current_courier2_orders}")
print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {current_courier2_distance:.2f} –∫–º")
print(f"Courier_3: {current_courier3_orders}")
print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {current_courier3_distance:.2f} –∫–º")
print(f"  –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {current_courier2_distance + current_courier3_distance:.2f} –∫–º")
print()

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
print("2. –ü–†–ï–î–õ–û–ñ–ï–ù–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
proposed_courier2_orders = ['order_15', 'order_4', 'order_18', 'order_9', 'order_6']  # –£–±—Ä–∞–ª –¥—É–±–ª–∏—Ä—É—é—â–∏–π order_6
proposed_courier3_orders = ['order_14', 'order_21', 'order_8', 'order_20', 'order_17', 'order_1', 'order_2']  # –î–æ–±–∞–≤–∏–ª order_2

courier2_positions_new = [orders[order_id] for order_id in proposed_courier2_orders]
courier3_positions_new = [orders[order_id] for order_id in proposed_courier3_orders]

proposed_courier2_distance = calculate_route_distance(couriers['courier_2'], courier2_positions_new)
proposed_courier3_distance = calculate_route_distance(couriers['courier_3'], courier3_positions_new)

print(f"Courier_2: {proposed_courier2_orders}")
print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {proposed_courier2_distance:.2f} –∫–º")
print(f"Courier_3: {proposed_courier3_orders}")
print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {proposed_courier3_distance:.2f} –∫–º")
print(f"  –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {proposed_courier2_distance + proposed_courier3_distance:.2f} –∫–º")
print()

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
print("3. –°–†–ê–í–ù–ï–ù–ò–ï:")
current_total = current_courier2_distance + current_courier3_distance
proposed_total = proposed_courier2_distance + proposed_courier3_distance
difference = proposed_total - current_total

print(f"–¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ:     {current_total:.2f} –∫–º")
print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {proposed_total:.2f} –∫–º")
print(f"–†–∞–∑–Ω–∏—Ü–∞:             {difference:+.2f} –∫–º")

if difference < 0:
    print(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –õ–£–ß–®–ï –Ω–∞ {abs(difference):.2f} –∫–º!")
elif difference > 0:
    print(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –•–£–ñ–ï –Ω–∞ {difference:.2f} –∫–º")
else:
    print("ü§î –†–µ—à–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é")

print()

# –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
print("4. –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò:")
print(f"–¢–µ–∫—É—â–µ–µ:     Courier_2: {len(current_courier2_orders)} –∑–∞–∫–∞–∑–æ–≤, Courier_3: {len(current_courier3_orders)} –∑–∞–∫–∞–∑–æ–≤")
print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ: Courier_2: {len(proposed_courier2_orders)} –∑–∞–∫–∞–∑–æ–≤, Courier_3: {len(proposed_courier3_orders)} –∑–∞–∫–∞–∑–æ–≤")

current_balance = abs(len(current_courier2_orders) - len(current_courier3_orders))
proposed_balance = abs(len(proposed_courier2_orders) - len(proposed_courier3_orders))

print(f"–î–∏—Å–±–∞–ª–∞–Ω—Å - –¢–µ–∫—É—â–∏–π: {current_balance}, –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π: {proposed_balance}")

if proposed_balance < current_balance:
    print("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ª—É—á—à–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ!")
elif proposed_balance > current_balance:
    print("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ö—É–∂–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ")
else:
    print("ü§î –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è")

print()

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
print("5. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–•–û–î–û–í:")
print()

def analyze_route_details(courier_name, courier_pos, order_ids):
    print(f"{courier_name}:")
    print(f"  –°—Ç–∞—Ä—Ç: ({courier_pos['lat']:.3f}, {courier_pos['lon']:.3f})")
    
    current_pos = courier_pos
    total_distance = 0
    
    for i, order_id in enumerate(order_ids):
        order_pos = orders[order_id]
        distance = haversine(current_pos['lat'], current_pos['lon'], 
                           order_pos['lat'], order_pos['lon'])
        total_distance += distance
        
        print(f"  {i+1}. {order_id}: ({order_pos['lat']:.3f}, {order_pos['lon']:.3f}) - {distance:.2f} –∫–º")
        current_pos = order_pos
    
    print(f"  –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance:.2f} –∫–º")
    print()

print("–¢–ï–ö–£–©–ò–ï –ú–ê–†–®–†–£–¢–´:")
analyze_route_details("Courier_2", couriers['courier_2'], current_courier2_orders)
analyze_route_details("Courier_3", couriers['courier_3'], current_courier3_orders)

print("–ü–†–ï–î–õ–û–ñ–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´:")
analyze_route_details("Courier_2", couriers['courier_2'], proposed_courier2_orders)
analyze_route_details("Courier_3", couriers['courier_3'], proposed_courier3_orders) 