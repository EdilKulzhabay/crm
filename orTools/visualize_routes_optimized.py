#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
"""

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import FancyBboxPatch
import matplotlib.patches as mpatches
import os
import sys
import json

input_data = json.load(sys.stdin)

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if os.path.exists('vrp_routes_visualization.png'):
    os.remove('vrp_routes_visualization.png')
    print("–°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω")

# –û–±—â–∞—è —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
common_depot = {"id": "depot", "lat": 43.16857, "lon": 76.89642}

couriers = input_data["couriers"]
orders = input_data["orders"]
routes = input_data["routes"]
# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
orders_dict = {order['id']: order for order in orders}
couriers_dict = {courier['id']: courier for courier in couriers}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
plt.figure(figsize=(15, 12))
colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown']

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–π –¥–µ–ø–æ
plt.scatter(common_depot['lon'], common_depot['lat'], 
           c='black', s=200, marker='s', 
           label=f'–û–±—â–∏–π –¥–µ–ø–æ ({common_depot["lat"]:.3f}, {common_depot["lon"]:.3f})', 
           zorder=10)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–æ–≤
for i, courier in enumerate(couriers):
    plt.scatter(courier['lon'], courier['lat'], 
               c=colors[i], s=150, marker='^', 
               label=f'{courier["id"]} —Å—Ç–∞—Ä—Ç ({courier["lat"]:.3f}, {courier["lon"]:.3f})', 
               zorder=9)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
served_orders = set()
for route in routes:
    served_orders.update(route['orders'])

for order in orders:
    if order['id'] in served_orders:
        plt.scatter(order['lon'], order['lat'], 
                   c='lightgreen', s=80, marker='o', 
                   alpha=0.7, zorder=5)
        plt.annotate(order['id'], (order['lon'], order['lat']), 
                    xytext=(5, 5), textcoords='offset points', fontsize=8)
    else:
        plt.scatter(order['lon'], order['lat'], 
                   c='lightcoral', s=80, marker='x', 
                   alpha=0.7, zorder=5)
        plt.annotate(f"{order['id']} (–Ω–µ –æ–±—Å–ª—É–∂–µ–Ω)", (order['lon'], order['lat']), 
                    xytext=(5, 5), textcoords='offset points', fontsize=8)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
for i, route in enumerate(routes):
    courier = couriers_dict[route['courier_id']]
    color = colors[i]
    
    # –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞
    current_lat, current_lon = courier['lat'], courier['lon']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–∫–∞ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è
    refill_point = route.get('refill_point')
    refill_after_index = refill_point['after_order_index'] if refill_point else None
    
    # –ï—Å–ª–∏ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞
    if refill_point and refill_after_index is None:
        # –†–∏—Å—É–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ –¥–µ–ø–æ (–ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è)
        plt.plot([courier['lon'], common_depot['lon']], [courier['lat'], common_depot['lat']], 
                color=color, linewidth=2, linestyle='--', alpha=0.8, zorder=3)
        
        # –°—Ç—Ä–µ–ª–∫–∞ –∫ –¥–µ–ø–æ
        plt.annotate('', xy=(common_depot['lon'], common_depot['lat']), 
                    xytext=(courier['lon'], courier['lat']),
                    arrowprops=dict(arrowstyle='->', color=color, lw=1.5, alpha=0.8, linestyle='dashed'),
                    zorder=4)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å "–î–û–£–ö–û–ú–ü–õ–ï–ö–¢–û–í–ê–ù–ò–ï"
        mid_lon = (courier['lon'] + common_depot['lon']) / 2
        mid_lat = (courier['lat'] + common_depot['lat']) / 2
        plt.annotate('–î–û–£–ö–û–ú–ü–õ–ï–ö–¢–û–í–ê–ù–ò–ï', (mid_lon, mid_lat), 
                    xytext=(0, 10), textcoords='offset points', 
                    fontsize=8, color=color, weight='bold',
                    bbox=dict(boxstyle="round,pad=0.2", facecolor="white", alpha=0.8),
                    ha='center', zorder=6)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –¥–µ–ø–æ
        current_lat, current_lon = common_depot['lat'], common_depot['lon']
    
    # –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –∑–∞–∫–∞–∑—ã
    for order_index, order_id in enumerate(route['orders']):
        order = orders_dict[order_id]
        
        # –õ–∏–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫ –∑–∞–∫–∞–∑—É
        plt.plot([current_lon, order['lon']], [current_lat, order['lat']], 
                color=color, linewidth=2, alpha=0.7, zorder=3)
        
        # –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        plt.annotate('', xy=(order['lon'], order['lat']), 
                    xytext=(current_lon, current_lat),
                    arrowprops=dict(arrowstyle='->', color=color, lw=1.5, alpha=0.7),
                    zorder=4)
        
        current_lat, current_lon = order['lat'], order['lon']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if refill_after_index is not None and order_index == refill_after_index:
            # –†–∏—Å—É–µ–º –º–∞—Ä—à—Ä—É—Ç –∫ –¥–µ–ø–æ (–ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è)
            plt.plot([current_lon, common_depot['lon']], [current_lat, common_depot['lat']], 
                    color=color, linewidth=2, linestyle='--', alpha=0.8, zorder=3)
            
            # –°—Ç—Ä–µ–ª–∫–∞ –∫ –¥–µ–ø–æ
            plt.annotate('', xy=(common_depot['lon'], common_depot['lat']), 
                        xytext=(current_lon, current_lat),
                        arrowprops=dict(arrowstyle='->', color=color, lw=1.5, alpha=0.8, linestyle='dashed'),
                        zorder=4)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å "–î–û–£–ö–û–ú–ü–õ–ï–ö–¢–û–í–ê–ù–ò–ï"
            mid_lon = (current_lon + common_depot['lon']) / 2
            mid_lat = (current_lat + common_depot['lat']) / 2
            plt.annotate('–î–û–£–ö–û–ú–ü–õ–ï–ö–¢–û–í–ê–ù–ò–ï', (mid_lon, mid_lat), 
                        xytext=(0, 10), textcoords='offset points', 
                        fontsize=8, color=color, weight='bold',
                        bbox=dict(boxstyle="round,pad=0.2", facecolor="white", alpha=0.8),
                        ha='center', zorder=6)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –¥–µ–ø–æ
            current_lat, current_lon = common_depot['lat'], common_depot['lon']
    
    # –û–¢–ö–†–´–¢–´–ï –ú–ê–†–®–†–£–¢–´: –£–±–∏—Ä–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ–ø–æ –≤ –∫–æ–Ω—Ü–µ
    # –ö—É—Ä—å–µ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ –∏–ª–∏ –≤ –¥–µ–ø–æ (–µ—Å–ª–∏ –±—ã–ª–æ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏–µ)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
plt.xlabel('–î–æ–ª–≥–æ—Ç–∞', fontsize=12)
plt.ylabel('–®–∏—Ä–æ—Ç–∞', fontsize=12)
plt.title('VRP –†–µ—à–µ–Ω–∏–µ: –û—Ç–∫—Ä—ã—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∫—É—Ä—å–µ—Ä–æ–≤ (–±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –¥–µ–ø–æ)\n' + 
          f'–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {sum(route["distance_km"] for route in routes):.2f} –∫–º, ' + 
          f'–û–±—Å–ª—É–∂–µ–Ω–æ: {sum(route["orders_count"] for route in routes)}/{len(orders)} –∑–∞–∫–∞–∑–æ–≤', fontsize=14)

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ª–µ–≥–µ–Ω–¥—ã
refill_line = plt.Line2D([0], [0], color='gray', linewidth=2, linestyle='--', alpha=0.8, label='–ú–∞—Ä—à—Ä—É—Ç –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è')
plt.legend(handles=plt.gca().get_legend_handles_labels()[0] + [refill_line], 
          bbox_to_anchor=(1.05, 1), loc='upper left')

plt.grid(True, alpha=0.3)

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö
info_text = "–î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:\n"
for route in routes:
    info_text += f"‚Ä¢ {route['courier_id']}: {route['orders_count']} –∑–∞–∫–∞–∑–æ–≤, {route['distance_km']} –∫–º\n"

plt.figtext(0.02, 0.02, info_text, fontsize=10, 
           bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray", alpha=0.8))

plt.tight_layout()
plt.savefig('vrp_routes_visualization.png', dpi=300, bbox_inches='tight')
# plt.show()  # –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ –æ–∫–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞—Å—å

print("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: vrp_routes_visualization.png")

# –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏
print("\n–ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
print("=" * 50)

for route in routes:
    courier = couriers_dict[route['courier_id']]
    print(f"\n{route['courier_id']}:")
    print(f"  –°—Ç–∞—Ä—Ç: ({courier['lat']:.3f}, {courier['lon']:.3f})")
    print(f"  –ó–∞–∫–∞–∑—ã: {', '.join(route['orders'])}")
    print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {route['distance_km']} –∫–º")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏–∏
    if route.get('refill_needed'):
        refill = route['refill_needed']
        print(f"  üîÑ –î–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏–µ: 12–ª={refill['bottles_12']}, 19–ª={refill['bottles_19']}, –≤—Å–µ–≥–æ={refill['total']}")
        
        if route.get('refill_point'):
            refill_point = route['refill_point']
            if refill_point['after_order_id']:
                print(f"  üìç –¢–æ—á–∫–∞ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è: –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ {refill_point['after_order_id']}, –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º {refill_point['before_order_id']}")
            else:
                print(f"  üìç –¢–æ—á–∫–∞ –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è: –≤ –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞, –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º {refill_point['before_order_id']}")
    
    if route['orders']:
        last_order = orders_dict[route['orders'][-1]]
        print(f"  –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ({last_order['lat']:.3f}, {last_order['lon']:.3f}) - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑")
    else:
        print(f"  –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (–Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤)")

unserved = [order['id'] for order in orders if order['id'] not in served_orders]
if unserved:
    print(f"\n–ù–µ–æ–±—Å–ª—É–∂–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {', '.join(unserved)}")
    for order_id in unserved:
        order = orders_dict[order_id]
        print(f"  {order_id}: ({order['lat']:.3f}, {order['lon']:.3f})")

print(f"\n–ò—Ç–æ–≥–æ:")
print(f"  –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {sum(route['distance_km'] for route in routes):.2f} –∫–º")
print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä–æ–≤: {len(routes)}/{len(couriers)}")
print(f"  –û–±—Å–ª—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {sum(route['orders_count'] for route in routes)}/{len(orders)}") 