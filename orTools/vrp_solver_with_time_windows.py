from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import math
import sys
import json
from datetime import datetime, timedelta
import copy

input_data = json.load(sys.stdin)

# –û–±—â–∞—è —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
common_depot = {"id": "depot", "lat": 43.16857, "lon": 76.89642}

couriers = input_data["couriers"]
orders = input_data["orders"]
courier_restrictions = input_data["courier_restrictions"]

# –°–∫–æ—Ä–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤ (60 –∫–º/—á)
speed_mps = 25 * 1000 / 3600  # –°–∫–æ—Ä–æ—Å—Ç—å –≤ –º–µ—Ç—Ä–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É

def haversine_distance(lat1, lon1, lat2, lon2):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–≤ –º–µ—Ç—Ä–∞—Ö).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤.
    """
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)

    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad

    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    distance = R * c
    return distance

def create_time_matrix(locations, speed_mps=speed_mps):
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ª–æ–∫–∞—Ü–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)."""
    num_locations = len(locations)
    time_matrix = [[0] * num_locations for _ in range(num_locations)]
    for i in range(num_locations):
        for j in range(num_locations):
            if i != j:
                distance = haversine_distance(
                    locations[i]['lat'], locations[i]['lon'],
                    locations[j]['lat'], locations[j]['lon']
                )
                # –í—Ä–µ–º—è = –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ / –°–∫–æ—Ä–æ—Å—Ç—å
                time_matrix[i][j] = int(distance / speed_mps)
    return time_matrix

# –ü–†–û–í–ï–†–ö–ò –ù–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–¨ –î–ê–ù–ù–´–•
print("=== –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–• ===", file=sys.stderr)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ê–ª–º–∞—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
now = datetime.now()
current_time_in_seconds = now.hour * 3600 + now.minute * 60 + now.second
print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')} ({current_time_in_seconds} —Å–µ–∫—É–Ω–¥)", file=sys.stderr)

# –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã: —É–±–∏—Ä–∞–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
valid_orders = []
max_wait_time_seconds = 60 * 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 1 —á–∞—Å

for order in orders:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
    if 'date.time' in order:
        time_window = order['date.time']
        if time_window:
            try:
                time_parts = time_window.split(' - ')
                start_time_str = time_parts[0].strip()
                end_time_str = time_parts[1].strip()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
                start_time_seconds = int(start_time_str.split(':')[0]) * 3600 + int(start_time_str.split(':')[1]) * 60
                end_time_seconds = int(end_time_str.split(':')[0]) * 3600 + int(end_time_str.split(':')[1]) * 60
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑
                if end_time_seconds < current_time_in_seconds:
                    # print(f"–ó–∞–∫–∞–∑ {order['id']} –ø—Ä–æ–ø—É—â–µ–Ω - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ", file=sys.stderr)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—É–¥–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –∂–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
                if start_time_seconds > current_time_in_seconds + max_wait_time_seconds:
                    # print(f"–ó–∞–∫–∞–∑ {order['id']} –ø—Ä–æ–ø—É—â–µ–Ω - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (–æ–∫–Ω–æ: {start_time_str}-{end_time_str})", file=sys.stderr)
                    continue
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è {order['id']}: {e}", file=sys.stderr)
                continue
    
    valid_orders.append(order)

orders = valid_orders
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}", file=sys.stderr)

# –¢–†–ï–•–≠–¢–ê–ü–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í
print("=== –¢–†–ï–•–≠–¢–ê–ü–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í ===", file=sys.stderr)

# 1. –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, —Å—Ä–æ—á–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ
active_orders_list = []
urgent_orders = []
regular_orders = []

# –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—å–µ—Ä–æ–≤
for courier in couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order = courier["order"]
        active_order_data = {
            "id": active_order["orderId"],
            "lat": active_order["lat"],
            "lon": active_order["lon"],
            "bottles_12": active_order.get("bottles_12", 0),
            "bottles_19": active_order.get("bottles_19", 0),
            "status": "onTheWay"
        }
        active_orders_list.append(active_order_data)
        print(f"üöö –ê–ö–¢–ò–í–ù–´–ô –∑–∞–∫–∞–∑ {active_order['orderId']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å", file=sys.stderr)

# –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
for order in orders:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã–º (—É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã—à–µ)
    is_active = any(active_order['id'] == order['id'] for active_order in active_orders_list)
    
    if is_active:
        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã (isUrgent: true)
    is_urgent = order.get('isUrgent', False) or order.get('is_urgent', False)
    # print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ {order['id']}: isUrgent={order.get('isUrgent', '–ù–ï–¢')}, is_urgent={order.get('is_urgent', '–ù–ï–¢')}, –∏—Ç–æ–≥–æ={is_urgent}", file=sys.stderr)
    
    if is_urgent:
        urgent_orders.append(order)
        # print(f"üö® –°–†–û–ß–ù–´–ô –∑–∞–∫–∞–∑ {order['id']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å", file=sys.stderr)
    else:
        regular_orders.append(order)

print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(active_orders_list)}, —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(urgent_orders)}, –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(regular_orders)}", file=sys.stderr)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
COURIER_SPECIAL_RESTRICTIONS = {}

print(f"=== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ö–£–†–¨–ï–†–û–í ===", file=sys.stderr)
for courier_name, restrictions in COURIER_SPECIAL_RESTRICTIONS.items():
    print(f"–ö—É—Ä—å–µ—Ä {courier_name}: –º–∞–∫—Å. 12–ª={restrictions['max_bottles_12']}, –º–∞–∫—Å. 19–ª={restrictions['max_bottles_19']} ({restrictions['reason']})", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—å–µ—Ä–æ–≤
valid_couriers = []
for i, courier in enumerate(couriers):
    if courier.get("lat") is not None and courier.get("lon") is not None:
        valid_couriers.append(courier)
        print(f"‚úÖ –ö—É—Ä—å–µ—Ä {courier['id']}: ({courier['lat']}, {courier['lon']})", file=sys.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if courier.get("order") and courier["order"].get("status") == "onTheWay":
            active_order_id = courier["order"]["orderId"]
            print(f"   üöö –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: {active_order_id}", file=sys.stderr)
        else:
            print(f"   ‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)
    else:
        print(f"‚ùå –ö—É—Ä—å–µ—Ä {courier['id']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
active_order_ids = set()

# –°–æ–±–∏—Ä–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—å–µ—Ä–æ–≤
for courier in valid_couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order_ids.add(courier["order"]["orderId"])

# –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
active_orders_data = {}
for courier in valid_couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order = courier["order"]
        active_orders_data[active_order["orderId"]] = {
            "id": active_order["orderId"],
            "lat": active_order["lat"],
            "lon": active_order["lon"],
            "bottles_12": active_order.get("bottles_12", 0),
            "bottles_19": active_order.get("bottles_19", 0),
            "status": "onTheWay"
        }

for i, order in enumerate(orders):
    if order.get("lat") is not None and order.get("lon") is not None:
        status_info = " (–ê–ö–¢–ò–í–ù–´–ô)" if order['id'] in active_order_ids else ""
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order['id']}: ({order['lat']}, {order['lon']}){status_info}", file=sys.stderr)
    else:
        print(f"‚ùå –ó–∞–∫–∞–∑ {order['id']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", file=sys.stderr)

# –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
for active_order_id, active_order_data in active_orders_data.items():
    orders.append(active_order_data)
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ {active_order_id}: ({active_order_data['lat']}, {active_order_data['lon']}) (–ê–ö–¢–ò–í–ù–´–ô)", file=sys.stderr)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
couriers = valid_couriers

print(f"\n–í–∞–ª–∏–¥–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã: {len(couriers)}", file=sys.stderr)
print(f"–í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {len(orders)}", file=sys.stderr)
print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {len(active_order_ids)}", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
if len(couriers) == 0:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏!", file=sys.stderr)
    print("[]", file=sys.stdout)
    sys.exit(0)

if len(orders) == 0:
    print("‚ùå –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!", file=sys.stderr)
    print("[]", file=sys.stdout)
    sys.exit(0)

print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...", file=sys.stderr)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è
search_params = pywrapcp.DefaultRoutingSearchParameters()
search_params.first_solution_strategy = (
    routing_enums_pb2.FirstSolutionStrategy.SAVINGS)  # –•–æ—Ä–æ—à–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
search_params.local_search_metaheuristic = (
    routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)  # –õ—É—á—à–µ —á–µ–º TABU_SEARCH –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
search_params.time_limit.seconds = 20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
search_params.log_search = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
search_params.use_cp_sat = False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CP solver –¥–ª—è VRP
search_params.use_cp = True  # –í–∫–ª—é—á–∞–µ–º CP solver

def solve_vrp_for_orders(couriers_data, orders_data):
    """–†–µ—à–∞–µ—Ç VRP –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —É—á–µ—Ç–æ–º –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –¥–µ–ø–æ"""
    if not orders_data:
        print("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", file=sys.stderr)
        return []

    updated_couriers = []
    
    for courier in couriers_data:
        courier_copy = courier.copy()
        
        if courier.get("order") and courier["order"].get("status") == "onTheWay":
            active_order = courier["order"]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∑–∞–∫–∞–∑—É
            distance = haversine_distance(
                courier["lat"], courier["lon"],
                active_order["lat"], active_order["lon"]
            )
            travel_time = distance / speed_mps
            
            # –ï—Å–ª–∏ –∫—É—Ä—å–µ—Ä –µ—â–µ –≤ –ø—É—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            if travel_time > 0:
                courier_copy["lat"] = active_order["lat"]
                courier_copy["lon"] = active_order["lon"]
                print(f"–ö—É—Ä—å–µ—Ä {courier['id']}: –ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑", file=sys.stderr)
        
        updated_couriers.append(courier_copy)
    
    working_couriers = updated_couriers
    
    # –õ–æ–∫–∞—Ü–∏–∏: —Ç–æ–ª—å–∫–æ –∫—É—Ä—å–µ—Ä—ã –∏ –∑–∞–∫–∞–∑—ã (–¥–µ–ø–æ –Ω–µ –≤–∫–ª—é—á–∞–µ–º)
    locations = working_couriers + orders_data
    
    num_couriers = len(working_couriers)
    num_orders = len(orders_data)
    num_locations = len(locations)
    
    print(f"–†–µ—à–∞–µ–º VRP: {num_couriers} –∫—É—Ä—å–µ—Ä–æ–≤, {num_orders} –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)
    print(f"DEBUG: num_locations={num_locations}, num_couriers={num_couriers}, type(num_locations)={type(num_locations)}, type(num_couriers)={type(num_couriers)}", file=sys.stderr)
    
    # –°–æ–∑–¥–∞–µ–º RoutingIndexManager –∏ RoutingModel
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –¥–µ–ø–æ (–ø–µ—Ä–≤—ã–π —É–∑–µ–ª)
    depot_index = 0
    manager = pywrapcp.RoutingIndexManager(num_locations, num_couriers, depot_index)
    routing = pywrapcp.RoutingModel(manager)
    
    # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    def time_callback(from_index, to_index):
        try:
            if from_index < 0 or to_index < 0:
                return 999999
            
            from_node = manager.IndexToNode(from_index)
            to_node = manager.IndexToNode(to_index)
            
            travel_time = 0
            if from_node != to_node:
                distance = haversine_distance(
                    locations[from_node]['lat'], locations[from_node]['lon'],
                    locations[to_node]['lat'], locations[to_node]['lon']
                )
                travel_time = distance / speed_mps
                
                # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ –ü–û –†–ê–°–°–¢–û–Ø–ù–ò–Æ
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ä–æ—á–Ω–æ–º—É –∑–∞–∫–∞–∑—É - —É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                if to_node >= num_couriers:
                    order = orders_data[to_node - num_couriers]
                    if order.get('isUrgent', False) or order.get('is_urgent', False):
                        # –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                        travel_time *= 0.3  # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ 3 —Ä–∞–∑–∞ (–±—ã–ª–æ 0.5)
                
                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢: –∑–∞–∫–∞–∑—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
                if to_node >= num_couriers:
                    order = orders_data[to_node - num_couriers]
                    if order.get('date.time', '') != "":
                        # –ó–∞–∫–∞–∑—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                        travel_time *= 0.8  # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 20%
                
                # –ü–†–ò–û–†–ò–¢–ï–¢ –ü–û –ó–ê–ì–†–£–ó–ö–ï: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫—É—Ä—å–µ—Ä–æ–≤ —Å –±–æ–ª—å—à–µ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
                if from_node < num_couriers and to_node >= num_couriers:
                    courier = working_couriers[from_node]
                    courier_capacity = courier.get('capacity_19', 0) + courier.get('capacity_12', 0)
                    if courier_capacity > 30:  # –ï—Å–ª–∏ —É –∫—É—Ä—å–µ—Ä–∞ –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞
                        travel_time *= 0.9  # –ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    elif courier_capacity < 15:  # –ï—Å–ª–∏ —É –∫—É—Ä—å–µ—Ä–∞ –º–∞–ª–æ –º–µ—Å—Ç–∞
                        travel_time *= 1.2  # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ
            
            service_time_per_order = 5 * 60
            if to_node >= num_couriers:
                travel_time += service_time_per_order
            return int(travel_time)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ time_callback: {e}", file=sys.stderr)
            return 999999
    
    transit_callback_index = routing.RegisterTransitCallback(time_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å num_couriers)
    def demand_callback_12(from_index):
        try:
            from_node = manager.IndexToNode(from_index)
            if from_node >= num_couriers:
                order = orders_data[from_node - num_couriers]
                return order.get('bottles_12', 0)
            return 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ demand_callback_12: {e}", file=sys.stderr)
            return 0
    def demand_callback_19(from_index):
        try:
            from_node = manager.IndexToNode(from_index)
            if from_node >= num_couriers:
                order = orders_data[from_node - num_couriers]
                return order.get('bottles_19', 0)
            return 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ demand_callback_19: {e}", file=sys.stderr)
            return 0
    demand_callback_index_12 = routing.RegisterUnaryTransitCallback(demand_callback_12)
    demand_callback_index_19 = routing.RegisterUnaryTransitCallback(demand_callback_19)
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤
    vehicle_capacities_12 = [c.get('capacity_12', 0) for c in working_couriers]
    vehicle_capacities_19 = [c.get('capacity_19', 0) for c in working_couriers]
    
    print(f"DEBUG: –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤ 12–ª: {vehicle_capacities_12}", file=sys.stderr)
    print(f"DEBUG: –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤ 19–ª: {vehicle_capacities_19}", file=sys.stderr)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –í–°–ï–ì–î–ê
    # –ï—Å–ª–∏ —É –∫—É—Ä—å–µ—Ä–∞ 0 –±—É—Ç—ã–ª–µ–π - –æ–Ω –ù–ï –ú–û–ñ–ï–¢ –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index_12, 0, vehicle_capacities_12, True, 'Capacity12')
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ 12–ª", file=sys.stderr)
    
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index_19, 0, vehicle_capacities_19, True, 'Capacity19')
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ 19–ª", file=sys.stderr)
    # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –£–í–ï–õ–ò–ß–ï–ù–ù–´–ï –î–õ–Ø –õ–£–ß–®–ï–ì–û –ü–û–ö–†–´–¢–ò–Ø
    for order_idx in range(num_couriers, num_locations):
        order = orders_data[order_idx - num_couriers]
        
        if order.get('isUrgent', False) or order.get('is_urgent', False):
            # –°–†–û–ß–ù–´–ï –ó–ê–ö–ê–ó–´ - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            penalty = 20000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 5000 –¥–æ 20000
            routing.AddDisjunction([manager.NodeToIndex(order_idx)], penalty)
        else:
            if order.get('date.time', '') != "":
                # –û–ë–´–ß–ù–´–ô –ó–ê–ö–ê–ó –° –í–†–ï–ú–ï–ù–ù–´–ú –û–ö–ù–û–ú - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                penalty = 15000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 2000 –¥–æ 15000
                routing.AddDisjunction([manager.NodeToIndex(order_idx)], penalty)
            else:
                # –û–ë–´–ß–ù–´–ô –ó–ê–ö–ê–ó –ë–ï–ó –í–†–ï–ú–ï–ù–ù–û–ì–û –û–ö–ù–ê - –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                penalty = 10000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 500 –¥–æ 10000
                routing.AddDisjunction([manager.NodeToIndex(order_idx)], penalty)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
    routing.AddDimension(
        transit_callback_index,
        3600,  # slack_max (1 —á–∞—Å –≤–º–µ—Å—Ç–æ 30 –º–∏–Ω—É—Ç)
        18000,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞ (5 —á–∞—Å–æ–≤)
        False,
        'Time'
    )
    time_dimension = routing.GetDimensionOrDie('Time')
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ –ü–û –í–†–ï–ú–ï–ù–ò –î–õ–Ø –°–†–û–ß–ù–´–• –ó–ê–ö–ê–ó–û–í
    urgent_orders = [order for order in orders_data if order.get('isUrgent', False) or order.get('is_urgent', False)]
    for urgent_order in urgent_orders:
        order_node_index = None
        for j, loc in enumerate(locations):
            if 'id' in loc and loc['id'] == urgent_order['id']:
                order_node_index = j
                break
        
        if order_node_index is not None:
            order_index = manager.NodeToIndex(order_node_index)
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
                time_dimension.CumulVar(order_index).SetMin(0)
                print(f"‚è∞ –°–†–û–ß–ù–´–ô –∑–∞–∫–∞–∑ {urgent_order['id']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏", file=sys.stderr)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {urgent_order['id']}: {e}", file=sys.stderr)

    def order_count_callback(from_index, to_index):
        try:
            to_node = manager.IndexToNode(to_index)
            if to_node >= num_couriers:
                return 1
            return 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ order_count_callback: {e}", file=sys.stderr)
            return 0
            
    order_count_callback_index = routing.RegisterTransitCallback(order_count_callback)
    # –£–í–ï–õ–ò–ß–ï–ù–ù–û–ï –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    # –î–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    max_orders_per_courier = max(1, min(20, num_orders // num_couriers + 3))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º
    routing.AddDimension(
        order_count_callback_index,
        0,
        max_orders_per_courier,
        True,
        'OrderCount'
    )
    
    # –®—Ç—Ä–∞—Ñ –∑–∞ –ø—É—Å—Ç—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ (–µ—Å–ª–∏ –∫—É—Ä—å–µ—Ä –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞)
    for vehicle_id in range(num_couriers):
        start_index = routing.Start(vehicle_id)
        # –í—ã—Å–æ–∫–∏–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –∫—É—Ä—å–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤
        empty_courier_penalty = 50000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 1000 –¥–æ 50000
        routing.AddDisjunction([start_index], empty_courier_penalty)
        
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ - –û–¢–ö–õ–Æ–ß–ï–ù–û –ò–ó-–ó–ê –ö–û–ù–§–õ–ò–ö–¢–û–í
    # for order in orders_data:
    #     if 'date.time' in order:
    #         order_node_index = None
    #         for j, loc in enumerate(locations):
    #             if 'id' in loc and loc['id'] == order['id']:
    #                 order_node_index = j
    #                 break
    #         if order_node_index is not None:
    #             try:
    #                 time_window = order['date.time']
    #                 if time_window and time_window.strip():
    #                     start_time_str, end_time_str = time_window.split(' - ')
    #                     start_time = datetime.strptime(start_time_str, '%H:%M').time()
    #                     end_time = datetime.strptime(end_time_str, '%H:%M').time()
    #                     
    #                     start_time_seconds = start_time.hour * 3600 + start_time.minute * 60
    #                     end_time_seconds = end_time.hour * 3600 + end_time.minute * 60
    #                     
    #                     order_index = manager.NodeToIndex(order_node_index)
    #                     time_dimension.CumulVar(order_index).SetRange(start_time_seconds, end_time_seconds)
    #                     print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order['id']}: {start_time_str}-{end_time_str}", file=sys.stderr)
    #             except Exception as e:
    #                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order['id']}: {e}", file=sys.stderr)
    # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ OR-Tools (—Ç–∞–π–º–∞—É—Ç: 20 —Å–µ–∫)...", file=sys.stderr)
        solution = routing.SolveWithParameters(search_params)
        
        if not solution:
            print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞—à–ª–∞ —Ä–µ—à–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (10 —Å–µ–∫)", file=sys.stderr)
            fast_params = pywrapcp.DefaultRoutingSearchParameters()
            fast_params.first_solution_strategy = (
                routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)
            fast_params.local_search_metaheuristic = (
                routing_enums_pb2.LocalSearchMetaheuristic.TABU_SEARCH)
            fast_params.time_limit.seconds = 10
            solution = routing.SolveWithParameters(fast_params)
            
        if not solution:
            print("‚ö†Ô∏è –ë—ã—Å—Ç—Ä–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞—à–ª–∞ —Ä–µ—à–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º —Å–∞–º—É—é –ø—Ä–æ—Å—Ç—É—é (5 —Å–µ–∫)", file=sys.stderr)
            simple_params = pywrapcp.DefaultRoutingSearchParameters()
            simple_params.first_solution_strategy = (
                routing_enums_pb2.FirstSolutionStrategy.SAVINGS)
            simple_params.local_search_metaheuristic = (
                routing_enums_pb2.LocalSearchMetaheuristic.GREEDY_DESCENT)
            simple_params.time_limit.seconds = 5
            solution = routing.SolveWithParameters(simple_params)
            
        if solution:
            print(f"‚úÖ OR-Tools –Ω–∞—à–µ–ª —Ä–µ—à–µ–Ω–∏–µ –∑–∞ {solution.ObjectiveValue()} –µ–¥–∏–Ω–∏—Ü", file=sys.stderr)
            routes = []
            for vehicle_id in range(num_couriers):
                index = routing.Start(vehicle_id)
                route_orders = []
                while not routing.IsEnd(index):
                    node_index = manager.IndexToNode(index)
                    if node_index >= num_couriers:
                        order = orders_data[node_index - num_couriers]
                        route_orders.append(order["id"])
                    index = solution.Value(routing.NextVar(index))
                if route_orders:
                    routes.append({
                        "courier_id": working_couriers[vehicle_id]["id"],
                        "orders": route_orders
                    })
            return routes
        else:
            print("‚ùå OR-Tools –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–∞–∂–µ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏", file=sys.stderr)
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ VRP: {e}", file=sys.stderr)
        return []

# 2. –ö–æ–ø–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
couriers_for_active = copy.deepcopy(couriers)

# 3. –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ VRP)
assigned_active = []

if active_orders_list:
    print(f"–ù–∞–∑–Ω–∞—á–∞–µ–º {len(active_orders_list)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é...", file=sys.stderr)
    
    # –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Ö –∫—É—Ä—å–µ—Ä–∞–º
    for courier in couriers:
        if courier.get("order") and courier["order"].get("status") == "onTheWay":
            active_order_id = courier["order"]["orderId"]
            assigned_active.append({
                "courier_id": courier["id"],
                "orders": [active_order_id]
            })
            print(f"–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ {active_order_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—å–µ—Ä—É {courier['id']}", file=sys.stderr)
else:
    print("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç", file=sys.stderr)

# 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–æ–≤ (–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ)
for courier in couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order = courier["order"]
        courier['lat'] = active_order['lat']
        courier['lon'] = active_order['lon']
        print(f"–ö—É—Ä—å–µ—Ä {courier['id']} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ ({active_order['lat']:.6f}, {active_order['lon']:.6f})", file=sys.stderr)

# 5. –ù–∞–∑–Ω–∞—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã
assigned_orders = []

remaining_orders = urgent_orders + regular_orders
if remaining_orders:
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(urgent_orders)} —Å—Ä–æ—á–Ω—ã—Ö –∏ {len(regular_orders)} –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...", file=sys.stderr)
    try:
        assigned_orders = solve_vrp_for_orders(couriers, remaining_orders)
        print(f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ {len(assigned_orders)} –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤: {e}", file=sys.stderr)
        assigned_orders = []

# 6. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
all_routes = assigned_active + assigned_orders

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í: –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –æ–¥–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
print("=== –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í –ö–£–†–¨–ï–†–û–í ===", file=sys.stderr)
consolidated_routes = {}

for route in all_routes:
    courier_id = route["courier_id"]
    if courier_id not in consolidated_routes:
        consolidated_routes[courier_id] = {
            "courier_id": courier_id,
            "orders": route["orders"].copy()
        }
        print(f"–°–æ–∑–¥–∞–Ω –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ {courier_id}: {len(route['orders'])} –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)
    else:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–∫–∞–∑—ã, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        existing_orders = set(consolidated_routes[courier_id]["orders"])
        new_orders = route["orders"]
        
        for order_id in new_orders:
            if order_id not in existing_orders:
                consolidated_routes[courier_id]["orders"].append(order_id)
                existing_orders.add(order_id)
        
        print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω –º–∞—Ä—à—Ä—É—Ç –∫—É—Ä—å–µ—Ä–∞ {courier_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_orders)} –∑–∞–∫–∞–∑–æ–≤, –≤—Å–µ–≥–æ {len(consolidated_routes[courier_id]['orders'])}", file=sys.stderr)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
all_routes = list(consolidated_routes.values())
print(f"–ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(all_routes)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤", file=sys.stderr)

# 7. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ó–ê–ö–ê–ó–û–í
print("=== –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ó–ê–ö–ê–ó–û–í ===", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫—É—Ä—å–µ—Ä–∞–º
for courier in couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order_id = courier["order"]["orderId"]
        courier_id = courier["id"]
        
        # –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç —ç—Ç–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        courier_route = next((route for route in all_routes if route["courier_id"] == courier_id), None)
        
        if courier_route and active_order_id in courier_route["orders"]:
            print(f"‚úÖ –ö—É—Ä—å–µ—Ä {courier_id}: –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ {active_order_id} –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ", file=sys.stderr)
        else:
            print(f"‚ùå –ö—É—Ä—å–µ—Ä {courier_id}: –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ {active_order_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ", file=sys.stderr)

# –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
final_routes = []
for route in all_routes:
    courier_id = route['courier_id']
    route_orders = route['orders']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±—É—Ç—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
    total_bottles_12 = 0
    total_bottles_19 = 0
    total_bottles = 0
    
    for order_id in route_orders:
        order_data = next((o for o in orders if o["id"] == order_id), None)
        if order_data:
            bottles_12 = order_data.get("bottles_12") or 0
            bottles_19 = order_data.get("bottles_19") or 0
            total_bottles_12 += bottles_12
            total_bottles_19 += bottles_19
            total_bottles += bottles_12 + bottles_19
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ
    courier = next((c for c in couriers if c['id'] == courier_id), None)
    if courier:
        courier_type = 'loaded' if (courier.get('capacity_12', 0) > 0 or courier.get('capacity_19', 0) > 0) else 'empty'
        courier_capacity_12 = courier.get("capacity_12", 0)
        courier_capacity_19 = courier.get("capacity_19", 0)
        
        # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—É—Ä—å–µ—Ä–∞
        if courier_type == 'empty':
            courier_should_take = {
                "bottles_12": total_bottles_12,
                "bottles_19": total_bottles_19,
                "total": total_bottles_12 + total_bottles_19
            }
            courier_total_capacity = courier.get("capacity", 100)
        else:
            courier_should_take = {
                "bottles_12": 0,
                "bottles_19": 0,
                "total": 0
            }
            courier_total_capacity = courier_capacity_12 + courier_capacity_19
        
        # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
        estimated_time_minutes = len(route_orders) * 30  # 30 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–∫–∞–∑
        
        route_info = {
            "courier_id": courier_id,
            "orders": route_orders,
            "orders_count": len(route_orders),
            "travel_time_seconds": estimated_time_minutes * 60,
            "travel_time_minutes": estimated_time_minutes,
            "required_bottles": {
                "bottles_12": total_bottles_12,
                "bottles_19": total_bottles_19,
                "total": total_bottles
            },
            "courier_should_take": courier_should_take,
            "capacity_utilization": {
                "percent": round(100 * total_bottles / max(courier_total_capacity, 1), 1)
            },
            "has_active_order": bool(courier.get("order")),
            "courier_type": courier_type
        }
        
        final_routes.append(route_info)

print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–†–ï–•–≠–¢–ê–ü–ù–û–ì–û –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ===", file=sys.stderr)
print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {len(assigned_active)}", file=sys.stderr)
print(f"–û—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {len(assigned_orders)}", file=sys.stderr)
print(f"–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(final_routes)}", file=sys.stderr)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—å–µ—Ä–æ–≤
print(f"\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ö–£–†–¨–ï–†–û–í ===", file=sys.stderr)
for route in final_routes:
    courier_id = route['courier_id']
    order_count = len(route['orders'])
    print(f"–ö—É—Ä—å–µ—Ä {courier_id}: {order_count} –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
order_counts = [len(route['orders']) for route in final_routes]
if order_counts:
    avg_orders = sum(order_counts) / len(order_counts)
    max_orders = max(order_counts)
    min_orders = min(order_counts)
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {avg_orders:.1f}", file=sys.stderr)
    print(f"–ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤: {max_orders}, –ú–∏–Ω–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤: {min_orders}", file=sys.stderr)
    print(f"–†–∞–∑–±—Ä–æ—Å –Ω–∞–≥—Ä—É–∑–∫–∏: {max_orders - min_orders} –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)

print(json.dumps(final_routes, ensure_ascii=False)) 