from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import math
import sys
import json
from datetime import datetime, timedelta
import copy

input_data = json.load(sys.stdin)

# –û–±—â–∞—è —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
common_depot = {"id": "depot", "lat": 43.16857, "lon": 76.89642}

couriers = input_data["couriers"]
orders = input_data["orders"]
courier_restrictions = input_data["courier_restrictions"]

# –°–∫–æ—Ä–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤ (60 –∫–º/—á)
speed_mps = 25 * 1000 / 3600  # –°–∫–æ—Ä–æ—Å—Ç—å –≤ –º–µ—Ç—Ä–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É

def haversine_distance(lat1, lon1, lat2, lon2):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–≤ –º–µ—Ç—Ä–∞—Ö).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤.
    """
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)

    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad

    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    distance = R * c
    return distance

def create_time_matrix(locations, speed_mps=speed_mps):
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ª–æ–∫–∞—Ü–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)."""
    num_locations = len(locations)
    time_matrix = [[0] * num_locations for _ in range(num_locations)]
    for i in range(num_locations):
        for j in range(num_locations):
            if i != j:
                distance = haversine_distance(
                    locations[i]['lat'], locations[i]['lon'],
                    locations[j]['lat'], locations[j]['lon']
                )
                # –í—Ä–µ–º—è = –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ / –°–∫–æ—Ä–æ—Å—Ç—å
                time_matrix[i][j] = int(distance / speed_mps)
    return time_matrix

# –ü–†–û–í–ï–†–ö–ò –ù–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–¨ –î–ê–ù–ù–´–•
print("=== –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–• ===", file=sys.stderr)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ê–ª–º–∞—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
now = datetime.now()
current_time_in_seconds = now.hour * 3600 + now.minute * 60 + now.second
print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')} ({current_time_in_seconds} —Å–µ–∫—É–Ω–¥)", file=sys.stderr)

# –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã: —É–±–∏—Ä–∞–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
valid_orders = []
max_wait_time_seconds = 60 * 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 1 —á–∞—Å

for order in orders:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
    if 'date.time' in order:
        time_window = order['date.time']
        if time_window:
            try:
                time_parts = time_window.split(' - ')
                start_time_str = time_parts[0].strip()
                end_time_str = time_parts[1].strip()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
                start_time_seconds = int(start_time_str.split(':')[0]) * 3600 + int(start_time_str.split(':')[1]) * 60
                end_time_seconds = int(end_time_str.split(':')[0]) * 3600 + int(end_time_str.split(':')[1]) * 60
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑
                if end_time_seconds < current_time_in_seconds:
                    print(f"–ó–∞–∫–∞–∑ {order['id']} –ø—Ä–æ–ø—É—â–µ–Ω - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ", file=sys.stderr)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—É–¥–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –∂–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
                if start_time_seconds > current_time_in_seconds + max_wait_time_seconds:
                    print(f"–ó–∞–∫–∞–∑ {order['id']} –ø—Ä–æ–ø—É—â–µ–Ω - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (–æ–∫–Ω–æ: {start_time_str}-{end_time_str})", file=sys.stderr)
                    continue
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è {order['id']}: {e}", file=sys.stderr)
                continue
    
    valid_orders.append(order)

orders = valid_orders
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}", file=sys.stderr)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
COURIER_SPECIAL_RESTRICTIONS = {}

print(f"=== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ö–£–†–¨–ï–†–û–í ===", file=sys.stderr)
for courier_name, restrictions in COURIER_SPECIAL_RESTRICTIONS.items():
    print(f"–ö—É—Ä—å–µ—Ä {courier_name}: –º–∞–∫—Å. 12–ª={restrictions['max_bottles_12']}, –º–∞–∫—Å. 19–ª={restrictions['max_bottles_19']} ({restrictions['reason']})", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—å–µ—Ä–æ–≤
valid_couriers = []
for i, courier in enumerate(couriers):
    if courier.get("lat") is not None and courier.get("lon") is not None:
        valid_couriers.append(courier)
        print(f"‚úÖ –ö—É—Ä—å–µ—Ä {courier['id']}: ({courier['lat']}, {courier['lon']})", file=sys.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if courier.get("order") and courier["order"].get("status") == "onTheWay":
            active_order_id = courier["order"]["orderId"]
            print(f"   üöö –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: {active_order_id}", file=sys.stderr)
        else:
            print(f"   ‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)
    else:
        print(f"‚ùå –ö—É—Ä—å–µ—Ä {courier['id']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
active_order_ids = set()

# –°–æ–±–∏—Ä–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—å–µ—Ä–æ–≤
for courier in valid_couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order_ids.add(courier["order"]["orderId"])

# –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
active_orders_data = {}
for courier in valid_couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order = courier["order"]
        active_orders_data[active_order["orderId"]] = {
            "id": active_order["orderId"],
            "lat": active_order["lat"],
            "lon": active_order["lon"],
            "bottles_12": active_order.get("bottles_12", 0),
            "bottles_19": active_order.get("bottles_19", 0),
            "status": "onTheWay"
        }

for i, order in enumerate(orders):
    if order.get("lat") is not None and order.get("lon") is not None:
        status_info = " (–ê–ö–¢–ò–í–ù–´–ô)" if order['id'] in active_order_ids else ""
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order['id']}: ({order['lat']}, {order['lon']}){status_info}", file=sys.stderr)
    else:
        print(f"‚ùå –ó–∞–∫–∞–∑ {order['id']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", file=sys.stderr)

# –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
for active_order_id, active_order_data in active_orders_data.items():
    orders.append(active_order_data)
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ {active_order_id}: ({active_order_data['lat']}, {active_order_data['lon']}) (–ê–ö–¢–ò–í–ù–´–ô)", file=sys.stderr)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
couriers = valid_couriers

print(f"\n–í–∞–ª–∏–¥–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã: {len(couriers)}", file=sys.stderr)
print(f"–í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {len(orders)}", file=sys.stderr)
print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {len(active_order_ids)}", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
if len(couriers) == 0:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏!", file=sys.stderr)
    print("[]", file=sys.stdout)
    sys.exit(0)

if len(orders) == 0:
    print("‚ùå –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!", file=sys.stderr)
    print("[]", file=sys.stdout)
    sys.exit(0)

print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...", file=sys.stderr)

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π: –¥–µ–ø–æ + –∫—É—Ä—å–µ—Ä—ã + –∑–∞–∫–∞–∑—ã
locations = [common_depot] + couriers + orders

# –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
time_matrix = create_time_matrix(locations, speed_mps=speed_mps)

num_couriers = len(couriers)
num_orders = len(orders)
num_locations = len(locations)

print(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—å–µ—Ä–æ–≤: {num_couriers}", file=sys.stderr)
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {num_orders}", file=sys.stderr)
print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π: {num_locations}", file=sys.stderr)

# –û–¢–ö–†–´–¢–´–ï –ú–ê–†–®–†–£–¢–´: –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏
print("\n=== –ù–ê–°–¢–†–û–ô–ö–ê –û–¢–ö–†–´–¢–´–• –ú–ê–†–®–†–£–¢–û–í ===", file=sys.stderr)
starts = list(range(1, num_couriers + 1))

# –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∫—É—Ä—å–µ—Ä–∞–º –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –ª—é–±–æ–º –∑–∞–∫–∞–∑–µ
virtual_ends = []
for vehicle_id in range(num_couriers):
    virtual_end_index = num_locations + vehicle_id
    virtual_ends.append(virtual_end_index)

# –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π –≤–∫–ª—é—á–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏
total_locations = num_locations + num_couriers

print(f"–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤: {starts}", file=sys.stderr)
print(f"–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏: {virtual_ends}", file=sys.stderr)
print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π (—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏): {total_locations}", file=sys.stderr)

manager = pywrapcp.RoutingIndexManager(total_locations, num_couriers, starts, virtual_ends)
routing = pywrapcp.RoutingModel(manager)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
def time_callback(from_index, to_index):
    try:
        if from_index < 0 or to_index < 0:
            return 999999
        
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ - —Å—Ç–æ–∏–º–æ—Å—Ç—å 0
        if to_node >= num_locations:
            return 0
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ
        if from_node >= num_locations:
            return 999999
        
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
        travel_time = time_matrix[from_node][to_node]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ (15 –º–∏–Ω—É—Ç)
        service_time_per_order = 15 * 60
        if (to_node >= num_couriers + 1 and to_node < num_locations and
            not locations[to_node].get('is_courier_start', False) and
            not locations[to_node].get('is_active_order', False)):
            travel_time += service_time_per_order
            
        return int(travel_time)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ time_callback: {e}", file=sys.stderr)
        return 999999

transit_callback_index = routing.RegisterTransitCallback(time_callback)
routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
for order_idx in range(num_couriers + 1, num_locations):
    routing.AddDisjunction([manager.NodeToIndex(order_idx)], 10000)

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
courier_capacities = []
courier_types = []

for courier in couriers:
    capacity_12 = courier.get("capacity_12", 0)
    capacity_19 = courier.get("capacity_19", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
    has_active_order = (courier.get("order") and courier["order"].get("status") == "onTheWay")
    
    if capacity_12 == 0 and capacity_19 == 0:
        courier_type = 'empty'
        total_capacity = courier.get("capacity", 100)
        print(f"–ö—É—Ä—å–µ—Ä {courier['id']}: –ü–£–°–¢–û–ô (0 –±—É—Ç—ã–ª–æ–∫ 12–ª –∏ 19–ª), –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ª—é–±—ã–µ –∑–∞–∫–∞–∑—ã", file=sys.stderr)
    else:
        courier_type = 'loaded'
        total_capacity = capacity_12 + capacity_19
        
        bottles_info = []
        if capacity_12 > 0:
            bottles_info.append(f"12–ª={capacity_12}")
        if capacity_19 > 0:
            bottles_info.append(f"19–ª={capacity_19}")
        
        print(f"–ö—É—Ä—å–µ—Ä {courier['id']}: –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ô ({', '.join(bottles_info)})", file=sys.stderr)
    
    courier_capacities.append(total_capacity)
    courier_types.append(courier_type)
    
    print(f"–ö—É—Ä—å–µ—Ä {courier['id']}: —Ç–∏–ø={courier_type}, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å={total_capacity} –±—É—Ç—ã–ª–æ–∫ (12–ª={capacity_12}, 19–ª={capacity_19})", file=sys.stderr)

# –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–†–û–ì–£–Æ –ü–†–û–í–ï–†–ö–£ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ó–ê–ö–ê–ó–û–í –° –¢–ò–ü–ê–ú–ò –ë–£–¢–´–õ–û–ö –ö–£–†–¨–ï–†–û–í
print("\n=== –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ó–ê–ö–ê–ó–û–í –° –¢–ò–ü–ê–ú–ò –ë–£–¢–´–õ–û–ö –ö–£–†–¨–ï–†–û–í ===", file=sys.stderr)

for i, order in enumerate(orders):
    order_node_index = num_couriers + 1 + i
    order_routing_index = manager.NodeToIndex(order_node_index)
    
    order_bottles_12 = order.get("bottles_12", 0)
    order_bottles_19 = order.get("bottles_19", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É—Ä—å–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –ø–æ —Ç–∏–ø–∞–º –±—É—Ç—ã–ª–æ–∫
    compatible_courier_indices = []
    
    for courier_idx, courier in enumerate(couriers):
        courier_capacity_12 = courier.get("capacity_12", 0)
        courier_capacity_19 = courier.get("capacity_19", 0)
        courier_name = courier.get("id", "")
        courier_type = courier_types[courier_idx]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
        if courier_name in COURIER_SPECIAL_RESTRICTIONS:
            special_restrictions = COURIER_SPECIAL_RESTRICTIONS[courier_name]
            max_bottles_12 = special_restrictions["max_bottles_12"]
            max_bottles_19 = special_restrictions["max_bottles_19"]
            
            if order_bottles_12 <= max_bottles_12 and order_bottles_19 <= max_bottles_19:
                compatible_courier_indices.append(courier_idx)
                print(f"  ‚úÖ –ó–∞–∫–∞–∑ {order['id']} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –∫—É—Ä—å–µ—Ä–æ–º {courier_name} (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)", file=sys.stderr)
            else:
                print(f"  üö´ –ó–∞–∫–∞–∑ {order['id']} –ù–ï —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –∫—É—Ä—å–µ—Ä–æ–º {courier_name} (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)", file=sys.stderr)
        
        elif courier_type == 'empty':
            compatible_courier_indices.append(courier_idx)
            print(f"  ‚úÖ –ó–∞–∫–∞–∑ {order['id']} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –ü–£–°–¢–´–ú –∫—É—Ä—å–µ—Ä–æ–º {courier_name}", file=sys.stderr)
        
        else:
            can_handle_12 = (order_bottles_12 == 0) or (courier_capacity_12 > 0 and courier_capacity_12 >= order_bottles_12)
            can_handle_19 = (order_bottles_19 == 0) or (courier_capacity_19 > 0 and courier_capacity_19 >= order_bottles_19)
            
            if can_handle_12 and can_handle_19:
                compatible_courier_indices.append(courier_idx)
                print(f"  ‚úÖ –ó–∞–∫–∞–∑ {order['id']} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ú –∫—É—Ä—å–µ—Ä–æ–º {courier_name}", file=sys.stderr)
            else:
                reasons = []
                if not can_handle_12:
                    if order_bottles_12 > 0 and courier_capacity_12 == 0:
                        reasons.append(f"–Ω–µ—Ç 12–ª –±—É—Ç—ã–ª–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å {order_bottles_12} x 12–ª")
                    elif order_bottles_12 > courier_capacity_12:
                        reasons.append(f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 12–ª: –Ω—É–∂–Ω–æ {order_bottles_12}, –µ—Å—Ç—å {courier_capacity_12}")
                
                if not can_handle_19:
                    if order_bottles_19 > 0 and courier_capacity_19 == 0:
                        reasons.append(f"–Ω–µ—Ç 19–ª –±—É—Ç—ã–ª–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å {order_bottles_19} x 19–ª")
                    elif order_bottles_19 > courier_capacity_19:
                        reasons.append(f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 19–ª: –Ω—É–∂–Ω–æ {order_bottles_19}, –µ—Å—Ç—å {courier_capacity_19}")
                
                print(f"  üö´ –ó–∞–∫–∞–∑ {order['id']} –ù–ï —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –∫—É—Ä—å–µ—Ä–æ–º {courier_name} ({'; '.join(reasons)})", file=sys.stderr)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if not compatible_courier_indices:
        routing.AddDisjunction([order_routing_index], 100000)
        print(f"  ‚ùå –ó–ê–ö–ê–ó {order['id']} –ò–°–ö–õ–Æ–ß–ï–ù: –Ω–∏ –æ–¥–∏–Ω –∫—É—Ä—å–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å", file=sys.stderr)
    else:
        if order['id'] in courier_restrictions:
            allowed_courier_ids = courier_restrictions[order['id']]
            if allowed_courier_ids:
                restricted_courier_indices = []
                for courier_id in allowed_courier_ids:
                    for j, courier in enumerate(couriers):
                        if str(courier['id']) == str(courier_id):
                            restricted_courier_indices.append(j)
                            break
                
                final_allowed_indices = list(set(compatible_courier_indices) & set(restricted_courier_indices))
                
                if final_allowed_indices:
                    routing.SetAllowedVehiclesForIndex(final_allowed_indices, order_routing_index)
                    print(f"  ‚úÖ –ó–∞–∫–∞–∑ {order['id']}: —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ {final_allowed_indices}", file=sys.stderr)
                else:
                    routing.AddDisjunction([order_routing_index], 100000)
                    print(f"  ‚ùå –ó–ê–ö–ê–ó {order['id']} –ò–°–ö–õ–Æ–ß–ï–ù: –Ω–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤", file=sys.stderr)
            else:
                routing.AddDisjunction([order_routing_index], 100000)
                print(f"  ‚ùå –ó–ê–ö–ê–ó {order['id']} –ò–°–ö–õ–Æ–ß–ï–ù: –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏", file=sys.stderr)
        else:
            routing.SetAllowedVehiclesForIndex(compatible_courier_indices, order_routing_index)
            print(f"  ‚úÖ –ó–∞–∫–∞–∑ {order['id']}: —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ {compatible_courier_indices}", file=sys.stderr)

# –î–æ–±–∞–≤–ª—è–µ–º –∂–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
print("\n=== –ù–ê–°–¢–†–û–ô–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –ó–ê–ö–ê–ó–û–í ===", file=sys.stderr)
for vehicle_id, courier in enumerate(couriers):
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order_id = courier["order"]["orderId"]
        
        active_order_index = None
        for i, order in enumerate(orders):
            if order["id"] == active_order_id:
                active_order_index = num_couriers + 1 + i
                break
        
        if active_order_index is not None:
            active_order_routing_index = manager.NodeToIndex(active_order_index)
            
            routing.SetAllowedVehiclesForIndex([vehicle_id], active_order_routing_index)
            routing.AddDisjunction([active_order_routing_index], 100000)
            
            courier_type = courier_types[vehicle_id]
            
            routing.solver().Add(
                routing.NextVar(routing.Start(vehicle_id)) == active_order_routing_index
            )
            
            print(f"‚úÖ –ö—É—Ä—å–µ—Ä {courier['id']} (—Ç–∏–ø: {courier_type}) –¥–æ–ª–∂–µ–Ω –°–ù–ê–ß–ê–õ–ê –¥–æ–µ—Ö–∞—Ç—å –¥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {active_order_id}", file=sys.stderr)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±—É—Ç—ã–ª–æ–∫
def bottles_12_callback(from_index, to_index):
    try:
        if from_index < 0 or to_index < 0:
            return 0
        
        to_node = manager.IndexToNode(to_index)
        if to_node >= num_couriers + 1 and to_node < num_locations:
            order = orders[to_node - num_couriers - 1]
            return order.get("bottles_12") or 0
        return 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ bottles_12_callback: {e}", file=sys.stderr)
        return 0

def bottles_19_callback(from_index, to_index):
    try:
        if from_index < 0 or to_index < 0:
            return 0
        
        to_node = manager.IndexToNode(to_index)
        if to_node >= num_couriers + 1 and to_node < num_locations:
            order = orders[to_node - num_couriers - 1]
            return order.get("bottles_19") or 0
        return 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ bottles_19_callback: {e}", file=sys.stderr)
        return 0

bottles_12_callback_index = routing.RegisterTransitCallback(bottles_12_callback)
bottles_19_callback_index = routing.RegisterTransitCallback(bottles_19_callback)

# –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –±—É—Ç—ã–ª–∫–∏ 12–ª –∏ 19–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
courier_capacities_12 = []
courier_capacities_19 = []

for courier in couriers:
    capacity_12 = courier.get("capacity_12", 0)
    capacity_19 = courier.get("capacity_19", 0)
    courier_type = courier_types[couriers.index(courier)]
    courier_name = courier.get("id", "")
    
    if courier_name in COURIER_SPECIAL_RESTRICTIONS:
        special_restrictions = COURIER_SPECIAL_RESTRICTIONS[courier_name]
        max_bottles_12 = special_restrictions["max_bottles_12"]
        max_bottles_19 = special_restrictions["max_bottles_19"]
        
        courier_capacities_12.append(max_bottles_12)
        courier_capacities_19.append(max_bottles_19)
        
    elif courier_type == 'empty':
        total_capacity = courier.get("capacity", 100)
        courier_capacities_12.append(total_capacity)
        courier_capacities_19.append(total_capacity)
    else:
        courier_capacities_12.append(capacity_12 if capacity_12 > 0 else 0)
        courier_capacities_19.append(capacity_19 if capacity_19 > 0 else 0)

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è –±—É—Ç—ã–ª–æ–∫ 12–ª –∏ 19–ª
bottles_12_dimension = routing.AddDimensionWithVehicleCapacity(
    bottles_12_callback_index,
    0,
    courier_capacities_12,
    True,
    "Bottles12"
)

bottles_19_dimension = routing.AddDimensionWithVehicleCapacity(
    bottles_19_callback_index,
    0,
    courier_capacities_19,
    True,
    "Bottles19"
)

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
routing.AddDimension(
    transit_callback_index,
    7200,  # slack_max (2 —á–∞—Å–∞)
    86400,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞ (24 —á–∞—Å–∞)
    False,  # start_cumul_to_zero - –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –Ω–æ–ª—å
    'Time'
)
time_dimension = routing.GetDimensionOrDie('Time')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Ä–∞–≤–Ω—ã–º —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
for i in range(num_couriers):
    start_index = routing.Start(i)
    time_dimension.CumulVar(start_index).SetRange(current_time_in_seconds, current_time_in_seconds)
    print(f"–ö—É—Ä—å–µ—Ä {i} ({couriers[i]['id']}): –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è = {current_time_in_seconds} —Å–µ–∫", file=sys.stderr)

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
for order in orders:
    if 'date.time' in order:
        order_node_index = None
        for j, loc in enumerate(locations[:-1]):
            if 'id' in loc and loc['id'] == order['id']:
                order_node_index = j
                break

        if order_node_index is not None:
            order_index = manager.NodeToIndex(order_node_index)
            time_window_str = order['date.time'].split(' - ')
            start_time_str = time_window_str[0]
            end_time_str = time_window_str[1]

            start_h, start_m = map(int, start_time_str.split(':'))
            end_h, end_m = map(int, end_time_str.split(':'))
            
            start_time_seconds = start_h * 3600 + start_m * 60
            end_time_seconds = end_h * 3600 + end_m * 60

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            start_time_seconds = max(start_time_seconds, current_time_in_seconds)
            
            print(f"–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è {order['id']}: {start_time_seconds} - {end_time_seconds} —Å–µ–∫", file=sys.stderr)
            time_dimension.CumulVar(order_index).SetRange(int(start_time_seconds), int(end_time_seconds))

# –£–ª—É—á—à–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
search_params = pywrapcp.DefaultRoutingSearchParameters()
search_params.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
search_params.local_search_metaheuristic = routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH
search_params.time_limit.seconds = 30

print("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏...", file=sys.stderr)
solution = routing.SolveWithParameters(search_params)

if solution:
    print("\n=== –ú–ê–†–®–†–£–¢–´ –ù–ê–ô–î–ï–ù–´ ===", file=sys.stderr)
    print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {solution.ObjectiveValue()} —Å–µ–∫—É–Ω–¥", file=sys.stderr)
    
    routes = []
    total_time = 0
    active_couriers = 0
    
    for vehicle_id in range(num_couriers):
        index = routing.Start(vehicle_id)
        route_time = 0
        route_orders = []
        
        print(f"\n–ú–∞—Ä—à—Ä—É—Ç –∫—É—Ä—å–µ—Ä–∞ {couriers[vehicle_id]['id']}:", file=sys.stderr)
        
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            
            if node_index >= num_couriers + 1 and node_index < num_locations:
                order = orders[node_index - num_couriers - 1]
                route_orders.append(order["id"])
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
                route_time = solution.Value(time_dimension.CumulVar(index))
                hours = int(route_time // 3600)
                minutes = int((route_time % 3600) // 60)
                time_str = f"{hours:02d}:{minutes:02d}"
                
                print(f"  -> –ó–∞–∫–∞–∑ {order['id']}: –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è {time_str}", file=sys.stderr)
            
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            
            if not routing.IsEnd(index):
                route_time += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
        
        if route_orders:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±—É—Ç—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
            total_bottles_12 = 0
            total_bottles_19 = 0
            total_bottles = 0
            
            for order_id in route_orders:
                order_data = next((o for o in orders if o["id"] == order_id), None)
                if order_data:
                    bottles_12 = order_data.get("bottles_12") or 0
                    bottles_19 = order_data.get("bottles_19") or 0
                    total_bottles_12 += bottles_12
                    total_bottles_19 += bottles_19
                    total_bottles += bottles_12 + bottles_19
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ
            courier = couriers[vehicle_id]
            courier_type = courier_types[vehicle_id]
            courier_capacity_12 = courier.get("capacity_12", 0)
            courier_capacity_19 = courier.get("capacity_19", 0)
            courier_name = courier.get("id", "")
            
            # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—É—Ä—å–µ—Ä–∞
            if courier_type == 'empty':
                courier_should_take = {
                    "bottles_12": total_bottles_12,
                    "bottles_19": total_bottles_19,
                    "total": total_bottles_12 + total_bottles_19
                }
                courier_total_capacity = courier.get("capacity", 100)
            else:
                courier_should_take = {
                    "bottles_12": 0,
                    "bottles_19": 0,
                    "total": 0
                }
                courier_total_capacity = courier_capacity_12 + courier_capacity_19
            
            total_time += route_time
            active_couriers += 1
            
            route_info = {
                "courier_id": couriers[vehicle_id]["id"],
                "orders": route_orders,
                "orders_count": len(route_orders),
                "travel_time_seconds": route_time,
                "travel_time_minutes": round(route_time/60, 2),
                "required_bottles": {
                    "bottles_12": total_bottles_12,
                    "bottles_19": total_bottles_19,
                    "total": total_bottles
                },
                "courier_should_take": courier_should_take,
                "capacity_utilization": {
                    "percent": round(100 * total_bottles / max(courier_total_capacity, 1), 1)
                },
                "has_active_order": bool(couriers[vehicle_id].get("order")),
                "courier_type": courier_type
            }
            
            routes.append(route_info)
        else:
            print(f"  –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)
    
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ===", file=sys.stderr)
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫—É–Ω–¥ ({total_time/3600:.2f} —á–∞—Å–æ–≤)", file=sys.stderr)
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä–æ–≤: {active_couriers} –∏–∑ {num_couriers}", file=sys.stderr)
    print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –æ–±—Å–ª—É–∂–µ–Ω–æ: {sum(len(r['orders']) for r in routes)} –∏–∑ {num_orders}", file=sys.stderr)
    
    print(json.dumps(routes, ensure_ascii=False))
    
else:
    print("–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", file=sys.stderr)
    print("[]") 