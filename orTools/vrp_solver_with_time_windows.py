from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import math
import sys
import json
from datetime import datetime, timedelta
import copy

input_data = json.load(sys.stdin)

# –û–±—â–∞—è —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
common_depot = {"id": "depot", "lat": 43.16857, "lon": 76.89642}

couriers = input_data["couriers"]
orders = input_data["orders"]
courier_restrictions = input_data["courier_restrictions"]

# –°–∫–æ—Ä–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤ (60 –∫–º/—á)
speed_mps = 25 * 1000 / 3600  # –°–∫–æ—Ä–æ—Å—Ç—å –≤ –º–µ—Ç—Ä–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É

def haversine_distance(lat1, lon1, lat2, lon2):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–≤ –º–µ—Ç—Ä–∞—Ö).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤.
    """
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)

    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad

    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    distance = R * c
    return distance

def create_time_matrix(locations, speed_mps=speed_mps):
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ª–æ–∫–∞—Ü–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)."""
    num_locations = len(locations)
    time_matrix = [[0] * num_locations for _ in range(num_locations)]
    for i in range(num_locations):
        for j in range(num_locations):
            if i != j:
                distance = haversine_distance(
                    locations[i]['lat'], locations[i]['lon'],
                    locations[j]['lat'], locations[j]['lon']
                )
                # –í—Ä–µ–º—è = –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ / –°–∫–æ—Ä–æ—Å—Ç—å
                time_matrix[i][j] = int(distance / speed_mps)
    return time_matrix

# –ü–†–û–í–ï–†–ö–ò –ù–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–¨ –î–ê–ù–ù–´–•
print("=== –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–• ===", file=sys.stderr)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ê–ª–º–∞—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
now = datetime.now()
current_time_in_seconds = now.hour * 3600 + now.minute * 60 + now.second
print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')} ({current_time_in_seconds} —Å–µ–∫—É–Ω–¥)", file=sys.stderr)

# –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã: —É–±–∏—Ä–∞–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
valid_orders = []
max_wait_time_seconds = 60 * 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 1 —á–∞—Å

for order in orders:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
    if 'date.time' in order:
        time_window = order['date.time']
        if time_window:
            try:
                time_parts = time_window.split(' - ')
                start_time_str = time_parts[0].strip()
                end_time_str = time_parts[1].strip()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
                start_time_seconds = int(start_time_str.split(':')[0]) * 3600 + int(start_time_str.split(':')[1]) * 60
                end_time_seconds = int(end_time_str.split(':')[0]) * 3600 + int(end_time_str.split(':')[1]) * 60
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑
                if end_time_seconds < current_time_in_seconds:
                    print(f"–ó–∞–∫–∞–∑ {order['id']} –ø—Ä–æ–ø—É—â–µ–Ω - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ", file=sys.stderr)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—É–¥–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –∂–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
                if start_time_seconds > current_time_in_seconds + max_wait_time_seconds:
                    print(f"–ó–∞–∫–∞–∑ {order['id']} –ø—Ä–æ–ø—É—â–µ–Ω - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (–æ–∫–Ω–æ: {start_time_str}-{end_time_str})", file=sys.stderr)
                    continue
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è {order['id']}: {e}", file=sys.stderr)
                continue
    
    valid_orders.append(order)

orders = valid_orders
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}", file=sys.stderr)

# –î–í–£–•–≠–¢–ê–ü–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í
# 1. –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ
urgent_orders = []
regular_orders = []
for order in orders:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–ª—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    if order.get('isUrgent', False) or order.get('is_urgent', False):
        urgent_orders.append(order)
        print(f"üö® –°–†–û–ß–ù–´–ô –∑–∞–∫–∞–∑ {order['id']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å", file=sys.stderr)
    else:
        regular_orders.append(order)

print(f"–°—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(urgent_orders)}, –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(regular_orders)}", file=sys.stderr)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
COURIER_SPECIAL_RESTRICTIONS = {}

print(f"=== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ö–£–†–¨–ï–†–û–í ===", file=sys.stderr)
for courier_name, restrictions in COURIER_SPECIAL_RESTRICTIONS.items():
    print(f"–ö—É—Ä—å–µ—Ä {courier_name}: –º–∞–∫—Å. 12–ª={restrictions['max_bottles_12']}, –º–∞–∫—Å. 19–ª={restrictions['max_bottles_19']} ({restrictions['reason']})", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—å–µ—Ä–æ–≤
valid_couriers = []
for i, courier in enumerate(couriers):
    if courier.get("lat") is not None and courier.get("lon") is not None:
        valid_couriers.append(courier)
        print(f"‚úÖ –ö—É—Ä—å–µ—Ä {courier['id']}: ({courier['lat']}, {courier['lon']})", file=sys.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if courier.get("order") and courier["order"].get("status") == "onTheWay":
            active_order_id = courier["order"]["orderId"]
            print(f"   üöö –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: {active_order_id}", file=sys.stderr)
        else:
            print(f"   ‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)
    else:
        print(f"‚ùå –ö—É—Ä—å–µ—Ä {courier['id']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
active_order_ids = set()

# –°–æ–±–∏—Ä–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—å–µ—Ä–æ–≤
for courier in valid_couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order_ids.add(courier["order"]["orderId"])

# –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
active_orders_data = {}
for courier in valid_couriers:
    if courier.get("order") and courier["order"].get("status") == "onTheWay":
        active_order = courier["order"]
        active_orders_data[active_order["orderId"]] = {
            "id": active_order["orderId"],
            "lat": active_order["lat"],
            "lon": active_order["lon"],
            "bottles_12": active_order.get("bottles_12", 0),
            "bottles_19": active_order.get("bottles_19", 0),
            "status": "onTheWay"
        }

for i, order in enumerate(orders):
    if order.get("lat") is not None and order.get("lon") is not None:
        status_info = " (–ê–ö–¢–ò–í–ù–´–ô)" if order['id'] in active_order_ids else ""
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order['id']}: ({order['lat']}, {order['lon']}){status_info}", file=sys.stderr)
    else:
        print(f"‚ùå –ó–∞–∫–∞–∑ {order['id']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", file=sys.stderr)

# –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
for active_order_id, active_order_data in active_orders_data.items():
    orders.append(active_order_data)
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ {active_order_id}: ({active_order_data['lat']}, {active_order_data['lon']}) (–ê–ö–¢–ò–í–ù–´–ô)", file=sys.stderr)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
couriers = valid_couriers

print(f"\n–í–∞–ª–∏–¥–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã: {len(couriers)}", file=sys.stderr)
print(f"–í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {len(orders)}", file=sys.stderr)
print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {len(active_order_ids)}", file=sys.stderr)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
if len(couriers) == 0:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏!", file=sys.stderr)
    print("[]", file=sys.stdout)
    sys.exit(0)

if len(orders) == 0:
    print("‚ùå –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!", file=sys.stderr)
    print("[]", file=sys.stdout)
    sys.exit(0)

print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...", file=sys.stderr)

# –£–ª—É—á—à–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
search_params = pywrapcp.DefaultRoutingSearchParameters()
search_params.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
search_params.local_search_metaheuristic = routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH
search_params.time_limit.seconds = 30

def solve_vrp_for_orders(couriers_data, orders_data):
    """–†–µ—à–∞–µ—Ç VRP –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π: –¥–µ–ø–æ + –∫—É—Ä—å–µ—Ä—ã + –∑–∞–∫–∞–∑—ã
    locations = [common_depot] + couriers_data + orders_data
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
    time_matrix = create_time_matrix(locations, speed_mps=speed_mps)
    
    num_couriers = len(couriers_data)
    num_orders = len(orders_data)
    num_locations = len(locations)
    
    # –û–¢–ö–†–´–¢–´–ï –ú–ê–†–®–†–£–¢–´: –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏
    starts = list(range(1, num_couriers + 1))
    virtual_ends = []
    for vehicle_id in range(num_couriers):
        virtual_end_index = num_locations + vehicle_id
        virtual_ends.append(virtual_end_index)
    
    total_locations = num_locations + num_couriers
    
    manager = pywrapcp.RoutingIndexManager(total_locations, num_couriers, starts, virtual_ends)
    routing = pywrapcp.RoutingModel(manager)
    
    # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    def time_callback(from_index, to_index):
        try:
            if from_index < 0 or to_index < 0:
                return 999999
            
            from_node = manager.IndexToNode(from_index)
            to_node = manager.IndexToNode(to_index)
            
            if to_node >= num_locations:
                return 0
            
            if from_node >= num_locations:
                return 999999
            
            travel_time = time_matrix[from_node][to_node]
            
            service_time_per_order = 15 * 60
            if (to_node >= num_couriers + 1 and to_node < num_locations and
                not locations[to_node].get('is_courier_start', False) and
                not locations[to_node].get('is_active_order', False)):
                travel_time += service_time_per_order
                
            return int(travel_time)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ time_callback: {e}", file=sys.stderr)
            return 999999
    
    transit_callback_index = routing.RegisterTransitCallback(time_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    for order_idx in range(num_couriers + 1, num_locations):
        order = orders_data[order_idx - num_couriers - 1]
        
        # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —à—Ç—Ä–∞—Ñ—ã –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        if order.get('isUrgent', False) or order.get('is_urgent', False):
            penalty = 100000  # –í—ã—Å–æ–∫–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            print(f"üö® –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ {order['id']} - —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫: {penalty}", file=sys.stderr)
        else:
            penalty = 10000  # –û–±—ã—á–Ω—ã–π —à—Ç—Ä–∞—Ñ
        
        routing.AddDisjunction([manager.NodeToIndex(order_idx)], penalty)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    routing.AddDimension(
        transit_callback_index,
        7200,  # slack_max (2 —á–∞—Å–∞)
        86400,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞ (24 —á–∞—Å–∞)
        False,  # start_cumul_to_zero - –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –Ω–æ–ª—å
        'Time'
    )
    time_dimension = routing.GetDimensionOrDie('Time')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Ä–∞–≤–Ω—ã–º —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    for i in range(num_couriers):
        start_index = routing.Start(i)
        time_dimension.CumulVar(start_index).SetRange(current_time_in_seconds, current_time_in_seconds)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    for order in orders_data:
        if 'date.time' in order:
            order_node_index = None
            for j, loc in enumerate(locations[:-1]):
                if 'id' in loc and loc['id'] == order['id']:
                    order_node_index = j
                    break
    
            if order_node_index is not None:
                order_index = manager.NodeToIndex(order_node_index)
                time_window_str = order['date.time'].split(' - ')
                start_time_str = time_window_str[0]
                end_time_str = time_window_str[1]
    
                start_h, start_m = map(int, start_time_str.split(':'))
                end_h, end_m = map(int, end_time_str.split(':'))
                
                start_time_seconds = start_h * 3600 + start_m * 60
                end_time_seconds = end_h * 3600 + end_m * 60
    
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
                start_time_seconds = max(start_time_seconds, current_time_in_seconds)
                
                # –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–µ–ª–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏
                if order.get('isUrgent', False) or order.get('is_urgent', False):
                    print(f"üö® –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ {order['id']} —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–æ–º: {start_time_str}-{end_time_str}", file=sys.stderr)
                    # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                    max_wait_for_urgent = 30 * 60  # 30 –º–∏–Ω—É—Ç –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö
                    if start_time_seconds > current_time_in_seconds + max_wait_for_urgent:
                        print(f"‚ö†Ô∏è  –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ {order['id']} –ø—Ä–æ–ø—É—â–µ–Ω - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ", file=sys.stderr)
                        continue
                
                time_dimension.CumulVar(order_index).SetRange(int(start_time_seconds), int(end_time_seconds))
    
    # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É
    solution = routing.SolveWithParameters(search_params)
    
    if solution:
        routes = []
        for vehicle_id in range(num_couriers):
            index = routing.Start(vehicle_id)
            route_orders = []
            
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                
                if node_index >= num_couriers + 1 and node_index < num_locations:
                    order = orders_data[node_index - num_couriers - 1]
                    route_orders.append(order["id"])
                
                index = solution.Value(routing.NextVar(index))
            
            if route_orders:
                routes.append({
                    "courier_id": couriers_data[vehicle_id]["id"],
                    "orders": route_orders
                })
        
        return routes
    else:
        return []

# –î–í–£–•–≠–¢–ê–ü–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï
print("=== –î–í–£–•–≠–¢–ê–ü–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í ===", file=sys.stderr)

# 2. –ö–æ–ø–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
couriers_for_urgent = copy.deepcopy(couriers)

# 3. –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
assigned_urgent = []
if urgent_orders:
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(urgent_orders)} —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...", file=sys.stderr)
    assigned_urgent = solve_vrp_for_orders(couriers_for_urgent, urgent_orders)
    print(f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ {len(assigned_urgent)} —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", file=sys.stderr)
else:
    print("–°—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç", file=sys.stderr)

# 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫—É—Ä—å–µ—Ä–∞–º
courier_assignments = {}
for assignment in assigned_urgent:
    courier_id = assignment['courier_id']
    if courier_id not in courier_assignments:
        courier_assignments[courier_id] = []
    courier_assignments[courier_id].extend(assignment['orders'])

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
for courier_id, assigned_order_ids in courier_assignments.items():
    courier = next((c for c in couriers if c['id'] == courier_id), None)
    if courier:
        # –£–º–µ–Ω—å—à–∞–µ–º –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        for order_id in assigned_order_ids:
            order = next((o for o in urgent_orders if o['id'] == order_id), None)
            if order:
                courier['capacity_12'] = max(0, courier.get('capacity_12', 0) - order.get('bottles_12', 0))
                courier['capacity_19'] = max(0, courier.get('capacity_19', 0) - order.get('bottles_19', 0))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞
        if assigned_order_ids:
            last_order_id = assigned_order_ids[-1]
            last_order = next((o for o in urgent_orders if o['id'] == last_order_id), None)
            if last_order:
                courier['lat'] = last_order['lat']
                courier['lon'] = last_order['lon']
                print(f"–ö—É—Ä—å–µ—Ä {courier_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ ({last_order['lat']:.6f}, {last_order['lon']:.6f})", file=sys.stderr)

# 5. –†–µ—à–∞–µ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å —É—á—ë—Ç–æ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ä–æ—á–Ω—ã—Ö
assigned_regular = solve_vrp_for_orders(couriers, regular_orders)

# 6. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
all_routes = assigned_urgent + assigned_regular

# –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
final_routes = []
for route in all_routes:
    courier_id = route['courier_id']
    route_orders = route['orders']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±—É—Ç—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
    total_bottles_12 = 0
    total_bottles_19 = 0
    total_bottles = 0
    
    for order_id in route_orders:
        order_data = next((o for o in orders if o["id"] == order_id), None)
        if order_data:
            bottles_12 = order_data.get("bottles_12") or 0
            bottles_19 = order_data.get("bottles_19") or 0
            total_bottles_12 += bottles_12
            total_bottles_19 += bottles_19
            total_bottles += bottles_12 + bottles_19
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ
    courier = next((c for c in couriers if c['id'] == courier_id), None)
    if courier:
        courier_type = 'loaded' if (courier.get('capacity_12', 0) > 0 or courier.get('capacity_19', 0) > 0) else 'empty'
        courier_capacity_12 = courier.get("capacity_12", 0)
        courier_capacity_19 = courier.get("capacity_19", 0)
        
        # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—É—Ä—å–µ—Ä–∞
        if courier_type == 'empty':
            courier_should_take = {
                "bottles_12": total_bottles_12,
                "bottles_19": total_bottles_19,
                "total": total_bottles_12 + total_bottles_19
            }
            courier_total_capacity = courier.get("capacity", 100)
        else:
            courier_should_take = {
                "bottles_12": 0,
                "bottles_19": 0,
                "total": 0
            }
            courier_total_capacity = courier_capacity_12 + courier_capacity_19
        
        # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
        estimated_time_minutes = len(route_orders) * 30  # 30 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–∫–∞–∑
        
        route_info = {
            "courier_id": courier_id,
            "orders": route_orders,
            "orders_count": len(route_orders),
            "travel_time_seconds": estimated_time_minutes * 60,
            "travel_time_minutes": estimated_time_minutes,
            "required_bottles": {
                "bottles_12": total_bottles_12,
                "bottles_19": total_bottles_19,
                "total": total_bottles
            },
            "courier_should_take": courier_should_take,
            "capacity_utilization": {
                "percent": round(100 * total_bottles / max(courier_total_capacity, 1), 1)
            },
            "has_active_order": bool(courier.get("order")),
            "courier_type": courier_type
        }
        
        final_routes.append(route_info)

print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–í–£–•–≠–¢–ê–ü–ù–û–ì–û –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ===", file=sys.stderr)
print(f"–°—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {len(assigned_urgent)}", file=sys.stderr)
print(f"–û–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {len(assigned_regular)}", file=sys.stderr)
print(f"–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(final_routes)}", file=sys.stderr)

print(json.dumps(final_routes, ensure_ascii=False)) 