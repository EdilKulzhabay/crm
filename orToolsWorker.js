import { Worker, QueueScheduler } from 'bullmq';
import redisConnection from './redis-config.js';
import orTools from './orTools.js';
import dotenv from 'dotenv';

dotenv.config();

console.log('üöÄ –ó–∞–ø—É—Å–∫ orTools –≤–æ—Ä–∫–µ—Ä–∞...');

// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
const scheduler = new QueueScheduler('orTools', {
    connection: redisConnection,
});

// –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
const worker = new Worker('orTools', async (job) => {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ orTools –∑–∞–¥–∞—á–∏ ${job.id}`);
    console.log(`üìä –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:`, job.data);
    
    try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º orTools
        const result = await orTools();
        
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${job.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        return {
            success: true,
            result,
            completedAt: new Date().toISOString(),
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${job.id}:`, error);
        throw error; // BullMQ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç –∑–∞–¥–∞—á—É
    }
}, {
    connection: redisConnection,
    concurrency: 1, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤–æ—Ä–∫–µ—Ä–∞
worker.on('completed', (job, result) => {
    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
});

worker.on('failed', (job, err) => {
    console.error(`‚ùå –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:`, err.message);
    console.error(`üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, err);
});

worker.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞:', err);
});

worker.on('stalled', (jobId) => {
    console.warn(`‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–∏—Å–ª–∞`);
});

worker.on('waiting', (jobId) => {
    console.log(`‚è≥ –ó–∞–¥–∞—á–∞ ${jobId} –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
});

worker.on('active', (job) => {
    console.log(`üéØ –ó–∞–¥–∞—á–∞ ${job.id} —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π`);
});

console.log('‚úÖ orTools –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –≤–æ—Ä–∫–µ—Ä–∞...');
    await worker.close();
    await scheduler.close();
    await redisConnection.quit();
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –≤–æ—Ä–∫–µ—Ä–∞...');
    await worker.close();
    await scheduler.close();
    await redisConnection.quit();
    process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
    process.exit(1);
}); 