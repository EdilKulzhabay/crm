import mongoose from 'mongoose';
import axios from 'axios';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb://localhost:27017/crm');

// –°—Ö–µ–º—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
const orderSchema = new mongoose.Schema({}, { strict: false, strictPopulate: false });
const clientSchema = new mongoose.Schema({}, { strict: false });
const Order = mongoose.model('Order', orderSchema, 'orders');
const Client = mongoose.model('Client', clientSchema, 'clients');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É (–∫–∞–∫ –≤ ClientController.js)
const fetchAddressId = async (addressActual) => {
    try {
        const response = await axios.get('https://catalog.api.2gis.com/3.0/items/geocode', {
            params: {
                fields: "items.point",
                key: "f5af220d-c60a-4cf6-a350-4a953c324a3d",
                q: `–ê–ª–º–∞—Ç—ã, ${addressActual}`,
            },
        });
        
        console.log(`–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è: ${addressActual}`);
        console.log("response.data.result", response.data.result);
        
        return response.data.result.items[0] || null;
    } catch (error) {
        console.log(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å: ${addressActual}`);
        return null;
    }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const updateOrderCoordinates = async () => {
    try {
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –Ω–∞ 2025-06-27 –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–Ω—á–∞–π–∑–∏ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å populate client
        const orders = await Order.find({
            franchisee: { 
                $in: [
                    new mongoose.Types.ObjectId('66f15c557a27c92d447a16a0'), 
                    new mongoose.Types.ObjectId('66fc0cc6953c2dbbc86c2132'), 
                    new mongoose.Types.ObjectId('66fc0d01953c2dbbc86c2135'), 
                    new mongoose.Types.ObjectId('66fc0d3e953c2dbbc86c2138'),
                    new mongoose.Types.ObjectId('67010493e6648af4cb0213b7')
                ]
            },
            _id: {
                $nin: [
                    new mongoose.Types.ObjectId('6860fe2848cdb02bd0b9acc2'),
                    new mongoose.Types.ObjectId('68636ae448cdb02bd0ba8f34'),
                    new mongoose.Types.ObjectId('6862aa3b48cdb02bd0ba6ddc')
                ]
            },
            "date.d": "2025-07-01",
            $or: [
                { "address.point": null },
                { "address.point": { lat: null, lon: null } },
                { "address.point": { $exists: false } }
            ]
        }).populate('client');

        console.log(`–ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`);

        let updatedCount = 0;
        let failedCount = 0;
        let clientsUpdated = new Set(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
        for (const order of orders) {
            console.log(`\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ ID: ${order._id}`);
            console.log(`–ê–¥—Ä–µ—Å –∑–∞–∫–∞–∑–∞: ${order.address.actual}`);
            console.log(`–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:`, order.address.point);

            if (!order.client) {
                console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order._id}`);
                failedCount++;
                continue;
            }

            // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –≤ –º–∞—Å—Å–∏–≤–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
            const clientAddresses = order.client.addresses || [];
            let matchingAddress = null;

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if (order.address.name) {
                matchingAddress = clientAddresses.find(addr => addr.name === order.address.name);
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é actual
            if (!matchingAddress) {
                matchingAddress = clientAddresses.find(addr => 
                    addr.actual && order.address.actual && 
                    (addr.actual.includes(order.address.actual) || order.address.actual.includes(addr.actual))
                );
            }

            let addressToGeocode = order.address.actual;
            
            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ street
            if (matchingAddress && matchingAddress.street) {
                addressToGeocode = matchingAddress.street;
                console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: ${addressToGeocode}`);
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ API 2GIS
            const result = await fetchAddressId(addressToGeocode);

            if (result && result.point) {
                console.log(`üìç –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ API:`, result.point);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∑–∞–∫–∞–∑–µ
                const newPoint = {
                    lat: result.point.lat,
                    lon: result.point.lon
                };
                
                console.log(`üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:`, newPoint);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º updateOne –≤–º–µ—Å—Ç–æ save –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                const updateResult = await Order.updateOne(
                    { _id: order._id },
                    { 
                        $set: { 
                            "address.point": newPoint,
                            updatedAt: new Date(),
                            forceUpdate: true
                        }
                    }
                );
                
                console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateResult);
                
                if (updateResult.modifiedCount > 0) {
                    console.log(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: lat=${newPoint.lat}, lon=${newPoint.lon}`);
                    updatedCount++;
                } else {
                    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                    failedCount++;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–¥—Ä–µ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
                if (matchingAddress) {
                    matchingAddress.id2Gis = result.id;
                    matchingAddress.point = newPoint;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏
                    if (!clientsUpdated.has(order.client._id.toString())) {
                        await order.client.save();
                        clientsUpdated.add(order.client._id.toString());
                        console.log(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
                    }
                }
            } else {
                console.log(`‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞: ${addressToGeocode}`);
                failedCount++;
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
            await new Promise(resolve => setTimeout(resolve, 200));
        }

        console.log(`\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===`);
        console.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
        console.log(`–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${failedCount}`);
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientsUpdated.size}`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
    } finally {
        mongoose.connection.close();
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateOrderCoordinates(); 